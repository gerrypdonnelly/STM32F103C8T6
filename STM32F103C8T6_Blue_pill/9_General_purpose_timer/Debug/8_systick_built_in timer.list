
8_systick_built_in timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000de8  08000de8  00001de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e00  08000e00  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e00  08000e00  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e00  08000e00  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e00  08000e00  00001e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e04  08000e04  00001e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000e08  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000e64  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000e64  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d75  00000000  00000000  00002085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000548  00000000  00000000  00002dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00003348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ea  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f24  00000000  00000000  00003592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000207a  00000000  00000000  000054b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000599a8  00000000  00000000  00007530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a5c  00000000  00000000  00060f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00061978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dd0 	.word	0x08000dd0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08000dd0 	.word	0x08000dd0

08000170 <systickDelayMs>:
#define CTRL_ENABLE (1U<<0)
#define CTRL_CLOCK_SOURCE (1U<<2)
#define CTRL_COUNT_FLAG (1U<<16)

void systickDelayMs(int delay)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	//Must review the generic user guide for this core peripheral

	//Configure systick

	SysTick->LOAD = SYSTICK_LOAD_VAL; 	//Reload with number of clocks per millisecond
 8000178:	4b11      	ldr	r3, [pc, #68]	@ (80001c0 <systickDelayMs+0x50>)
 800017a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800017e:	605a      	str	r2, [r3, #4]

	SysTick->VAL = 0;					//Clear the systick current value register
 8000180:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <systickDelayMs+0x50>)
 8000182:	2200      	movs	r2, #0
 8000184:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = CTRL_ENABLE | CTRL_CLOCK_SOURCE;	//Enable the systick and select internal clock source
 8000186:	4b0e      	ldr	r3, [pc, #56]	@ (80001c0 <systickDelayMs+0x50>)
 8000188:	2205      	movs	r2, #5
 800018a:	601a      	str	r2, [r3, #0]

	for (int i=0; i<delay; i++)
 800018c:	2300      	movs	r3, #0
 800018e:	60fb      	str	r3, [r7, #12]
 8000190:	e009      	b.n	80001a6 <systickDelayMs+0x36>
	{
		while((SysTick->CTRL & CTRL_COUNT_FLAG)==0){}//wait until the count flag is set
 8000192:	bf00      	nop
 8000194:	4b0a      	ldr	r3, [pc, #40]	@ (80001c0 <systickDelayMs+0x50>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800019c:	2b00      	cmp	r3, #0
 800019e:	d0f9      	beq.n	8000194 <systickDelayMs+0x24>
	for (int i=0; i<delay; i++)
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	3301      	adds	r3, #1
 80001a4:	60fb      	str	r3, [r7, #12]
 80001a6:	68fa      	ldr	r2, [r7, #12]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	dbf1      	blt.n	8000192 <systickDelayMs+0x22>
	}
    SysTick->CTRL = 0;
 80001ae:	4b04      	ldr	r3, [pc, #16]	@ (80001c0 <systickDelayMs+0x50>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]

}
 80001b4:	bf00      	nop
 80001b6:	3714      	adds	r7, #20
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	e000e010 	.word	0xe000e010

080001c4 <USART1_Init>:
#include "stm32f103xb.h"


// Initialize USART1 for 9600 baud, 8N1 configuration
void USART1_Init(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and USART1
    RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN);
 80001c8:	4b19      	ldr	r3, [pc, #100]	@ (8000230 <USART1_Init+0x6c>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	4a18      	ldr	r2, [pc, #96]	@ (8000230 <USART1_Init+0x6c>)
 80001ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6193      	str	r3, [r2, #24]

    // Configure PA9 (TX) as Alternate function push-pull
    GPIOA->CRH &= ~(1U<<4);
 80001d8:	4b16      	ldr	r3, [pc, #88]	@ (8000234 <USART1_Init+0x70>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <USART1_Init+0x70>)
 80001de:	f023 0310 	bic.w	r3, r3, #16
 80001e2:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (1U<<5);      // Output mode, max speed 2 MHz
 80001e4:	4b13      	ldr	r3, [pc, #76]	@ (8000234 <USART1_Init+0x70>)
 80001e6:	685b      	ldr	r3, [r3, #4]
 80001e8:	4a12      	ldr	r2, [pc, #72]	@ (8000234 <USART1_Init+0x70>)
 80001ea:	f043 0320 	orr.w	r3, r3, #32
 80001ee:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~(1U<<6);
 80001f0:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <USART1_Init+0x70>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000234 <USART1_Init+0x70>)
 80001f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80001fa:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (1U<<7);       // Alternate function push-pull
 80001fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000234 <USART1_Init+0x70>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a0c      	ldr	r2, [pc, #48]	@ (8000234 <USART1_Init+0x70>)
 8000202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000206:	6053      	str	r3, [r2, #4]
    //Div fraction = .086  then * by 16 for over sampling => 1.328
    //converting mantissa to hex 52 => 0x34
    //USARTDIV value = 0x341

    // Configure USART1 for 9600 baud rate
    USART1->BRR = 0x341;  // Assuming a clock of 8 MHz
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <USART1_Init+0x74>)
 800020a:	f240 3241 	movw	r2, #833	@ 0x341
 800020e:	609a      	str	r2, [r3, #8]

    // Enable USART1 & TX
    USART1->CR1 |= USART_CR1_UE;    // USART enable
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <USART1_Init+0x74>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <USART1_Init+0x74>)
 8000216:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800021a:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_TE;    // Transmit enable
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <USART1_Init+0x74>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	4a05      	ldr	r2, [pc, #20]	@ (8000238 <USART1_Init+0x74>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	60d3      	str	r3, [r2, #12]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	40021000 	.word	0x40021000
 8000234:	40010800 	.word	0x40010800
 8000238:	40013800 	.word	0x40013800

0800023c <UART_write>:

void UART_write(int ch)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 8000244:	bf00      	nop
 8000246:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <UART_write+0x28>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0f9      	beq.n	8000246 <UART_write+0xa>
	USART1->DR = ch & 0xff;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a03      	ldr	r2, [pc, #12]	@ (8000264 <UART_write+0x28>)
 8000256:	b2db      	uxtb	r3, r3
 8000258:	6053      	str	r3, [r2, #4]

}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40013800 	.word	0x40013800

08000268 <__io_putchar>:


#define LED (1U<<2)

int __io_putchar(int ch)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	UART_write(ch);
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ffe3 	bl	800023c <UART_write>
	return ch;
 8000276:	687b      	ldr	r3, [r7, #4]
}
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <main>:


uint32_t sensor_value;

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	USART1_Init();
 8000284:	f7ff ff9e 	bl	80001c4 <USART1_Init>


	//Configuration for LED
	RCC->APB2ENR |=(1U<<3);//Enable clock to PB
 8000288:	4b16      	ldr	r3, [pc, #88]	@ (80002e4 <main+0x64>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a15      	ldr	r2, [pc, #84]	@ (80002e4 <main+0x64>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6193      	str	r3, [r2, #24]
	//Set Mode of LED pin to output max speed 50Mhz
	GPIOB->CRL |=(1U<<8);
 8000294:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <main+0x68>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a13      	ldr	r2, [pc, #76]	@ (80002e8 <main+0x68>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800029e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=(1U<<9);
 80002a0:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <main+0x68>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a10      	ldr	r2, [pc, #64]	@ (80002e8 <main+0x68>)
 80002a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002aa:	6013      	str	r3, [r2, #0]
	//Set CNF of LED pin to Output push pull
	GPIOB->CRL &=~(1U<<10);
 80002ac:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <main+0x68>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <main+0x68>)
 80002b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002b6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &=~(1U<<11);
 80002b8:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <main+0x68>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <main+0x68>)
 80002be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002c2:	6013      	str	r3, [r2, #0]

	while(1)
	{


		printf("A second has passed \n");
 80002c4:	4809      	ldr	r0, [pc, #36]	@ (80002ec <main+0x6c>)
 80002c6:	f000 f9f5 	bl	80006b4 <puts>
		GPIOB->ODR ^= LED;
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <main+0x68>)
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	4a06      	ldr	r2, [pc, #24]	@ (80002e8 <main+0x68>)
 80002d0:	f083 0304 	eor.w	r3, r3, #4
 80002d4:	60d3      	str	r3, [r2, #12]
		systickDelayMs(1000);
 80002d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002da:	f7ff ff49 	bl	8000170 <systickDelayMs>
		printf("A second has passed \n");
 80002de:	bf00      	nop
 80002e0:	e7f0      	b.n	80002c4 <main+0x44>
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	08000de8 	.word	0x08000de8

080002f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	e00a      	b.n	8000318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000302:	f3af 8000 	nop.w
 8000306:	4601      	mov	r1, r0
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	60ba      	str	r2, [r7, #8]
 800030e:	b2ca      	uxtb	r2, r1
 8000310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3301      	adds	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	dbf0      	blt.n	8000302 <_read+0x12>
  }

  return len;
 8000320:	687b      	ldr	r3, [r7, #4]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b086      	sub	sp, #24
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	e009      	b.n	8000350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	60ba      	str	r2, [r7, #8]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff8f 	bl	8000268 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf1      	blt.n	800033c <_write+0x12>
  }
  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_close>:

int _close(int file)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800036a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000388:	605a      	str	r2, [r3, #4]
  return 0;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr

08000396 <_isatty>:

int _isatty(int file)
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800039e:	2301      	movs	r3, #1
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b085      	sub	sp, #20
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	60f8      	str	r0, [r7, #12]
 80003b2:	60b9      	str	r1, [r7, #8]
 80003b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003b6:	2300      	movs	r3, #0
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003cc:	4a14      	ldr	r2, [pc, #80]	@ (8000420 <_sbrk+0x5c>)
 80003ce:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <_sbrk+0x60>)
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003d8:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <_sbrk+0x64>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d102      	bne.n	80003e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <_sbrk+0x64>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	@ (800042c <_sbrk+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003e6:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <_sbrk+0x64>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	693a      	ldr	r2, [r7, #16]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d207      	bcs.n	8000404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003f4:	f000 fa8c 	bl	8000910 <__errno>
 80003f8:	4603      	mov	r3, r0
 80003fa:	220c      	movs	r2, #12
 80003fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000402:	e009      	b.n	8000418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000404:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <_sbrk+0x64>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800040a:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <_sbrk+0x64>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	4a05      	ldr	r2, [pc, #20]	@ (8000428 <_sbrk+0x64>)
 8000414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000416:	68fb      	ldr	r3, [r7, #12]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20005000 	.word	0x20005000
 8000424:	00000400 	.word	0x00000400
 8000428:	20000078 	.word	0x20000078
 800042c:	200001c8 	.word	0x200001c8

08000430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000434:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	@ (800046c <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	@ (8000470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	@ (8000474 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	@ (800047c <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045e:	f000 fa5d 	bl	800091c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff ff0d 	bl	8000280 <main>

08000466 <LoopForever>:

LoopForever:
  b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   r0, =_estack
 8000468:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000474:	08000e08 	.word	0x08000e08
  ldr r2, =_sbss
 8000478:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800047c:	200001c8 	.word	0x200001c8

08000480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC1_2_IRQHandler>
	...

08000484 <std>:
 8000484:	2300      	movs	r3, #0
 8000486:	b510      	push	{r4, lr}
 8000488:	4604      	mov	r4, r0
 800048a:	e9c0 3300 	strd	r3, r3, [r0]
 800048e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000492:	6083      	str	r3, [r0, #8]
 8000494:	8181      	strh	r1, [r0, #12]
 8000496:	6643      	str	r3, [r0, #100]	@ 0x64
 8000498:	81c2      	strh	r2, [r0, #14]
 800049a:	6183      	str	r3, [r0, #24]
 800049c:	4619      	mov	r1, r3
 800049e:	2208      	movs	r2, #8
 80004a0:	305c      	adds	r0, #92	@ 0x5c
 80004a2:	f000 f9e7 	bl	8000874 <memset>
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <std+0x58>)
 80004a8:	6224      	str	r4, [r4, #32]
 80004aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <std+0x5c>)
 80004ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80004b0:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <std+0x60>)
 80004b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <std+0x64>)
 80004b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80004b8:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <std+0x68>)
 80004ba:	429c      	cmp	r4, r3
 80004bc:	d006      	beq.n	80004cc <std+0x48>
 80004be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80004c2:	4294      	cmp	r4, r2
 80004c4:	d002      	beq.n	80004cc <std+0x48>
 80004c6:	33d0      	adds	r3, #208	@ 0xd0
 80004c8:	429c      	cmp	r4, r3
 80004ca:	d105      	bne.n	80004d8 <std+0x54>
 80004cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80004d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004d4:	f000 ba46 	b.w	8000964 <__retarget_lock_init_recursive>
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	bf00      	nop
 80004dc:	080006c5 	.word	0x080006c5
 80004e0:	080006e7 	.word	0x080006e7
 80004e4:	0800071f 	.word	0x0800071f
 80004e8:	08000743 	.word	0x08000743
 80004ec:	2000007c 	.word	0x2000007c

080004f0 <stdio_exit_handler>:
 80004f0:	4a02      	ldr	r2, [pc, #8]	@ (80004fc <stdio_exit_handler+0xc>)
 80004f2:	4903      	ldr	r1, [pc, #12]	@ (8000500 <stdio_exit_handler+0x10>)
 80004f4:	4803      	ldr	r0, [pc, #12]	@ (8000504 <stdio_exit_handler+0x14>)
 80004f6:	f000 b869 	b.w	80005cc <_fwalk_sglue>
 80004fa:	bf00      	nop
 80004fc:	20000000 	.word	0x20000000
 8000500:	08000c59 	.word	0x08000c59
 8000504:	20000010 	.word	0x20000010

08000508 <cleanup_stdio>:
 8000508:	6841      	ldr	r1, [r0, #4]
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <cleanup_stdio+0x34>)
 800050c:	b510      	push	{r4, lr}
 800050e:	4299      	cmp	r1, r3
 8000510:	4604      	mov	r4, r0
 8000512:	d001      	beq.n	8000518 <cleanup_stdio+0x10>
 8000514:	f000 fba0 	bl	8000c58 <_fflush_r>
 8000518:	68a1      	ldr	r1, [r4, #8]
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <cleanup_stdio+0x38>)
 800051c:	4299      	cmp	r1, r3
 800051e:	d002      	beq.n	8000526 <cleanup_stdio+0x1e>
 8000520:	4620      	mov	r0, r4
 8000522:	f000 fb99 	bl	8000c58 <_fflush_r>
 8000526:	68e1      	ldr	r1, [r4, #12]
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <cleanup_stdio+0x3c>)
 800052a:	4299      	cmp	r1, r3
 800052c:	d004      	beq.n	8000538 <cleanup_stdio+0x30>
 800052e:	4620      	mov	r0, r4
 8000530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000534:	f000 bb90 	b.w	8000c58 <_fflush_r>
 8000538:	bd10      	pop	{r4, pc}
 800053a:	bf00      	nop
 800053c:	2000007c 	.word	0x2000007c
 8000540:	200000e4 	.word	0x200000e4
 8000544:	2000014c 	.word	0x2000014c

08000548 <global_stdio_init.part.0>:
 8000548:	b510      	push	{r4, lr}
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <global_stdio_init.part.0+0x30>)
 800054c:	4c0b      	ldr	r4, [pc, #44]	@ (800057c <global_stdio_init.part.0+0x34>)
 800054e:	4a0c      	ldr	r2, [pc, #48]	@ (8000580 <global_stdio_init.part.0+0x38>)
 8000550:	4620      	mov	r0, r4
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	2104      	movs	r1, #4
 8000556:	2200      	movs	r2, #0
 8000558:	f7ff ff94 	bl	8000484 <std>
 800055c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000560:	2201      	movs	r2, #1
 8000562:	2109      	movs	r1, #9
 8000564:	f7ff ff8e 	bl	8000484 <std>
 8000568:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800056c:	2202      	movs	r2, #2
 800056e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000572:	2112      	movs	r1, #18
 8000574:	f7ff bf86 	b.w	8000484 <std>
 8000578:	200001b4 	.word	0x200001b4
 800057c:	2000007c 	.word	0x2000007c
 8000580:	080004f1 	.word	0x080004f1

08000584 <__sfp_lock_acquire>:
 8000584:	4801      	ldr	r0, [pc, #4]	@ (800058c <__sfp_lock_acquire+0x8>)
 8000586:	f000 b9ee 	b.w	8000966 <__retarget_lock_acquire_recursive>
 800058a:	bf00      	nop
 800058c:	200001bd 	.word	0x200001bd

08000590 <__sfp_lock_release>:
 8000590:	4801      	ldr	r0, [pc, #4]	@ (8000598 <__sfp_lock_release+0x8>)
 8000592:	f000 b9e9 	b.w	8000968 <__retarget_lock_release_recursive>
 8000596:	bf00      	nop
 8000598:	200001bd 	.word	0x200001bd

0800059c <__sinit>:
 800059c:	b510      	push	{r4, lr}
 800059e:	4604      	mov	r4, r0
 80005a0:	f7ff fff0 	bl	8000584 <__sfp_lock_acquire>
 80005a4:	6a23      	ldr	r3, [r4, #32]
 80005a6:	b11b      	cbz	r3, 80005b0 <__sinit+0x14>
 80005a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005ac:	f7ff bff0 	b.w	8000590 <__sfp_lock_release>
 80005b0:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <__sinit+0x28>)
 80005b2:	6223      	str	r3, [r4, #32]
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <__sinit+0x2c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1f5      	bne.n	80005a8 <__sinit+0xc>
 80005bc:	f7ff ffc4 	bl	8000548 <global_stdio_init.part.0>
 80005c0:	e7f2      	b.n	80005a8 <__sinit+0xc>
 80005c2:	bf00      	nop
 80005c4:	08000509 	.word	0x08000509
 80005c8:	200001b4 	.word	0x200001b4

080005cc <_fwalk_sglue>:
 80005cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005d0:	4607      	mov	r7, r0
 80005d2:	4688      	mov	r8, r1
 80005d4:	4614      	mov	r4, r2
 80005d6:	2600      	movs	r6, #0
 80005d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005dc:	f1b9 0901 	subs.w	r9, r9, #1
 80005e0:	d505      	bpl.n	80005ee <_fwalk_sglue+0x22>
 80005e2:	6824      	ldr	r4, [r4, #0]
 80005e4:	2c00      	cmp	r4, #0
 80005e6:	d1f7      	bne.n	80005d8 <_fwalk_sglue+0xc>
 80005e8:	4630      	mov	r0, r6
 80005ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005ee:	89ab      	ldrh	r3, [r5, #12]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d907      	bls.n	8000604 <_fwalk_sglue+0x38>
 80005f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80005f8:	3301      	adds	r3, #1
 80005fa:	d003      	beq.n	8000604 <_fwalk_sglue+0x38>
 80005fc:	4629      	mov	r1, r5
 80005fe:	4638      	mov	r0, r7
 8000600:	47c0      	blx	r8
 8000602:	4306      	orrs	r6, r0
 8000604:	3568      	adds	r5, #104	@ 0x68
 8000606:	e7e9      	b.n	80005dc <_fwalk_sglue+0x10>

08000608 <_puts_r>:
 8000608:	6a03      	ldr	r3, [r0, #32]
 800060a:	b570      	push	{r4, r5, r6, lr}
 800060c:	4605      	mov	r5, r0
 800060e:	460e      	mov	r6, r1
 8000610:	6884      	ldr	r4, [r0, #8]
 8000612:	b90b      	cbnz	r3, 8000618 <_puts_r+0x10>
 8000614:	f7ff ffc2 	bl	800059c <__sinit>
 8000618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800061a:	07db      	lsls	r3, r3, #31
 800061c:	d405      	bmi.n	800062a <_puts_r+0x22>
 800061e:	89a3      	ldrh	r3, [r4, #12]
 8000620:	0598      	lsls	r0, r3, #22
 8000622:	d402      	bmi.n	800062a <_puts_r+0x22>
 8000624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000626:	f000 f99e 	bl	8000966 <__retarget_lock_acquire_recursive>
 800062a:	89a3      	ldrh	r3, [r4, #12]
 800062c:	0719      	lsls	r1, r3, #28
 800062e:	d502      	bpl.n	8000636 <_puts_r+0x2e>
 8000630:	6923      	ldr	r3, [r4, #16]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d135      	bne.n	80006a2 <_puts_r+0x9a>
 8000636:	4621      	mov	r1, r4
 8000638:	4628      	mov	r0, r5
 800063a:	f000 f8c5 	bl	80007c8 <__swsetup_r>
 800063e:	b380      	cbz	r0, 80006a2 <_puts_r+0x9a>
 8000640:	f04f 35ff 	mov.w	r5, #4294967295
 8000644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000646:	07da      	lsls	r2, r3, #31
 8000648:	d405      	bmi.n	8000656 <_puts_r+0x4e>
 800064a:	89a3      	ldrh	r3, [r4, #12]
 800064c:	059b      	lsls	r3, r3, #22
 800064e:	d402      	bmi.n	8000656 <_puts_r+0x4e>
 8000650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000652:	f000 f989 	bl	8000968 <__retarget_lock_release_recursive>
 8000656:	4628      	mov	r0, r5
 8000658:	bd70      	pop	{r4, r5, r6, pc}
 800065a:	2b00      	cmp	r3, #0
 800065c:	da04      	bge.n	8000668 <_puts_r+0x60>
 800065e:	69a2      	ldr	r2, [r4, #24]
 8000660:	429a      	cmp	r2, r3
 8000662:	dc17      	bgt.n	8000694 <_puts_r+0x8c>
 8000664:	290a      	cmp	r1, #10
 8000666:	d015      	beq.n	8000694 <_puts_r+0x8c>
 8000668:	6823      	ldr	r3, [r4, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	6022      	str	r2, [r4, #0]
 800066e:	7019      	strb	r1, [r3, #0]
 8000670:	68a3      	ldr	r3, [r4, #8]
 8000672:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000676:	3b01      	subs	r3, #1
 8000678:	60a3      	str	r3, [r4, #8]
 800067a:	2900      	cmp	r1, #0
 800067c:	d1ed      	bne.n	800065a <_puts_r+0x52>
 800067e:	2b00      	cmp	r3, #0
 8000680:	da11      	bge.n	80006a6 <_puts_r+0x9e>
 8000682:	4622      	mov	r2, r4
 8000684:	210a      	movs	r1, #10
 8000686:	4628      	mov	r0, r5
 8000688:	f000 f85f 	bl	800074a <__swbuf_r>
 800068c:	3001      	adds	r0, #1
 800068e:	d0d7      	beq.n	8000640 <_puts_r+0x38>
 8000690:	250a      	movs	r5, #10
 8000692:	e7d7      	b.n	8000644 <_puts_r+0x3c>
 8000694:	4622      	mov	r2, r4
 8000696:	4628      	mov	r0, r5
 8000698:	f000 f857 	bl	800074a <__swbuf_r>
 800069c:	3001      	adds	r0, #1
 800069e:	d1e7      	bne.n	8000670 <_puts_r+0x68>
 80006a0:	e7ce      	b.n	8000640 <_puts_r+0x38>
 80006a2:	3e01      	subs	r6, #1
 80006a4:	e7e4      	b.n	8000670 <_puts_r+0x68>
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	6022      	str	r2, [r4, #0]
 80006ac:	220a      	movs	r2, #10
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	e7ee      	b.n	8000690 <_puts_r+0x88>
	...

080006b4 <puts>:
 80006b4:	4b02      	ldr	r3, [pc, #8]	@ (80006c0 <puts+0xc>)
 80006b6:	4601      	mov	r1, r0
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	f7ff bfa5 	b.w	8000608 <_puts_r>
 80006be:	bf00      	nop
 80006c0:	2000000c 	.word	0x2000000c

080006c4 <__sread>:
 80006c4:	b510      	push	{r4, lr}
 80006c6:	460c      	mov	r4, r1
 80006c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006cc:	f000 f8fc 	bl	80008c8 <_read_r>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	bfab      	itete	ge
 80006d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80006d6:	89a3      	ldrhlt	r3, [r4, #12]
 80006d8:	181b      	addge	r3, r3, r0
 80006da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80006de:	bfac      	ite	ge
 80006e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80006e2:	81a3      	strhlt	r3, [r4, #12]
 80006e4:	bd10      	pop	{r4, pc}

080006e6 <__swrite>:
 80006e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ea:	461f      	mov	r7, r3
 80006ec:	898b      	ldrh	r3, [r1, #12]
 80006ee:	4605      	mov	r5, r0
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	460c      	mov	r4, r1
 80006f4:	4616      	mov	r6, r2
 80006f6:	d505      	bpl.n	8000704 <__swrite+0x1e>
 80006f8:	2302      	movs	r3, #2
 80006fa:	2200      	movs	r2, #0
 80006fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000700:	f000 f8d0 	bl	80008a4 <_lseek_r>
 8000704:	89a3      	ldrh	r3, [r4, #12]
 8000706:	4632      	mov	r2, r6
 8000708:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800070c:	81a3      	strh	r3, [r4, #12]
 800070e:	4628      	mov	r0, r5
 8000710:	463b      	mov	r3, r7
 8000712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800071a:	f000 b8e7 	b.w	80008ec <_write_r>

0800071e <__sseek>:
 800071e:	b510      	push	{r4, lr}
 8000720:	460c      	mov	r4, r1
 8000722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000726:	f000 f8bd 	bl	80008a4 <_lseek_r>
 800072a:	1c43      	adds	r3, r0, #1
 800072c:	89a3      	ldrh	r3, [r4, #12]
 800072e:	bf15      	itete	ne
 8000730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800073a:	81a3      	strheq	r3, [r4, #12]
 800073c:	bf18      	it	ne
 800073e:	81a3      	strhne	r3, [r4, #12]
 8000740:	bd10      	pop	{r4, pc}

08000742 <__sclose>:
 8000742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000746:	f000 b89d 	b.w	8000884 <_close_r>

0800074a <__swbuf_r>:
 800074a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074c:	460e      	mov	r6, r1
 800074e:	4614      	mov	r4, r2
 8000750:	4605      	mov	r5, r0
 8000752:	b118      	cbz	r0, 800075c <__swbuf_r+0x12>
 8000754:	6a03      	ldr	r3, [r0, #32]
 8000756:	b90b      	cbnz	r3, 800075c <__swbuf_r+0x12>
 8000758:	f7ff ff20 	bl	800059c <__sinit>
 800075c:	69a3      	ldr	r3, [r4, #24]
 800075e:	60a3      	str	r3, [r4, #8]
 8000760:	89a3      	ldrh	r3, [r4, #12]
 8000762:	071a      	lsls	r2, r3, #28
 8000764:	d501      	bpl.n	800076a <__swbuf_r+0x20>
 8000766:	6923      	ldr	r3, [r4, #16]
 8000768:	b943      	cbnz	r3, 800077c <__swbuf_r+0x32>
 800076a:	4621      	mov	r1, r4
 800076c:	4628      	mov	r0, r5
 800076e:	f000 f82b 	bl	80007c8 <__swsetup_r>
 8000772:	b118      	cbz	r0, 800077c <__swbuf_r+0x32>
 8000774:	f04f 37ff 	mov.w	r7, #4294967295
 8000778:	4638      	mov	r0, r7
 800077a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	6922      	ldr	r2, [r4, #16]
 8000780:	b2f6      	uxtb	r6, r6
 8000782:	1a98      	subs	r0, r3, r2
 8000784:	6963      	ldr	r3, [r4, #20]
 8000786:	4637      	mov	r7, r6
 8000788:	4283      	cmp	r3, r0
 800078a:	dc05      	bgt.n	8000798 <__swbuf_r+0x4e>
 800078c:	4621      	mov	r1, r4
 800078e:	4628      	mov	r0, r5
 8000790:	f000 fa62 	bl	8000c58 <_fflush_r>
 8000794:	2800      	cmp	r0, #0
 8000796:	d1ed      	bne.n	8000774 <__swbuf_r+0x2a>
 8000798:	68a3      	ldr	r3, [r4, #8]
 800079a:	3b01      	subs	r3, #1
 800079c:	60a3      	str	r3, [r4, #8]
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	6022      	str	r2, [r4, #0]
 80007a4:	701e      	strb	r6, [r3, #0]
 80007a6:	6962      	ldr	r2, [r4, #20]
 80007a8:	1c43      	adds	r3, r0, #1
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d004      	beq.n	80007b8 <__swbuf_r+0x6e>
 80007ae:	89a3      	ldrh	r3, [r4, #12]
 80007b0:	07db      	lsls	r3, r3, #31
 80007b2:	d5e1      	bpl.n	8000778 <__swbuf_r+0x2e>
 80007b4:	2e0a      	cmp	r6, #10
 80007b6:	d1df      	bne.n	8000778 <__swbuf_r+0x2e>
 80007b8:	4621      	mov	r1, r4
 80007ba:	4628      	mov	r0, r5
 80007bc:	f000 fa4c 	bl	8000c58 <_fflush_r>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d0d9      	beq.n	8000778 <__swbuf_r+0x2e>
 80007c4:	e7d6      	b.n	8000774 <__swbuf_r+0x2a>
	...

080007c8 <__swsetup_r>:
 80007c8:	b538      	push	{r3, r4, r5, lr}
 80007ca:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <__swsetup_r+0xa8>)
 80007cc:	4605      	mov	r5, r0
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	460c      	mov	r4, r1
 80007d2:	b118      	cbz	r0, 80007dc <__swsetup_r+0x14>
 80007d4:	6a03      	ldr	r3, [r0, #32]
 80007d6:	b90b      	cbnz	r3, 80007dc <__swsetup_r+0x14>
 80007d8:	f7ff fee0 	bl	800059c <__sinit>
 80007dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007e0:	0719      	lsls	r1, r3, #28
 80007e2:	d422      	bmi.n	800082a <__swsetup_r+0x62>
 80007e4:	06da      	lsls	r2, r3, #27
 80007e6:	d407      	bmi.n	80007f8 <__swsetup_r+0x30>
 80007e8:	2209      	movs	r2, #9
 80007ea:	602a      	str	r2, [r5, #0]
 80007ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	81a3      	strh	r3, [r4, #12]
 80007f6:	e033      	b.n	8000860 <__swsetup_r+0x98>
 80007f8:	0758      	lsls	r0, r3, #29
 80007fa:	d512      	bpl.n	8000822 <__swsetup_r+0x5a>
 80007fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80007fe:	b141      	cbz	r1, 8000812 <__swsetup_r+0x4a>
 8000800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000804:	4299      	cmp	r1, r3
 8000806:	d002      	beq.n	800080e <__swsetup_r+0x46>
 8000808:	4628      	mov	r0, r5
 800080a:	f000 f8af 	bl	800096c <_free_r>
 800080e:	2300      	movs	r3, #0
 8000810:	6363      	str	r3, [r4, #52]	@ 0x34
 8000812:	89a3      	ldrh	r3, [r4, #12]
 8000814:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000818:	81a3      	strh	r3, [r4, #12]
 800081a:	2300      	movs	r3, #0
 800081c:	6063      	str	r3, [r4, #4]
 800081e:	6923      	ldr	r3, [r4, #16]
 8000820:	6023      	str	r3, [r4, #0]
 8000822:	89a3      	ldrh	r3, [r4, #12]
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	81a3      	strh	r3, [r4, #12]
 800082a:	6923      	ldr	r3, [r4, #16]
 800082c:	b94b      	cbnz	r3, 8000842 <__swsetup_r+0x7a>
 800082e:	89a3      	ldrh	r3, [r4, #12]
 8000830:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000838:	d003      	beq.n	8000842 <__swsetup_r+0x7a>
 800083a:	4621      	mov	r1, r4
 800083c:	4628      	mov	r0, r5
 800083e:	f000 fa58 	bl	8000cf2 <__smakebuf_r>
 8000842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000846:	f013 0201 	ands.w	r2, r3, #1
 800084a:	d00a      	beq.n	8000862 <__swsetup_r+0x9a>
 800084c:	2200      	movs	r2, #0
 800084e:	60a2      	str	r2, [r4, #8]
 8000850:	6962      	ldr	r2, [r4, #20]
 8000852:	4252      	negs	r2, r2
 8000854:	61a2      	str	r2, [r4, #24]
 8000856:	6922      	ldr	r2, [r4, #16]
 8000858:	b942      	cbnz	r2, 800086c <__swsetup_r+0xa4>
 800085a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800085e:	d1c5      	bne.n	80007ec <__swsetup_r+0x24>
 8000860:	bd38      	pop	{r3, r4, r5, pc}
 8000862:	0799      	lsls	r1, r3, #30
 8000864:	bf58      	it	pl
 8000866:	6962      	ldrpl	r2, [r4, #20]
 8000868:	60a2      	str	r2, [r4, #8]
 800086a:	e7f4      	b.n	8000856 <__swsetup_r+0x8e>
 800086c:	2000      	movs	r0, #0
 800086e:	e7f7      	b.n	8000860 <__swsetup_r+0x98>
 8000870:	2000000c 	.word	0x2000000c

08000874 <memset>:
 8000874:	4603      	mov	r3, r0
 8000876:	4402      	add	r2, r0
 8000878:	4293      	cmp	r3, r2
 800087a:	d100      	bne.n	800087e <memset+0xa>
 800087c:	4770      	bx	lr
 800087e:	f803 1b01 	strb.w	r1, [r3], #1
 8000882:	e7f9      	b.n	8000878 <memset+0x4>

08000884 <_close_r>:
 8000884:	b538      	push	{r3, r4, r5, lr}
 8000886:	2300      	movs	r3, #0
 8000888:	4d05      	ldr	r5, [pc, #20]	@ (80008a0 <_close_r+0x1c>)
 800088a:	4604      	mov	r4, r0
 800088c:	4608      	mov	r0, r1
 800088e:	602b      	str	r3, [r5, #0]
 8000890:	f7ff fd67 	bl	8000362 <_close>
 8000894:	1c43      	adds	r3, r0, #1
 8000896:	d102      	bne.n	800089e <_close_r+0x1a>
 8000898:	682b      	ldr	r3, [r5, #0]
 800089a:	b103      	cbz	r3, 800089e <_close_r+0x1a>
 800089c:	6023      	str	r3, [r4, #0]
 800089e:	bd38      	pop	{r3, r4, r5, pc}
 80008a0:	200001b8 	.word	0x200001b8

080008a4 <_lseek_r>:
 80008a4:	b538      	push	{r3, r4, r5, lr}
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	2200      	movs	r2, #0
 80008ae:	4d05      	ldr	r5, [pc, #20]	@ (80008c4 <_lseek_r+0x20>)
 80008b0:	602a      	str	r2, [r5, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	f7ff fd79 	bl	80003aa <_lseek>
 80008b8:	1c43      	adds	r3, r0, #1
 80008ba:	d102      	bne.n	80008c2 <_lseek_r+0x1e>
 80008bc:	682b      	ldr	r3, [r5, #0]
 80008be:	b103      	cbz	r3, 80008c2 <_lseek_r+0x1e>
 80008c0:	6023      	str	r3, [r4, #0]
 80008c2:	bd38      	pop	{r3, r4, r5, pc}
 80008c4:	200001b8 	.word	0x200001b8

080008c8 <_read_r>:
 80008c8:	b538      	push	{r3, r4, r5, lr}
 80008ca:	4604      	mov	r4, r0
 80008cc:	4608      	mov	r0, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	2200      	movs	r2, #0
 80008d2:	4d05      	ldr	r5, [pc, #20]	@ (80008e8 <_read_r+0x20>)
 80008d4:	602a      	str	r2, [r5, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	f7ff fd0a 	bl	80002f0 <_read>
 80008dc:	1c43      	adds	r3, r0, #1
 80008de:	d102      	bne.n	80008e6 <_read_r+0x1e>
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	b103      	cbz	r3, 80008e6 <_read_r+0x1e>
 80008e4:	6023      	str	r3, [r4, #0]
 80008e6:	bd38      	pop	{r3, r4, r5, pc}
 80008e8:	200001b8 	.word	0x200001b8

080008ec <_write_r>:
 80008ec:	b538      	push	{r3, r4, r5, lr}
 80008ee:	4604      	mov	r4, r0
 80008f0:	4608      	mov	r0, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	2200      	movs	r2, #0
 80008f6:	4d05      	ldr	r5, [pc, #20]	@ (800090c <_write_r+0x20>)
 80008f8:	602a      	str	r2, [r5, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	f7ff fd15 	bl	800032a <_write>
 8000900:	1c43      	adds	r3, r0, #1
 8000902:	d102      	bne.n	800090a <_write_r+0x1e>
 8000904:	682b      	ldr	r3, [r5, #0]
 8000906:	b103      	cbz	r3, 800090a <_write_r+0x1e>
 8000908:	6023      	str	r3, [r4, #0]
 800090a:	bd38      	pop	{r3, r4, r5, pc}
 800090c:	200001b8 	.word	0x200001b8

08000910 <__errno>:
 8000910:	4b01      	ldr	r3, [pc, #4]	@ (8000918 <__errno+0x8>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	2000000c 	.word	0x2000000c

0800091c <__libc_init_array>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	2600      	movs	r6, #0
 8000920:	4d0c      	ldr	r5, [pc, #48]	@ (8000954 <__libc_init_array+0x38>)
 8000922:	4c0d      	ldr	r4, [pc, #52]	@ (8000958 <__libc_init_array+0x3c>)
 8000924:	1b64      	subs	r4, r4, r5
 8000926:	10a4      	asrs	r4, r4, #2
 8000928:	42a6      	cmp	r6, r4
 800092a:	d109      	bne.n	8000940 <__libc_init_array+0x24>
 800092c:	f000 fa50 	bl	8000dd0 <_init>
 8000930:	2600      	movs	r6, #0
 8000932:	4d0a      	ldr	r5, [pc, #40]	@ (800095c <__libc_init_array+0x40>)
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <__libc_init_array+0x44>)
 8000936:	1b64      	subs	r4, r4, r5
 8000938:	10a4      	asrs	r4, r4, #2
 800093a:	42a6      	cmp	r6, r4
 800093c:	d105      	bne.n	800094a <__libc_init_array+0x2e>
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f855 3b04 	ldr.w	r3, [r5], #4
 8000944:	4798      	blx	r3
 8000946:	3601      	adds	r6, #1
 8000948:	e7ee      	b.n	8000928 <__libc_init_array+0xc>
 800094a:	f855 3b04 	ldr.w	r3, [r5], #4
 800094e:	4798      	blx	r3
 8000950:	3601      	adds	r6, #1
 8000952:	e7f2      	b.n	800093a <__libc_init_array+0x1e>
 8000954:	08000e00 	.word	0x08000e00
 8000958:	08000e00 	.word	0x08000e00
 800095c:	08000e00 	.word	0x08000e00
 8000960:	08000e04 	.word	0x08000e04

08000964 <__retarget_lock_init_recursive>:
 8000964:	4770      	bx	lr

08000966 <__retarget_lock_acquire_recursive>:
 8000966:	4770      	bx	lr

08000968 <__retarget_lock_release_recursive>:
 8000968:	4770      	bx	lr
	...

0800096c <_free_r>:
 800096c:	b538      	push	{r3, r4, r5, lr}
 800096e:	4605      	mov	r5, r0
 8000970:	2900      	cmp	r1, #0
 8000972:	d040      	beq.n	80009f6 <_free_r+0x8a>
 8000974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000978:	1f0c      	subs	r4, r1, #4
 800097a:	2b00      	cmp	r3, #0
 800097c:	bfb8      	it	lt
 800097e:	18e4      	addlt	r4, r4, r3
 8000980:	f000 f8de 	bl	8000b40 <__malloc_lock>
 8000984:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <_free_r+0x8c>)
 8000986:	6813      	ldr	r3, [r2, #0]
 8000988:	b933      	cbnz	r3, 8000998 <_free_r+0x2c>
 800098a:	6063      	str	r3, [r4, #4]
 800098c:	6014      	str	r4, [r2, #0]
 800098e:	4628      	mov	r0, r5
 8000990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000994:	f000 b8da 	b.w	8000b4c <__malloc_unlock>
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <_free_r+0x42>
 800099c:	6820      	ldr	r0, [r4, #0]
 800099e:	1821      	adds	r1, r4, r0
 80009a0:	428b      	cmp	r3, r1
 80009a2:	bf01      	itttt	eq
 80009a4:	6819      	ldreq	r1, [r3, #0]
 80009a6:	685b      	ldreq	r3, [r3, #4]
 80009a8:	1809      	addeq	r1, r1, r0
 80009aa:	6021      	streq	r1, [r4, #0]
 80009ac:	e7ed      	b.n	800098a <_free_r+0x1e>
 80009ae:	461a      	mov	r2, r3
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	b10b      	cbz	r3, 80009b8 <_free_r+0x4c>
 80009b4:	42a3      	cmp	r3, r4
 80009b6:	d9fa      	bls.n	80009ae <_free_r+0x42>
 80009b8:	6811      	ldr	r1, [r2, #0]
 80009ba:	1850      	adds	r0, r2, r1
 80009bc:	42a0      	cmp	r0, r4
 80009be:	d10b      	bne.n	80009d8 <_free_r+0x6c>
 80009c0:	6820      	ldr	r0, [r4, #0]
 80009c2:	4401      	add	r1, r0
 80009c4:	1850      	adds	r0, r2, r1
 80009c6:	4283      	cmp	r3, r0
 80009c8:	6011      	str	r1, [r2, #0]
 80009ca:	d1e0      	bne.n	800098e <_free_r+0x22>
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	4408      	add	r0, r1
 80009d2:	6010      	str	r0, [r2, #0]
 80009d4:	6053      	str	r3, [r2, #4]
 80009d6:	e7da      	b.n	800098e <_free_r+0x22>
 80009d8:	d902      	bls.n	80009e0 <_free_r+0x74>
 80009da:	230c      	movs	r3, #12
 80009dc:	602b      	str	r3, [r5, #0]
 80009de:	e7d6      	b.n	800098e <_free_r+0x22>
 80009e0:	6820      	ldr	r0, [r4, #0]
 80009e2:	1821      	adds	r1, r4, r0
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf01      	itttt	eq
 80009e8:	6819      	ldreq	r1, [r3, #0]
 80009ea:	685b      	ldreq	r3, [r3, #4]
 80009ec:	1809      	addeq	r1, r1, r0
 80009ee:	6021      	streq	r1, [r4, #0]
 80009f0:	6063      	str	r3, [r4, #4]
 80009f2:	6054      	str	r4, [r2, #4]
 80009f4:	e7cb      	b.n	800098e <_free_r+0x22>
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
 80009f8:	200001c4 	.word	0x200001c4

080009fc <sbrk_aligned>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4e0f      	ldr	r6, [pc, #60]	@ (8000a3c <sbrk_aligned+0x40>)
 8000a00:	460c      	mov	r4, r1
 8000a02:	6831      	ldr	r1, [r6, #0]
 8000a04:	4605      	mov	r5, r0
 8000a06:	b911      	cbnz	r1, 8000a0e <sbrk_aligned+0x12>
 8000a08:	f000 f9d2 	bl	8000db0 <_sbrk_r>
 8000a0c:	6030      	str	r0, [r6, #0]
 8000a0e:	4621      	mov	r1, r4
 8000a10:	4628      	mov	r0, r5
 8000a12:	f000 f9cd 	bl	8000db0 <_sbrk_r>
 8000a16:	1c43      	adds	r3, r0, #1
 8000a18:	d103      	bne.n	8000a22 <sbrk_aligned+0x26>
 8000a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8000a1e:	4620      	mov	r0, r4
 8000a20:	bd70      	pop	{r4, r5, r6, pc}
 8000a22:	1cc4      	adds	r4, r0, #3
 8000a24:	f024 0403 	bic.w	r4, r4, #3
 8000a28:	42a0      	cmp	r0, r4
 8000a2a:	d0f8      	beq.n	8000a1e <sbrk_aligned+0x22>
 8000a2c:	1a21      	subs	r1, r4, r0
 8000a2e:	4628      	mov	r0, r5
 8000a30:	f000 f9be 	bl	8000db0 <_sbrk_r>
 8000a34:	3001      	adds	r0, #1
 8000a36:	d1f2      	bne.n	8000a1e <sbrk_aligned+0x22>
 8000a38:	e7ef      	b.n	8000a1a <sbrk_aligned+0x1e>
 8000a3a:	bf00      	nop
 8000a3c:	200001c0 	.word	0x200001c0

08000a40 <_malloc_r>:
 8000a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a44:	1ccd      	adds	r5, r1, #3
 8000a46:	f025 0503 	bic.w	r5, r5, #3
 8000a4a:	3508      	adds	r5, #8
 8000a4c:	2d0c      	cmp	r5, #12
 8000a4e:	bf38      	it	cc
 8000a50:	250c      	movcc	r5, #12
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	4606      	mov	r6, r0
 8000a56:	db01      	blt.n	8000a5c <_malloc_r+0x1c>
 8000a58:	42a9      	cmp	r1, r5
 8000a5a:	d904      	bls.n	8000a66 <_malloc_r+0x26>
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	6033      	str	r3, [r6, #0]
 8000a60:	2000      	movs	r0, #0
 8000a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b3c <_malloc_r+0xfc>
 8000a6a:	f000 f869 	bl	8000b40 <__malloc_lock>
 8000a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8000a72:	461c      	mov	r4, r3
 8000a74:	bb44      	cbnz	r4, 8000ac8 <_malloc_r+0x88>
 8000a76:	4629      	mov	r1, r5
 8000a78:	4630      	mov	r0, r6
 8000a7a:	f7ff ffbf 	bl	80009fc <sbrk_aligned>
 8000a7e:	1c43      	adds	r3, r0, #1
 8000a80:	4604      	mov	r4, r0
 8000a82:	d158      	bne.n	8000b36 <_malloc_r+0xf6>
 8000a84:	f8d8 4000 	ldr.w	r4, [r8]
 8000a88:	4627      	mov	r7, r4
 8000a8a:	2f00      	cmp	r7, #0
 8000a8c:	d143      	bne.n	8000b16 <_malloc_r+0xd6>
 8000a8e:	2c00      	cmp	r4, #0
 8000a90:	d04b      	beq.n	8000b2a <_malloc_r+0xea>
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	4639      	mov	r1, r7
 8000a96:	4630      	mov	r0, r6
 8000a98:	eb04 0903 	add.w	r9, r4, r3
 8000a9c:	f000 f988 	bl	8000db0 <_sbrk_r>
 8000aa0:	4581      	cmp	r9, r0
 8000aa2:	d142      	bne.n	8000b2a <_malloc_r+0xea>
 8000aa4:	6821      	ldr	r1, [r4, #0]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	1a6d      	subs	r5, r5, r1
 8000aaa:	4629      	mov	r1, r5
 8000aac:	f7ff ffa6 	bl	80009fc <sbrk_aligned>
 8000ab0:	3001      	adds	r0, #1
 8000ab2:	d03a      	beq.n	8000b2a <_malloc_r+0xea>
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	442b      	add	r3, r5
 8000ab8:	6023      	str	r3, [r4, #0]
 8000aba:	f8d8 3000 	ldr.w	r3, [r8]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	bb62      	cbnz	r2, 8000b1c <_malloc_r+0xdc>
 8000ac2:	f8c8 7000 	str.w	r7, [r8]
 8000ac6:	e00f      	b.n	8000ae8 <_malloc_r+0xa8>
 8000ac8:	6822      	ldr	r2, [r4, #0]
 8000aca:	1b52      	subs	r2, r2, r5
 8000acc:	d420      	bmi.n	8000b10 <_malloc_r+0xd0>
 8000ace:	2a0b      	cmp	r2, #11
 8000ad0:	d917      	bls.n	8000b02 <_malloc_r+0xc2>
 8000ad2:	1961      	adds	r1, r4, r5
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	6025      	str	r5, [r4, #0]
 8000ad8:	bf18      	it	ne
 8000ada:	6059      	strne	r1, [r3, #4]
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	bf08      	it	eq
 8000ae0:	f8c8 1000 	streq.w	r1, [r8]
 8000ae4:	5162      	str	r2, [r4, r5]
 8000ae6:	604b      	str	r3, [r1, #4]
 8000ae8:	4630      	mov	r0, r6
 8000aea:	f000 f82f 	bl	8000b4c <__malloc_unlock>
 8000aee:	f104 000b 	add.w	r0, r4, #11
 8000af2:	1d23      	adds	r3, r4, #4
 8000af4:	f020 0007 	bic.w	r0, r0, #7
 8000af8:	1ac2      	subs	r2, r0, r3
 8000afa:	bf1c      	itt	ne
 8000afc:	1a1b      	subne	r3, r3, r0
 8000afe:	50a3      	strne	r3, [r4, r2]
 8000b00:	e7af      	b.n	8000a62 <_malloc_r+0x22>
 8000b02:	6862      	ldr	r2, [r4, #4]
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	bf0c      	ite	eq
 8000b08:	f8c8 2000 	streq.w	r2, [r8]
 8000b0c:	605a      	strne	r2, [r3, #4]
 8000b0e:	e7eb      	b.n	8000ae8 <_malloc_r+0xa8>
 8000b10:	4623      	mov	r3, r4
 8000b12:	6864      	ldr	r4, [r4, #4]
 8000b14:	e7ae      	b.n	8000a74 <_malloc_r+0x34>
 8000b16:	463c      	mov	r4, r7
 8000b18:	687f      	ldr	r7, [r7, #4]
 8000b1a:	e7b6      	b.n	8000a8a <_malloc_r+0x4a>
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	42a3      	cmp	r3, r4
 8000b22:	d1fb      	bne.n	8000b1c <_malloc_r+0xdc>
 8000b24:	2300      	movs	r3, #0
 8000b26:	6053      	str	r3, [r2, #4]
 8000b28:	e7de      	b.n	8000ae8 <_malloc_r+0xa8>
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	4630      	mov	r0, r6
 8000b2e:	6033      	str	r3, [r6, #0]
 8000b30:	f000 f80c 	bl	8000b4c <__malloc_unlock>
 8000b34:	e794      	b.n	8000a60 <_malloc_r+0x20>
 8000b36:	6005      	str	r5, [r0, #0]
 8000b38:	e7d6      	b.n	8000ae8 <_malloc_r+0xa8>
 8000b3a:	bf00      	nop
 8000b3c:	200001c4 	.word	0x200001c4

08000b40 <__malloc_lock>:
 8000b40:	4801      	ldr	r0, [pc, #4]	@ (8000b48 <__malloc_lock+0x8>)
 8000b42:	f7ff bf10 	b.w	8000966 <__retarget_lock_acquire_recursive>
 8000b46:	bf00      	nop
 8000b48:	200001bc 	.word	0x200001bc

08000b4c <__malloc_unlock>:
 8000b4c:	4801      	ldr	r0, [pc, #4]	@ (8000b54 <__malloc_unlock+0x8>)
 8000b4e:	f7ff bf0b 	b.w	8000968 <__retarget_lock_release_recursive>
 8000b52:	bf00      	nop
 8000b54:	200001bc 	.word	0x200001bc

08000b58 <__sflush_r>:
 8000b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5e:	0716      	lsls	r6, r2, #28
 8000b60:	4605      	mov	r5, r0
 8000b62:	460c      	mov	r4, r1
 8000b64:	d454      	bmi.n	8000c10 <__sflush_r+0xb8>
 8000b66:	684b      	ldr	r3, [r1, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dc02      	bgt.n	8000b72 <__sflush_r+0x1a>
 8000b6c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	dd48      	ble.n	8000c04 <__sflush_r+0xac>
 8000b72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d045      	beq.n	8000c04 <__sflush_r+0xac>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000b7e:	682f      	ldr	r7, [r5, #0]
 8000b80:	6a21      	ldr	r1, [r4, #32]
 8000b82:	602b      	str	r3, [r5, #0]
 8000b84:	d030      	beq.n	8000be8 <__sflush_r+0x90>
 8000b86:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000b88:	89a3      	ldrh	r3, [r4, #12]
 8000b8a:	0759      	lsls	r1, r3, #29
 8000b8c:	d505      	bpl.n	8000b9a <__sflush_r+0x42>
 8000b8e:	6863      	ldr	r3, [r4, #4]
 8000b90:	1ad2      	subs	r2, r2, r3
 8000b92:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000b94:	b10b      	cbz	r3, 8000b9a <__sflush_r+0x42>
 8000b96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b98:	1ad2      	subs	r2, r2, r3
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000ba0:	6a21      	ldr	r1, [r4, #32]
 8000ba2:	47b0      	blx	r6
 8000ba4:	1c43      	adds	r3, r0, #1
 8000ba6:	89a3      	ldrh	r3, [r4, #12]
 8000ba8:	d106      	bne.n	8000bb8 <__sflush_r+0x60>
 8000baa:	6829      	ldr	r1, [r5, #0]
 8000bac:	291d      	cmp	r1, #29
 8000bae:	d82b      	bhi.n	8000c08 <__sflush_r+0xb0>
 8000bb0:	4a28      	ldr	r2, [pc, #160]	@ (8000c54 <__sflush_r+0xfc>)
 8000bb2:	410a      	asrs	r2, r1
 8000bb4:	07d6      	lsls	r6, r2, #31
 8000bb6:	d427      	bmi.n	8000c08 <__sflush_r+0xb0>
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6062      	str	r2, [r4, #4]
 8000bbc:	6922      	ldr	r2, [r4, #16]
 8000bbe:	04d9      	lsls	r1, r3, #19
 8000bc0:	6022      	str	r2, [r4, #0]
 8000bc2:	d504      	bpl.n	8000bce <__sflush_r+0x76>
 8000bc4:	1c42      	adds	r2, r0, #1
 8000bc6:	d101      	bne.n	8000bcc <__sflush_r+0x74>
 8000bc8:	682b      	ldr	r3, [r5, #0]
 8000bca:	b903      	cbnz	r3, 8000bce <__sflush_r+0x76>
 8000bcc:	6560      	str	r0, [r4, #84]	@ 0x54
 8000bce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000bd0:	602f      	str	r7, [r5, #0]
 8000bd2:	b1b9      	cbz	r1, 8000c04 <__sflush_r+0xac>
 8000bd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	d002      	beq.n	8000be2 <__sflush_r+0x8a>
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f7ff fec5 	bl	800096c <_free_r>
 8000be2:	2300      	movs	r3, #0
 8000be4:	6363      	str	r3, [r4, #52]	@ 0x34
 8000be6:	e00d      	b.n	8000c04 <__sflush_r+0xac>
 8000be8:	2301      	movs	r3, #1
 8000bea:	4628      	mov	r0, r5
 8000bec:	47b0      	blx	r6
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1c50      	adds	r0, r2, #1
 8000bf2:	d1c9      	bne.n	8000b88 <__sflush_r+0x30>
 8000bf4:	682b      	ldr	r3, [r5, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0c6      	beq.n	8000b88 <__sflush_r+0x30>
 8000bfa:	2b1d      	cmp	r3, #29
 8000bfc:	d001      	beq.n	8000c02 <__sflush_r+0xaa>
 8000bfe:	2b16      	cmp	r3, #22
 8000c00:	d11d      	bne.n	8000c3e <__sflush_r+0xe6>
 8000c02:	602f      	str	r7, [r5, #0]
 8000c04:	2000      	movs	r0, #0
 8000c06:	e021      	b.n	8000c4c <__sflush_r+0xf4>
 8000c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	e01a      	b.n	8000c46 <__sflush_r+0xee>
 8000c10:	690f      	ldr	r7, [r1, #16]
 8000c12:	2f00      	cmp	r7, #0
 8000c14:	d0f6      	beq.n	8000c04 <__sflush_r+0xac>
 8000c16:	0793      	lsls	r3, r2, #30
 8000c18:	bf18      	it	ne
 8000c1a:	2300      	movne	r3, #0
 8000c1c:	680e      	ldr	r6, [r1, #0]
 8000c1e:	bf08      	it	eq
 8000c20:	694b      	ldreq	r3, [r1, #20]
 8000c22:	1bf6      	subs	r6, r6, r7
 8000c24:	600f      	str	r7, [r1, #0]
 8000c26:	608b      	str	r3, [r1, #8]
 8000c28:	2e00      	cmp	r6, #0
 8000c2a:	ddeb      	ble.n	8000c04 <__sflush_r+0xac>
 8000c2c:	4633      	mov	r3, r6
 8000c2e:	463a      	mov	r2, r7
 8000c30:	4628      	mov	r0, r5
 8000c32:	6a21      	ldr	r1, [r4, #32]
 8000c34:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000c38:	47e0      	blx	ip
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	dc07      	bgt.n	8000c4e <__sflush_r+0xf6>
 8000c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c46:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4a:	81a3      	strh	r3, [r4, #12]
 8000c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c4e:	4407      	add	r7, r0
 8000c50:	1a36      	subs	r6, r6, r0
 8000c52:	e7e9      	b.n	8000c28 <__sflush_r+0xd0>
 8000c54:	dfbffffe 	.word	0xdfbffffe

08000c58 <_fflush_r>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	690b      	ldr	r3, [r1, #16]
 8000c5c:	4605      	mov	r5, r0
 8000c5e:	460c      	mov	r4, r1
 8000c60:	b913      	cbnz	r3, 8000c68 <_fflush_r+0x10>
 8000c62:	2500      	movs	r5, #0
 8000c64:	4628      	mov	r0, r5
 8000c66:	bd38      	pop	{r3, r4, r5, pc}
 8000c68:	b118      	cbz	r0, 8000c72 <_fflush_r+0x1a>
 8000c6a:	6a03      	ldr	r3, [r0, #32]
 8000c6c:	b90b      	cbnz	r3, 8000c72 <_fflush_r+0x1a>
 8000c6e:	f7ff fc95 	bl	800059c <__sinit>
 8000c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f3      	beq.n	8000c62 <_fflush_r+0xa>
 8000c7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000c7c:	07d0      	lsls	r0, r2, #31
 8000c7e:	d404      	bmi.n	8000c8a <_fflush_r+0x32>
 8000c80:	0599      	lsls	r1, r3, #22
 8000c82:	d402      	bmi.n	8000c8a <_fflush_r+0x32>
 8000c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c86:	f7ff fe6e 	bl	8000966 <__retarget_lock_acquire_recursive>
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	f7ff ff63 	bl	8000b58 <__sflush_r>
 8000c92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c94:	4605      	mov	r5, r0
 8000c96:	07da      	lsls	r2, r3, #31
 8000c98:	d4e4      	bmi.n	8000c64 <_fflush_r+0xc>
 8000c9a:	89a3      	ldrh	r3, [r4, #12]
 8000c9c:	059b      	lsls	r3, r3, #22
 8000c9e:	d4e1      	bmi.n	8000c64 <_fflush_r+0xc>
 8000ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ca2:	f7ff fe61 	bl	8000968 <__retarget_lock_release_recursive>
 8000ca6:	e7dd      	b.n	8000c64 <_fflush_r+0xc>

08000ca8 <__swhatbuf_r>:
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	460c      	mov	r4, r1
 8000cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cb0:	4615      	mov	r5, r2
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	461e      	mov	r6, r3
 8000cb6:	b096      	sub	sp, #88	@ 0x58
 8000cb8:	da0c      	bge.n	8000cd4 <__swhatbuf_r+0x2c>
 8000cba:	89a3      	ldrh	r3, [r4, #12]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000cc2:	bf14      	ite	ne
 8000cc4:	2340      	movne	r3, #64	@ 0x40
 8000cc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000cca:	2000      	movs	r0, #0
 8000ccc:	6031      	str	r1, [r6, #0]
 8000cce:	602b      	str	r3, [r5, #0]
 8000cd0:	b016      	add	sp, #88	@ 0x58
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	466a      	mov	r2, sp
 8000cd6:	f000 f849 	bl	8000d6c <_fstat_r>
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	dbed      	blt.n	8000cba <__swhatbuf_r+0x12>
 8000cde:	9901      	ldr	r1, [sp, #4]
 8000ce0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000ce4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000ce8:	4259      	negs	r1, r3
 8000cea:	4159      	adcs	r1, r3
 8000cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf0:	e7eb      	b.n	8000cca <__swhatbuf_r+0x22>

08000cf2 <__smakebuf_r>:
 8000cf2:	898b      	ldrh	r3, [r1, #12]
 8000cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cf6:	079d      	lsls	r5, r3, #30
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	d507      	bpl.n	8000d0e <__smakebuf_r+0x1c>
 8000cfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d02:	6023      	str	r3, [r4, #0]
 8000d04:	6123      	str	r3, [r4, #16]
 8000d06:	2301      	movs	r3, #1
 8000d08:	6163      	str	r3, [r4, #20]
 8000d0a:	b003      	add	sp, #12
 8000d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d0e:	466a      	mov	r2, sp
 8000d10:	ab01      	add	r3, sp, #4
 8000d12:	f7ff ffc9 	bl	8000ca8 <__swhatbuf_r>
 8000d16:	9f00      	ldr	r7, [sp, #0]
 8000d18:	4605      	mov	r5, r0
 8000d1a:	4639      	mov	r1, r7
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f7ff fe8f 	bl	8000a40 <_malloc_r>
 8000d22:	b948      	cbnz	r0, 8000d38 <__smakebuf_r+0x46>
 8000d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d28:	059a      	lsls	r2, r3, #22
 8000d2a:	d4ee      	bmi.n	8000d0a <__smakebuf_r+0x18>
 8000d2c:	f023 0303 	bic.w	r3, r3, #3
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	81a3      	strh	r3, [r4, #12]
 8000d36:	e7e2      	b.n	8000cfe <__smakebuf_r+0xc>
 8000d38:	89a3      	ldrh	r3, [r4, #12]
 8000d3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d42:	81a3      	strh	r3, [r4, #12]
 8000d44:	9b01      	ldr	r3, [sp, #4]
 8000d46:	6020      	str	r0, [r4, #0]
 8000d48:	b15b      	cbz	r3, 8000d62 <__smakebuf_r+0x70>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d50:	f000 f81e 	bl	8000d90 <_isatty_r>
 8000d54:	b128      	cbz	r0, 8000d62 <__smakebuf_r+0x70>
 8000d56:	89a3      	ldrh	r3, [r4, #12]
 8000d58:	f023 0303 	bic.w	r3, r3, #3
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	81a3      	strh	r3, [r4, #12]
 8000d62:	89a3      	ldrh	r3, [r4, #12]
 8000d64:	431d      	orrs	r5, r3
 8000d66:	81a5      	strh	r5, [r4, #12]
 8000d68:	e7cf      	b.n	8000d0a <__smakebuf_r+0x18>
	...

08000d6c <_fstat_r>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2300      	movs	r3, #0
 8000d70:	4d06      	ldr	r5, [pc, #24]	@ (8000d8c <_fstat_r+0x20>)
 8000d72:	4604      	mov	r4, r0
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	602b      	str	r3, [r5, #0]
 8000d7a:	f7ff fafd 	bl	8000378 <_fstat>
 8000d7e:	1c43      	adds	r3, r0, #1
 8000d80:	d102      	bne.n	8000d88 <_fstat_r+0x1c>
 8000d82:	682b      	ldr	r3, [r5, #0]
 8000d84:	b103      	cbz	r3, 8000d88 <_fstat_r+0x1c>
 8000d86:	6023      	str	r3, [r4, #0]
 8000d88:	bd38      	pop	{r3, r4, r5, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200001b8 	.word	0x200001b8

08000d90 <_isatty_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	2300      	movs	r3, #0
 8000d94:	4d05      	ldr	r5, [pc, #20]	@ (8000dac <_isatty_r+0x1c>)
 8000d96:	4604      	mov	r4, r0
 8000d98:	4608      	mov	r0, r1
 8000d9a:	602b      	str	r3, [r5, #0]
 8000d9c:	f7ff fafb 	bl	8000396 <_isatty>
 8000da0:	1c43      	adds	r3, r0, #1
 8000da2:	d102      	bne.n	8000daa <_isatty_r+0x1a>
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	b103      	cbz	r3, 8000daa <_isatty_r+0x1a>
 8000da8:	6023      	str	r3, [r4, #0]
 8000daa:	bd38      	pop	{r3, r4, r5, pc}
 8000dac:	200001b8 	.word	0x200001b8

08000db0 <_sbrk_r>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	2300      	movs	r3, #0
 8000db4:	4d05      	ldr	r5, [pc, #20]	@ (8000dcc <_sbrk_r+0x1c>)
 8000db6:	4604      	mov	r4, r0
 8000db8:	4608      	mov	r0, r1
 8000dba:	602b      	str	r3, [r5, #0]
 8000dbc:	f7ff fb02 	bl	80003c4 <_sbrk>
 8000dc0:	1c43      	adds	r3, r0, #1
 8000dc2:	d102      	bne.n	8000dca <_sbrk_r+0x1a>
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	b103      	cbz	r3, 8000dca <_sbrk_r+0x1a>
 8000dc8:	6023      	str	r3, [r4, #0]
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	200001b8 	.word	0x200001b8

08000dd0 <_init>:
 8000dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd2:	bf00      	nop
 8000dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dd6:	bc08      	pop	{r3}
 8000dd8:	469e      	mov	lr, r3
 8000dda:	4770      	bx	lr

08000ddc <_fini>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr

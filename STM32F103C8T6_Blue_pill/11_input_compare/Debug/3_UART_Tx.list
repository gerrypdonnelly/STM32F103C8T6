
3_UART_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ac  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002dc  080002e4  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002dc  080002dc  000012e4  2**0
                  CONTENTS
  4 .ARM          00000000  080002dc  080002dc  000012e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002dc  080002e4  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002dc  080002dc  000012dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002e0  080002e0  000012e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002e4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002e4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000012d  00000000  00000000  0000130d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000e2  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000038  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000feec  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000057e  00000000  00000000  0001149c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053fbb  00000000  00000000  00011a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000659d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a4  00000000  00000000  00065a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00065abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002c4 	.word	0x080002c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002c4 	.word	0x080002c4

08000170 <uart_init>:
// Baud rate calculation: Assuming 72 MHz system clock and desired 9600 baud rate
#define BAUD_RATE 9600
#define SYSTEM_CLOCK 72000000
#define USARTDIV (SYSTEM_CLOCK / (16 * BAUD_RATE))

void uart_init(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    // 1. Enable GPIOA and USART1 clocks
    RCC_APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN;
 8000174:	4b11      	ldr	r3, [pc, #68]	@ (80001bc <uart_init+0x4c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a10      	ldr	r2, [pc, #64]	@ (80001bc <uart_init+0x4c>)
 800017a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6013      	str	r3, [r2, #0]

    // 2. Configure PA9 (USART1_TX) as Alternate function push-pull
    // PA9 is configured in GPIOA_CRH[7:4] (MODE9[1:0], CNF9[1:0])
    GPIOA_CRH &= ~(0xF << 4);       // Clear the bits for PA9
 8000184:	4b0e      	ldr	r3, [pc, #56]	@ (80001c0 <uart_init+0x50>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a0d      	ldr	r2, [pc, #52]	@ (80001c0 <uart_init+0x50>)
 800018a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800018e:	6013      	str	r3, [r2, #0]
    GPIOA_CRH |= (0xB << 4);        // MODE9[1:0] = 0b11 (Output mode, 50 MHz); CNF9[1:0] = 0b10 (AF push-pull)
 8000190:	4b0b      	ldr	r3, [pc, #44]	@ (80001c0 <uart_init+0x50>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a0a      	ldr	r2, [pc, #40]	@ (80001c0 <uart_init+0x50>)
 8000196:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800019a:	6013      	str	r3, [r2, #0]

    // 3. Configure USART1 baud rate
    USART1_BRR = USARTDIV;
 800019c:	4b09      	ldr	r3, [pc, #36]	@ (80001c4 <uart_init+0x54>)
 800019e:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 80001a2:	601a      	str	r2, [r3, #0]

    // 4. Enable USART1 transmitter and enable USART
    USART1_CR1 |= USART_CR1_TE | USART_CR1_UE;
 80001a4:	4b08      	ldr	r3, [pc, #32]	@ (80001c8 <uart_init+0x58>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a07      	ldr	r2, [pc, #28]	@ (80001c8 <uart_init+0x58>)
 80001aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6013      	str	r3, [r2, #0]
}
 80001b4:	bf00      	nop
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40021018 	.word	0x40021018
 80001c0:	40010804 	.word	0x40010804
 80001c4:	40013808 	.word	0x40013808
 80001c8:	4001380c 	.word	0x4001380c

080001cc <uart_transmit>:

void uart_transmit(char c) {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
    // Wait until transmit data register is empty
    while (!(USART1_SR & USART_SR_TXE)) {
 80001d6:	bf00      	nop
 80001d8:	4b06      	ldr	r3, [pc, #24]	@ (80001f4 <uart_transmit+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d0f9      	beq.n	80001d8 <uart_transmit+0xc>
        // Wait for TXE to be set (indicates DR is empty)
    }

    // Write the character to the data register
    USART1_DR = c;
 80001e4:	4a04      	ldr	r2, [pc, #16]	@ (80001f8 <uart_transmit+0x2c>)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	6013      	str	r3, [r2, #0]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	40013800 	.word	0x40013800
 80001f8:	40013804 	.word	0x40013804

080001fc <main>:

int main(void) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
    uart_init();       // Initialize USART1
 8000202:	f7ff ffb5 	bl	8000170 <uart_init>

    while (1) {
        uart_transmit('A');  // Transmit character 'A'
 8000206:	2041      	movs	r0, #65	@ 0x41
 8000208:	f7ff ffe0 	bl	80001cc <uart_transmit>
        for (volatile int i = 0; i < 1000000; i++);  // Simple delay
 800020c:	2300      	movs	r3, #0
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	e002      	b.n	8000218 <main+0x1c>
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	3301      	adds	r3, #1
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4a02      	ldr	r2, [pc, #8]	@ (8000224 <main+0x28>)
 800021c:	4293      	cmp	r3, r2
 800021e:	ddf8      	ble.n	8000212 <main+0x16>
        uart_transmit('A');  // Transmit character 'A'
 8000220:	e7f1      	b.n	8000206 <main+0xa>
 8000222:	bf00      	nop
 8000224:	000f423f 	.word	0x000f423f

08000228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000228:	480d      	ldr	r0, [pc, #52]	@ (8000260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800022c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000230:	480c      	ldr	r0, [pc, #48]	@ (8000264 <LoopForever+0x6>)
  ldr r1, =_edata
 8000232:	490d      	ldr	r1, [pc, #52]	@ (8000268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000234:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <LoopForever+0xe>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000238:	e002      	b.n	8000240 <LoopCopyDataInit>

0800023a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800023c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023e:	3304      	adds	r3, #4

08000240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000244:	d3f9      	bcc.n	800023a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000246:	4a0a      	ldr	r2, [pc, #40]	@ (8000270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000248:	4c0a      	ldr	r4, [pc, #40]	@ (8000274 <LoopForever+0x16>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800024c:	e001      	b.n	8000252 <LoopFillZerobss>

0800024e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000250:	3204      	adds	r2, #4

08000252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000254:	d3fb      	bcc.n	800024e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000256:	f000 f811 	bl	800027c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025a:	f7ff ffcf 	bl	80001fc <main>

0800025e <LoopForever>:

LoopForever:
  b LoopForever
 800025e:	e7fe      	b.n	800025e <LoopForever>
  ldr   r0, =_estack
 8000260:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000268:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800026c:	080002e4 	.word	0x080002e4
  ldr r2, =_sbss
 8000270:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000274:	2000001c 	.word	0x2000001c

08000278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000278:	e7fe      	b.n	8000278 <ADC1_2_IRQHandler>
	...

0800027c <__libc_init_array>:
 800027c:	b570      	push	{r4, r5, r6, lr}
 800027e:	2600      	movs	r6, #0
 8000280:	4d0c      	ldr	r5, [pc, #48]	@ (80002b4 <__libc_init_array+0x38>)
 8000282:	4c0d      	ldr	r4, [pc, #52]	@ (80002b8 <__libc_init_array+0x3c>)
 8000284:	1b64      	subs	r4, r4, r5
 8000286:	10a4      	asrs	r4, r4, #2
 8000288:	42a6      	cmp	r6, r4
 800028a:	d109      	bne.n	80002a0 <__libc_init_array+0x24>
 800028c:	f000 f81a 	bl	80002c4 <_init>
 8000290:	2600      	movs	r6, #0
 8000292:	4d0a      	ldr	r5, [pc, #40]	@ (80002bc <__libc_init_array+0x40>)
 8000294:	4c0a      	ldr	r4, [pc, #40]	@ (80002c0 <__libc_init_array+0x44>)
 8000296:	1b64      	subs	r4, r4, r5
 8000298:	10a4      	asrs	r4, r4, #2
 800029a:	42a6      	cmp	r6, r4
 800029c:	d105      	bne.n	80002aa <__libc_init_array+0x2e>
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a4:	4798      	blx	r3
 80002a6:	3601      	adds	r6, #1
 80002a8:	e7ee      	b.n	8000288 <__libc_init_array+0xc>
 80002aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ae:	4798      	blx	r3
 80002b0:	3601      	adds	r6, #1
 80002b2:	e7f2      	b.n	800029a <__libc_init_array+0x1e>
 80002b4:	080002dc 	.word	0x080002dc
 80002b8:	080002dc 	.word	0x080002dc
 80002bc:	080002dc 	.word	0x080002dc
 80002c0:	080002e0 	.word	0x080002e0

080002c4 <_init>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	bf00      	nop
 80002c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ca:	bc08      	pop	{r3}
 80002cc:	469e      	mov	lr, r3
 80002ce:	4770      	bx	lr

080002d0 <_fini>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	bf00      	nop
 80002d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d6:	bc08      	pop	{r3}
 80002d8:	469e      	mov	lr, r3
 80002da:	4770      	bx	lr

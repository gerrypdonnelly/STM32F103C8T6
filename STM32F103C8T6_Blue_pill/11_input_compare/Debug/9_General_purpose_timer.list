
9_General_purpose_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000df4  08000df4  00001df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e0c  08000e0c  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e0c  08000e0c  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e0c  08000e0c  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e0c  08000e0c  00001e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e10  08000e10  00001e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000e14  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000e70  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000e70  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fa1  00000000  00000000  00002085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000051a  00000000  00000000  00003026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00003540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000eb  00000000  00000000  000036a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f31  00000000  00000000  0000378b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002067  00000000  00000000  000056bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000599ec  00000000  00000000  00007723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006110f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a54  00000000  00000000  00061154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00061ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ddc 	.word	0x08000ddc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08000ddc 	.word	0x08000ddc

08000170 <Tim2_1hz_init>:
#define TIM2EN (1U<<0)
#define CR1_CEN (1U<<0)

//Uses Timer2 to time out every one second 1Hz
void Tim2_1hz_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= TIM2EN;		//Enable clock access to timer 2
 8000174:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <Tim2_1hz_init+0x44>)
 8000176:	69db      	ldr	r3, [r3, #28]
 8000178:	4a0e      	ldr	r2, [pc, #56]	@ (80001b4 <Tim2_1hz_init+0x44>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	61d3      	str	r3, [r2, #28]
	TIM2->PSC =800 - 1;  		//Set prescaler value in prescaler register 8 000 000 /800 = 10000
 8000180:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000184:	f240 321f 	movw	r2, #799	@ 0x31f
 8000188:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 10000 - 1; 		//set auto reload value 10000/10000 = 1Hz
 800018a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800018e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000192:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0; 				//clear the counter value, write 0 into timer count register
 8000194:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000198:	2200      	movs	r2, #0
 800019a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= CR1_CEN;		//enable the timer
 800019c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001a6:	f043 0301 	orr.w	r3, r3, #1
 80001aa:	6013      	str	r3, [r2, #0]
}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	40021000 	.word	0x40021000

080001b8 <USART1_Init>:
#include "stm32f103xb.h"


// Initialize USART1 for 9600 baud, 8N1 configuration
void USART1_Init(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and USART1
    RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN);
 80001bc:	4b19      	ldr	r3, [pc, #100]	@ (8000224 <USART1_Init+0x6c>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a18      	ldr	r2, [pc, #96]	@ (8000224 <USART1_Init+0x6c>)
 80001c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001c6:	f043 0304 	orr.w	r3, r3, #4
 80001ca:	6193      	str	r3, [r2, #24]

    // Configure PA9 (TX) as Alternate function push-pull
    GPIOA->CRH &= ~(1U<<4);
 80001cc:	4b16      	ldr	r3, [pc, #88]	@ (8000228 <USART1_Init+0x70>)
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	4a15      	ldr	r2, [pc, #84]	@ (8000228 <USART1_Init+0x70>)
 80001d2:	f023 0310 	bic.w	r3, r3, #16
 80001d6:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (1U<<5);      // Output mode, max speed 2 MHz
 80001d8:	4b13      	ldr	r3, [pc, #76]	@ (8000228 <USART1_Init+0x70>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	4a12      	ldr	r2, [pc, #72]	@ (8000228 <USART1_Init+0x70>)
 80001de:	f043 0320 	orr.w	r3, r3, #32
 80001e2:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~(1U<<6);
 80001e4:	4b10      	ldr	r3, [pc, #64]	@ (8000228 <USART1_Init+0x70>)
 80001e6:	685b      	ldr	r3, [r3, #4]
 80001e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000228 <USART1_Init+0x70>)
 80001ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80001ee:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (1U<<7);       // Alternate function push-pull
 80001f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <USART1_Init+0x70>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000228 <USART1_Init+0x70>)
 80001f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80001fa:	6053      	str	r3, [r2, #4]
    //Div fraction = .086  then * by 16 for over sampling => 1.328
    //converting mantissa to hex 52 => 0x34
    //USARTDIV value = 0x341

    // Configure USART1 for 9600 baud rate
    USART1->BRR = 0x341;  // Assuming a clock of 8 MHz
 80001fc:	4b0b      	ldr	r3, [pc, #44]	@ (800022c <USART1_Init+0x74>)
 80001fe:	f240 3241 	movw	r2, #833	@ 0x341
 8000202:	609a      	str	r2, [r3, #8]

    // Enable USART1 & TX
    USART1->CR1 |= USART_CR1_UE;    // USART enable
 8000204:	4b09      	ldr	r3, [pc, #36]	@ (800022c <USART1_Init+0x74>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	4a08      	ldr	r2, [pc, #32]	@ (800022c <USART1_Init+0x74>)
 800020a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800020e:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_TE;    // Transmit enable
 8000210:	4b06      	ldr	r3, [pc, #24]	@ (800022c <USART1_Init+0x74>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4a05      	ldr	r2, [pc, #20]	@ (800022c <USART1_Init+0x74>)
 8000216:	f043 0308 	orr.w	r3, r3, #8
 800021a:	60d3      	str	r3, [r2, #12]
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	40021000 	.word	0x40021000
 8000228:	40010800 	.word	0x40010800
 800022c:	40013800 	.word	0x40013800

08000230 <UART_write>:

void UART_write(int ch)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 8000238:	bf00      	nop
 800023a:	4b07      	ldr	r3, [pc, #28]	@ (8000258 <UART_write+0x28>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f9      	beq.n	800023a <UART_write+0xa>
	USART1->DR = ch & 0xff;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a03      	ldr	r2, [pc, #12]	@ (8000258 <UART_write+0x28>)
 800024a:	b2db      	uxtb	r3, r3
 800024c:	6053      	str	r3, [r2, #4]

}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	40013800 	.word	0x40013800

0800025c <__io_putchar>:


#define LED (1U<<2)

int __io_putchar(int ch)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	UART_write(ch);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f7ff ffe3 	bl	8000230 <UART_write>
	return ch;
 800026a:	687b      	ldr	r3, [r7, #4]
}
 800026c:	4618      	mov	r0, r3
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <main>:


uint32_t sensor_value;

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	USART1_Init();
 8000278:	f7ff ff9e 	bl	80001b8 <USART1_Init>
	Tim2_1hz_init();
 800027c:	f7ff ff78 	bl	8000170 <Tim2_1hz_init>

	//Configuration for LED
	RCC->APB2ENR |=(1U<<3);//Enable clock to PB
 8000280:	4b1b      	ldr	r3, [pc, #108]	@ (80002f0 <main+0x7c>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a1a      	ldr	r2, [pc, #104]	@ (80002f0 <main+0x7c>)
 8000286:	f043 0308 	orr.w	r3, r3, #8
 800028a:	6193      	str	r3, [r2, #24]
	//Set Mode of LED pin to output max speed 50Mhz
	GPIOB->CRL |=(1U<<8);
 800028c:	4b19      	ldr	r3, [pc, #100]	@ (80002f4 <main+0x80>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a18      	ldr	r2, [pc, #96]	@ (80002f4 <main+0x80>)
 8000292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000296:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=(1U<<9);
 8000298:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <main+0x80>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a15      	ldr	r2, [pc, #84]	@ (80002f4 <main+0x80>)
 800029e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002a2:	6013      	str	r3, [r2, #0]
	//Set CNF of LED pin to Output push pull
	GPIOB->CRL &=~(1U<<10);
 80002a4:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <main+0x80>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a12      	ldr	r2, [pc, #72]	@ (80002f4 <main+0x80>)
 80002aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &=~(1U<<11);
 80002b0:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <main+0x80>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a0f      	ldr	r2, [pc, #60]	@ (80002f4 <main+0x80>)
 80002b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002ba:	6013      	str	r3, [r2, #0]

	while(1)
	{

		while(!(TIM2->SR & SR_UIF)){}			//Wait for UIF
 80002bc:	bf00      	nop
 80002be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	f003 0301 	and.w	r3, r3, #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0f8      	beq.n	80002be <main+0x4a>

		TIM2->SR &=~SR_UIF;					//Clear UIF flag
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d0:	691b      	ldr	r3, [r3, #16]
 80002d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d6:	f023 0301 	bic.w	r3, r3, #1
 80002da:	6113      	str	r3, [r2, #16]
		printf("A second has passed \n");
 80002dc:	4806      	ldr	r0, [pc, #24]	@ (80002f8 <main+0x84>)
 80002de:	f000 f9ef 	bl	80006c0 <puts>
		GPIOB->ODR ^= LED;
 80002e2:	4b04      	ldr	r3, [pc, #16]	@ (80002f4 <main+0x80>)
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	4a03      	ldr	r2, [pc, #12]	@ (80002f4 <main+0x80>)
 80002e8:	f083 0304 	eor.w	r3, r3, #4
 80002ec:	60d3      	str	r3, [r2, #12]
		while(!(TIM2->SR & SR_UIF)){}			//Wait for UIF
 80002ee:	e7e5      	b.n	80002bc <main+0x48>
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40010c00 	.word	0x40010c00
 80002f8:	08000df4 	.word	0x08000df4

080002fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	e00a      	b.n	8000324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800030e:	f3af 8000 	nop.w
 8000312:	4601      	mov	r1, r0
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	60ba      	str	r2, [r7, #8]
 800031a:	b2ca      	uxtb	r2, r1
 800031c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	3301      	adds	r3, #1
 8000322:	617b      	str	r3, [r7, #20]
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	429a      	cmp	r2, r3
 800032a:	dbf0      	blt.n	800030e <_read+0x12>
  }

  return len;
 800032c:	687b      	ldr	r3, [r7, #4]
}
 800032e:	4618      	mov	r0, r3
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b086      	sub	sp, #24
 800033a:	af00      	add	r7, sp, #0
 800033c:	60f8      	str	r0, [r7, #12]
 800033e:	60b9      	str	r1, [r7, #8]
 8000340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
 8000346:	e009      	b.n	800035c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	1c5a      	adds	r2, r3, #1
 800034c:	60ba      	str	r2, [r7, #8]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff83 	bl	800025c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	3301      	adds	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	429a      	cmp	r2, r3
 8000362:	dbf1      	blt.n	8000348 <_write+0x12>
  }
  return len;
 8000364:	687b      	ldr	r3, [r7, #4]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3718      	adds	r7, #24
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <_close>:

int _close(int file)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000394:	605a      	str	r2, [r3, #4]
  return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr

080003a2 <_isatty>:

int _isatty(int file)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003aa:	2301      	movs	r3, #1
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr

080003b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b085      	sub	sp, #20
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	60f8      	str	r0, [r7, #12]
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
	...

080003d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d8:	4a14      	ldr	r2, [pc, #80]	@ (800042c <_sbrk+0x5c>)
 80003da:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <_sbrk+0x60>)
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <_sbrk+0x64>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d102      	bne.n	80003f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003ec:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <_sbrk+0x64>)
 80003ee:	4a12      	ldr	r2, [pc, #72]	@ (8000438 <_sbrk+0x68>)
 80003f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003f2:	4b10      	ldr	r3, [pc, #64]	@ (8000434 <_sbrk+0x64>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	693a      	ldr	r2, [r7, #16]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d207      	bcs.n	8000410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000400:	f000 fa8c 	bl	800091c <__errno>
 8000404:	4603      	mov	r3, r0
 8000406:	220c      	movs	r2, #12
 8000408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	e009      	b.n	8000424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <_sbrk+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000416:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <_sbrk+0x64>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	4a05      	ldr	r2, [pc, #20]	@ (8000434 <_sbrk+0x64>)
 8000420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20005000 	.word	0x20005000
 8000430:	00000400 	.word	0x00000400
 8000434:	20000078 	.word	0x20000078
 8000438:	200001c8 	.word	0x200001c8

0800043c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800043c:	480d      	ldr	r0, [pc, #52]	@ (8000474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000440:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000444:	480c      	ldr	r0, [pc, #48]	@ (8000478 <LoopForever+0x6>)
  ldr r1, =_edata
 8000446:	490d      	ldr	r1, [pc, #52]	@ (800047c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000448:	4a0d      	ldr	r2, [pc, #52]	@ (8000480 <LoopForever+0xe>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a0a      	ldr	r2, [pc, #40]	@ (8000484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800045c:	4c0a      	ldr	r4, [pc, #40]	@ (8000488 <LoopForever+0x16>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800046a:	f000 fa5d 	bl	8000928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046e:	f7ff ff01 	bl	8000274 <main>

08000472 <LoopForever>:

LoopForever:
  b LoopForever
 8000472:	e7fe      	b.n	8000472 <LoopForever>
  ldr   r0, =_estack
 8000474:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800047c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000480:	08000e14 	.word	0x08000e14
  ldr r2, =_sbss
 8000484:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000488:	200001c8 	.word	0x200001c8

0800048c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800048c:	e7fe      	b.n	800048c <ADC1_2_IRQHandler>
	...

08000490 <std>:
 8000490:	2300      	movs	r3, #0
 8000492:	b510      	push	{r4, lr}
 8000494:	4604      	mov	r4, r0
 8000496:	e9c0 3300 	strd	r3, r3, [r0]
 800049a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800049e:	6083      	str	r3, [r0, #8]
 80004a0:	8181      	strh	r1, [r0, #12]
 80004a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80004a4:	81c2      	strh	r2, [r0, #14]
 80004a6:	6183      	str	r3, [r0, #24]
 80004a8:	4619      	mov	r1, r3
 80004aa:	2208      	movs	r2, #8
 80004ac:	305c      	adds	r0, #92	@ 0x5c
 80004ae:	f000 f9e7 	bl	8000880 <memset>
 80004b2:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <std+0x58>)
 80004b4:	6224      	str	r4, [r4, #32]
 80004b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80004b8:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <std+0x5c>)
 80004ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80004bc:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <std+0x60>)
 80004be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <std+0x64>)
 80004c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <std+0x68>)
 80004c6:	429c      	cmp	r4, r3
 80004c8:	d006      	beq.n	80004d8 <std+0x48>
 80004ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80004ce:	4294      	cmp	r4, r2
 80004d0:	d002      	beq.n	80004d8 <std+0x48>
 80004d2:	33d0      	adds	r3, #208	@ 0xd0
 80004d4:	429c      	cmp	r4, r3
 80004d6:	d105      	bne.n	80004e4 <std+0x54>
 80004d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80004dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004e0:	f000 ba46 	b.w	8000970 <__retarget_lock_init_recursive>
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	bf00      	nop
 80004e8:	080006d1 	.word	0x080006d1
 80004ec:	080006f3 	.word	0x080006f3
 80004f0:	0800072b 	.word	0x0800072b
 80004f4:	0800074f 	.word	0x0800074f
 80004f8:	2000007c 	.word	0x2000007c

080004fc <stdio_exit_handler>:
 80004fc:	4a02      	ldr	r2, [pc, #8]	@ (8000508 <stdio_exit_handler+0xc>)
 80004fe:	4903      	ldr	r1, [pc, #12]	@ (800050c <stdio_exit_handler+0x10>)
 8000500:	4803      	ldr	r0, [pc, #12]	@ (8000510 <stdio_exit_handler+0x14>)
 8000502:	f000 b869 	b.w	80005d8 <_fwalk_sglue>
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000
 800050c:	08000c65 	.word	0x08000c65
 8000510:	20000010 	.word	0x20000010

08000514 <cleanup_stdio>:
 8000514:	6841      	ldr	r1, [r0, #4]
 8000516:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <cleanup_stdio+0x34>)
 8000518:	b510      	push	{r4, lr}
 800051a:	4299      	cmp	r1, r3
 800051c:	4604      	mov	r4, r0
 800051e:	d001      	beq.n	8000524 <cleanup_stdio+0x10>
 8000520:	f000 fba0 	bl	8000c64 <_fflush_r>
 8000524:	68a1      	ldr	r1, [r4, #8]
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <cleanup_stdio+0x38>)
 8000528:	4299      	cmp	r1, r3
 800052a:	d002      	beq.n	8000532 <cleanup_stdio+0x1e>
 800052c:	4620      	mov	r0, r4
 800052e:	f000 fb99 	bl	8000c64 <_fflush_r>
 8000532:	68e1      	ldr	r1, [r4, #12]
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <cleanup_stdio+0x3c>)
 8000536:	4299      	cmp	r1, r3
 8000538:	d004      	beq.n	8000544 <cleanup_stdio+0x30>
 800053a:	4620      	mov	r0, r4
 800053c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000540:	f000 bb90 	b.w	8000c64 <_fflush_r>
 8000544:	bd10      	pop	{r4, pc}
 8000546:	bf00      	nop
 8000548:	2000007c 	.word	0x2000007c
 800054c:	200000e4 	.word	0x200000e4
 8000550:	2000014c 	.word	0x2000014c

08000554 <global_stdio_init.part.0>:
 8000554:	b510      	push	{r4, lr}
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <global_stdio_init.part.0+0x30>)
 8000558:	4c0b      	ldr	r4, [pc, #44]	@ (8000588 <global_stdio_init.part.0+0x34>)
 800055a:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <global_stdio_init.part.0+0x38>)
 800055c:	4620      	mov	r0, r4
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	2104      	movs	r1, #4
 8000562:	2200      	movs	r2, #0
 8000564:	f7ff ff94 	bl	8000490 <std>
 8000568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800056c:	2201      	movs	r2, #1
 800056e:	2109      	movs	r1, #9
 8000570:	f7ff ff8e 	bl	8000490 <std>
 8000574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000578:	2202      	movs	r2, #2
 800057a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800057e:	2112      	movs	r1, #18
 8000580:	f7ff bf86 	b.w	8000490 <std>
 8000584:	200001b4 	.word	0x200001b4
 8000588:	2000007c 	.word	0x2000007c
 800058c:	080004fd 	.word	0x080004fd

08000590 <__sfp_lock_acquire>:
 8000590:	4801      	ldr	r0, [pc, #4]	@ (8000598 <__sfp_lock_acquire+0x8>)
 8000592:	f000 b9ee 	b.w	8000972 <__retarget_lock_acquire_recursive>
 8000596:	bf00      	nop
 8000598:	200001bd 	.word	0x200001bd

0800059c <__sfp_lock_release>:
 800059c:	4801      	ldr	r0, [pc, #4]	@ (80005a4 <__sfp_lock_release+0x8>)
 800059e:	f000 b9e9 	b.w	8000974 <__retarget_lock_release_recursive>
 80005a2:	bf00      	nop
 80005a4:	200001bd 	.word	0x200001bd

080005a8 <__sinit>:
 80005a8:	b510      	push	{r4, lr}
 80005aa:	4604      	mov	r4, r0
 80005ac:	f7ff fff0 	bl	8000590 <__sfp_lock_acquire>
 80005b0:	6a23      	ldr	r3, [r4, #32]
 80005b2:	b11b      	cbz	r3, 80005bc <__sinit+0x14>
 80005b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005b8:	f7ff bff0 	b.w	800059c <__sfp_lock_release>
 80005bc:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <__sinit+0x28>)
 80005be:	6223      	str	r3, [r4, #32]
 80005c0:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <__sinit+0x2c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f5      	bne.n	80005b4 <__sinit+0xc>
 80005c8:	f7ff ffc4 	bl	8000554 <global_stdio_init.part.0>
 80005cc:	e7f2      	b.n	80005b4 <__sinit+0xc>
 80005ce:	bf00      	nop
 80005d0:	08000515 	.word	0x08000515
 80005d4:	200001b4 	.word	0x200001b4

080005d8 <_fwalk_sglue>:
 80005d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005dc:	4607      	mov	r7, r0
 80005de:	4688      	mov	r8, r1
 80005e0:	4614      	mov	r4, r2
 80005e2:	2600      	movs	r6, #0
 80005e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005e8:	f1b9 0901 	subs.w	r9, r9, #1
 80005ec:	d505      	bpl.n	80005fa <_fwalk_sglue+0x22>
 80005ee:	6824      	ldr	r4, [r4, #0]
 80005f0:	2c00      	cmp	r4, #0
 80005f2:	d1f7      	bne.n	80005e4 <_fwalk_sglue+0xc>
 80005f4:	4630      	mov	r0, r6
 80005f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005fa:	89ab      	ldrh	r3, [r5, #12]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d907      	bls.n	8000610 <_fwalk_sglue+0x38>
 8000600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000604:	3301      	adds	r3, #1
 8000606:	d003      	beq.n	8000610 <_fwalk_sglue+0x38>
 8000608:	4629      	mov	r1, r5
 800060a:	4638      	mov	r0, r7
 800060c:	47c0      	blx	r8
 800060e:	4306      	orrs	r6, r0
 8000610:	3568      	adds	r5, #104	@ 0x68
 8000612:	e7e9      	b.n	80005e8 <_fwalk_sglue+0x10>

08000614 <_puts_r>:
 8000614:	6a03      	ldr	r3, [r0, #32]
 8000616:	b570      	push	{r4, r5, r6, lr}
 8000618:	4605      	mov	r5, r0
 800061a:	460e      	mov	r6, r1
 800061c:	6884      	ldr	r4, [r0, #8]
 800061e:	b90b      	cbnz	r3, 8000624 <_puts_r+0x10>
 8000620:	f7ff ffc2 	bl	80005a8 <__sinit>
 8000624:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000626:	07db      	lsls	r3, r3, #31
 8000628:	d405      	bmi.n	8000636 <_puts_r+0x22>
 800062a:	89a3      	ldrh	r3, [r4, #12]
 800062c:	0598      	lsls	r0, r3, #22
 800062e:	d402      	bmi.n	8000636 <_puts_r+0x22>
 8000630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000632:	f000 f99e 	bl	8000972 <__retarget_lock_acquire_recursive>
 8000636:	89a3      	ldrh	r3, [r4, #12]
 8000638:	0719      	lsls	r1, r3, #28
 800063a:	d502      	bpl.n	8000642 <_puts_r+0x2e>
 800063c:	6923      	ldr	r3, [r4, #16]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d135      	bne.n	80006ae <_puts_r+0x9a>
 8000642:	4621      	mov	r1, r4
 8000644:	4628      	mov	r0, r5
 8000646:	f000 f8c5 	bl	80007d4 <__swsetup_r>
 800064a:	b380      	cbz	r0, 80006ae <_puts_r+0x9a>
 800064c:	f04f 35ff 	mov.w	r5, #4294967295
 8000650:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000652:	07da      	lsls	r2, r3, #31
 8000654:	d405      	bmi.n	8000662 <_puts_r+0x4e>
 8000656:	89a3      	ldrh	r3, [r4, #12]
 8000658:	059b      	lsls	r3, r3, #22
 800065a:	d402      	bmi.n	8000662 <_puts_r+0x4e>
 800065c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800065e:	f000 f989 	bl	8000974 <__retarget_lock_release_recursive>
 8000662:	4628      	mov	r0, r5
 8000664:	bd70      	pop	{r4, r5, r6, pc}
 8000666:	2b00      	cmp	r3, #0
 8000668:	da04      	bge.n	8000674 <_puts_r+0x60>
 800066a:	69a2      	ldr	r2, [r4, #24]
 800066c:	429a      	cmp	r2, r3
 800066e:	dc17      	bgt.n	80006a0 <_puts_r+0x8c>
 8000670:	290a      	cmp	r1, #10
 8000672:	d015      	beq.n	80006a0 <_puts_r+0x8c>
 8000674:	6823      	ldr	r3, [r4, #0]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	6022      	str	r2, [r4, #0]
 800067a:	7019      	strb	r1, [r3, #0]
 800067c:	68a3      	ldr	r3, [r4, #8]
 800067e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000682:	3b01      	subs	r3, #1
 8000684:	60a3      	str	r3, [r4, #8]
 8000686:	2900      	cmp	r1, #0
 8000688:	d1ed      	bne.n	8000666 <_puts_r+0x52>
 800068a:	2b00      	cmp	r3, #0
 800068c:	da11      	bge.n	80006b2 <_puts_r+0x9e>
 800068e:	4622      	mov	r2, r4
 8000690:	210a      	movs	r1, #10
 8000692:	4628      	mov	r0, r5
 8000694:	f000 f85f 	bl	8000756 <__swbuf_r>
 8000698:	3001      	adds	r0, #1
 800069a:	d0d7      	beq.n	800064c <_puts_r+0x38>
 800069c:	250a      	movs	r5, #10
 800069e:	e7d7      	b.n	8000650 <_puts_r+0x3c>
 80006a0:	4622      	mov	r2, r4
 80006a2:	4628      	mov	r0, r5
 80006a4:	f000 f857 	bl	8000756 <__swbuf_r>
 80006a8:	3001      	adds	r0, #1
 80006aa:	d1e7      	bne.n	800067c <_puts_r+0x68>
 80006ac:	e7ce      	b.n	800064c <_puts_r+0x38>
 80006ae:	3e01      	subs	r6, #1
 80006b0:	e7e4      	b.n	800067c <_puts_r+0x68>
 80006b2:	6823      	ldr	r3, [r4, #0]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	6022      	str	r2, [r4, #0]
 80006b8:	220a      	movs	r2, #10
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e7ee      	b.n	800069c <_puts_r+0x88>
	...

080006c0 <puts>:
 80006c0:	4b02      	ldr	r3, [pc, #8]	@ (80006cc <puts+0xc>)
 80006c2:	4601      	mov	r1, r0
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	f7ff bfa5 	b.w	8000614 <_puts_r>
 80006ca:	bf00      	nop
 80006cc:	2000000c 	.word	0x2000000c

080006d0 <__sread>:
 80006d0:	b510      	push	{r4, lr}
 80006d2:	460c      	mov	r4, r1
 80006d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006d8:	f000 f8fc 	bl	80008d4 <_read_r>
 80006dc:	2800      	cmp	r0, #0
 80006de:	bfab      	itete	ge
 80006e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80006e2:	89a3      	ldrhlt	r3, [r4, #12]
 80006e4:	181b      	addge	r3, r3, r0
 80006e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80006ea:	bfac      	ite	ge
 80006ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80006ee:	81a3      	strhlt	r3, [r4, #12]
 80006f0:	bd10      	pop	{r4, pc}

080006f2 <__swrite>:
 80006f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006f6:	461f      	mov	r7, r3
 80006f8:	898b      	ldrh	r3, [r1, #12]
 80006fa:	4605      	mov	r5, r0
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	460c      	mov	r4, r1
 8000700:	4616      	mov	r6, r2
 8000702:	d505      	bpl.n	8000710 <__swrite+0x1e>
 8000704:	2302      	movs	r3, #2
 8000706:	2200      	movs	r2, #0
 8000708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800070c:	f000 f8d0 	bl	80008b0 <_lseek_r>
 8000710:	89a3      	ldrh	r3, [r4, #12]
 8000712:	4632      	mov	r2, r6
 8000714:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000718:	81a3      	strh	r3, [r4, #12]
 800071a:	4628      	mov	r0, r5
 800071c:	463b      	mov	r3, r7
 800071e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000726:	f000 b8e7 	b.w	80008f8 <_write_r>

0800072a <__sseek>:
 800072a:	b510      	push	{r4, lr}
 800072c:	460c      	mov	r4, r1
 800072e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000732:	f000 f8bd 	bl	80008b0 <_lseek_r>
 8000736:	1c43      	adds	r3, r0, #1
 8000738:	89a3      	ldrh	r3, [r4, #12]
 800073a:	bf15      	itete	ne
 800073c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800073e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000742:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000746:	81a3      	strheq	r3, [r4, #12]
 8000748:	bf18      	it	ne
 800074a:	81a3      	strhne	r3, [r4, #12]
 800074c:	bd10      	pop	{r4, pc}

0800074e <__sclose>:
 800074e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000752:	f000 b89d 	b.w	8000890 <_close_r>

08000756 <__swbuf_r>:
 8000756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000758:	460e      	mov	r6, r1
 800075a:	4614      	mov	r4, r2
 800075c:	4605      	mov	r5, r0
 800075e:	b118      	cbz	r0, 8000768 <__swbuf_r+0x12>
 8000760:	6a03      	ldr	r3, [r0, #32]
 8000762:	b90b      	cbnz	r3, 8000768 <__swbuf_r+0x12>
 8000764:	f7ff ff20 	bl	80005a8 <__sinit>
 8000768:	69a3      	ldr	r3, [r4, #24]
 800076a:	60a3      	str	r3, [r4, #8]
 800076c:	89a3      	ldrh	r3, [r4, #12]
 800076e:	071a      	lsls	r2, r3, #28
 8000770:	d501      	bpl.n	8000776 <__swbuf_r+0x20>
 8000772:	6923      	ldr	r3, [r4, #16]
 8000774:	b943      	cbnz	r3, 8000788 <__swbuf_r+0x32>
 8000776:	4621      	mov	r1, r4
 8000778:	4628      	mov	r0, r5
 800077a:	f000 f82b 	bl	80007d4 <__swsetup_r>
 800077e:	b118      	cbz	r0, 8000788 <__swbuf_r+0x32>
 8000780:	f04f 37ff 	mov.w	r7, #4294967295
 8000784:	4638      	mov	r0, r7
 8000786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	6922      	ldr	r2, [r4, #16]
 800078c:	b2f6      	uxtb	r6, r6
 800078e:	1a98      	subs	r0, r3, r2
 8000790:	6963      	ldr	r3, [r4, #20]
 8000792:	4637      	mov	r7, r6
 8000794:	4283      	cmp	r3, r0
 8000796:	dc05      	bgt.n	80007a4 <__swbuf_r+0x4e>
 8000798:	4621      	mov	r1, r4
 800079a:	4628      	mov	r0, r5
 800079c:	f000 fa62 	bl	8000c64 <_fflush_r>
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d1ed      	bne.n	8000780 <__swbuf_r+0x2a>
 80007a4:	68a3      	ldr	r3, [r4, #8]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	60a3      	str	r3, [r4, #8]
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	6022      	str	r2, [r4, #0]
 80007b0:	701e      	strb	r6, [r3, #0]
 80007b2:	6962      	ldr	r2, [r4, #20]
 80007b4:	1c43      	adds	r3, r0, #1
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d004      	beq.n	80007c4 <__swbuf_r+0x6e>
 80007ba:	89a3      	ldrh	r3, [r4, #12]
 80007bc:	07db      	lsls	r3, r3, #31
 80007be:	d5e1      	bpl.n	8000784 <__swbuf_r+0x2e>
 80007c0:	2e0a      	cmp	r6, #10
 80007c2:	d1df      	bne.n	8000784 <__swbuf_r+0x2e>
 80007c4:	4621      	mov	r1, r4
 80007c6:	4628      	mov	r0, r5
 80007c8:	f000 fa4c 	bl	8000c64 <_fflush_r>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d0d9      	beq.n	8000784 <__swbuf_r+0x2e>
 80007d0:	e7d6      	b.n	8000780 <__swbuf_r+0x2a>
	...

080007d4 <__swsetup_r>:
 80007d4:	b538      	push	{r3, r4, r5, lr}
 80007d6:	4b29      	ldr	r3, [pc, #164]	@ (800087c <__swsetup_r+0xa8>)
 80007d8:	4605      	mov	r5, r0
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	460c      	mov	r4, r1
 80007de:	b118      	cbz	r0, 80007e8 <__swsetup_r+0x14>
 80007e0:	6a03      	ldr	r3, [r0, #32]
 80007e2:	b90b      	cbnz	r3, 80007e8 <__swsetup_r+0x14>
 80007e4:	f7ff fee0 	bl	80005a8 <__sinit>
 80007e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007ec:	0719      	lsls	r1, r3, #28
 80007ee:	d422      	bmi.n	8000836 <__swsetup_r+0x62>
 80007f0:	06da      	lsls	r2, r3, #27
 80007f2:	d407      	bmi.n	8000804 <__swsetup_r+0x30>
 80007f4:	2209      	movs	r2, #9
 80007f6:	602a      	str	r2, [r5, #0]
 80007f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	81a3      	strh	r3, [r4, #12]
 8000802:	e033      	b.n	800086c <__swsetup_r+0x98>
 8000804:	0758      	lsls	r0, r3, #29
 8000806:	d512      	bpl.n	800082e <__swsetup_r+0x5a>
 8000808:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800080a:	b141      	cbz	r1, 800081e <__swsetup_r+0x4a>
 800080c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000810:	4299      	cmp	r1, r3
 8000812:	d002      	beq.n	800081a <__swsetup_r+0x46>
 8000814:	4628      	mov	r0, r5
 8000816:	f000 f8af 	bl	8000978 <_free_r>
 800081a:	2300      	movs	r3, #0
 800081c:	6363      	str	r3, [r4, #52]	@ 0x34
 800081e:	89a3      	ldrh	r3, [r4, #12]
 8000820:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000824:	81a3      	strh	r3, [r4, #12]
 8000826:	2300      	movs	r3, #0
 8000828:	6063      	str	r3, [r4, #4]
 800082a:	6923      	ldr	r3, [r4, #16]
 800082c:	6023      	str	r3, [r4, #0]
 800082e:	89a3      	ldrh	r3, [r4, #12]
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	81a3      	strh	r3, [r4, #12]
 8000836:	6923      	ldr	r3, [r4, #16]
 8000838:	b94b      	cbnz	r3, 800084e <__swsetup_r+0x7a>
 800083a:	89a3      	ldrh	r3, [r4, #12]
 800083c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000844:	d003      	beq.n	800084e <__swsetup_r+0x7a>
 8000846:	4621      	mov	r1, r4
 8000848:	4628      	mov	r0, r5
 800084a:	f000 fa58 	bl	8000cfe <__smakebuf_r>
 800084e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000852:	f013 0201 	ands.w	r2, r3, #1
 8000856:	d00a      	beq.n	800086e <__swsetup_r+0x9a>
 8000858:	2200      	movs	r2, #0
 800085a:	60a2      	str	r2, [r4, #8]
 800085c:	6962      	ldr	r2, [r4, #20]
 800085e:	4252      	negs	r2, r2
 8000860:	61a2      	str	r2, [r4, #24]
 8000862:	6922      	ldr	r2, [r4, #16]
 8000864:	b942      	cbnz	r2, 8000878 <__swsetup_r+0xa4>
 8000866:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800086a:	d1c5      	bne.n	80007f8 <__swsetup_r+0x24>
 800086c:	bd38      	pop	{r3, r4, r5, pc}
 800086e:	0799      	lsls	r1, r3, #30
 8000870:	bf58      	it	pl
 8000872:	6962      	ldrpl	r2, [r4, #20]
 8000874:	60a2      	str	r2, [r4, #8]
 8000876:	e7f4      	b.n	8000862 <__swsetup_r+0x8e>
 8000878:	2000      	movs	r0, #0
 800087a:	e7f7      	b.n	800086c <__swsetup_r+0x98>
 800087c:	2000000c 	.word	0x2000000c

08000880 <memset>:
 8000880:	4603      	mov	r3, r0
 8000882:	4402      	add	r2, r0
 8000884:	4293      	cmp	r3, r2
 8000886:	d100      	bne.n	800088a <memset+0xa>
 8000888:	4770      	bx	lr
 800088a:	f803 1b01 	strb.w	r1, [r3], #1
 800088e:	e7f9      	b.n	8000884 <memset+0x4>

08000890 <_close_r>:
 8000890:	b538      	push	{r3, r4, r5, lr}
 8000892:	2300      	movs	r3, #0
 8000894:	4d05      	ldr	r5, [pc, #20]	@ (80008ac <_close_r+0x1c>)
 8000896:	4604      	mov	r4, r0
 8000898:	4608      	mov	r0, r1
 800089a:	602b      	str	r3, [r5, #0]
 800089c:	f7ff fd67 	bl	800036e <_close>
 80008a0:	1c43      	adds	r3, r0, #1
 80008a2:	d102      	bne.n	80008aa <_close_r+0x1a>
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	b103      	cbz	r3, 80008aa <_close_r+0x1a>
 80008a8:	6023      	str	r3, [r4, #0]
 80008aa:	bd38      	pop	{r3, r4, r5, pc}
 80008ac:	200001b8 	.word	0x200001b8

080008b0 <_lseek_r>:
 80008b0:	b538      	push	{r3, r4, r5, lr}
 80008b2:	4604      	mov	r4, r0
 80008b4:	4608      	mov	r0, r1
 80008b6:	4611      	mov	r1, r2
 80008b8:	2200      	movs	r2, #0
 80008ba:	4d05      	ldr	r5, [pc, #20]	@ (80008d0 <_lseek_r+0x20>)
 80008bc:	602a      	str	r2, [r5, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	f7ff fd79 	bl	80003b6 <_lseek>
 80008c4:	1c43      	adds	r3, r0, #1
 80008c6:	d102      	bne.n	80008ce <_lseek_r+0x1e>
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	b103      	cbz	r3, 80008ce <_lseek_r+0x1e>
 80008cc:	6023      	str	r3, [r4, #0]
 80008ce:	bd38      	pop	{r3, r4, r5, pc}
 80008d0:	200001b8 	.word	0x200001b8

080008d4 <_read_r>:
 80008d4:	b538      	push	{r3, r4, r5, lr}
 80008d6:	4604      	mov	r4, r0
 80008d8:	4608      	mov	r0, r1
 80008da:	4611      	mov	r1, r2
 80008dc:	2200      	movs	r2, #0
 80008de:	4d05      	ldr	r5, [pc, #20]	@ (80008f4 <_read_r+0x20>)
 80008e0:	602a      	str	r2, [r5, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	f7ff fd0a 	bl	80002fc <_read>
 80008e8:	1c43      	adds	r3, r0, #1
 80008ea:	d102      	bne.n	80008f2 <_read_r+0x1e>
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	b103      	cbz	r3, 80008f2 <_read_r+0x1e>
 80008f0:	6023      	str	r3, [r4, #0]
 80008f2:	bd38      	pop	{r3, r4, r5, pc}
 80008f4:	200001b8 	.word	0x200001b8

080008f8 <_write_r>:
 80008f8:	b538      	push	{r3, r4, r5, lr}
 80008fa:	4604      	mov	r4, r0
 80008fc:	4608      	mov	r0, r1
 80008fe:	4611      	mov	r1, r2
 8000900:	2200      	movs	r2, #0
 8000902:	4d05      	ldr	r5, [pc, #20]	@ (8000918 <_write_r+0x20>)
 8000904:	602a      	str	r2, [r5, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	f7ff fd15 	bl	8000336 <_write>
 800090c:	1c43      	adds	r3, r0, #1
 800090e:	d102      	bne.n	8000916 <_write_r+0x1e>
 8000910:	682b      	ldr	r3, [r5, #0]
 8000912:	b103      	cbz	r3, 8000916 <_write_r+0x1e>
 8000914:	6023      	str	r3, [r4, #0]
 8000916:	bd38      	pop	{r3, r4, r5, pc}
 8000918:	200001b8 	.word	0x200001b8

0800091c <__errno>:
 800091c:	4b01      	ldr	r3, [pc, #4]	@ (8000924 <__errno+0x8>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	2000000c 	.word	0x2000000c

08000928 <__libc_init_array>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	2600      	movs	r6, #0
 800092c:	4d0c      	ldr	r5, [pc, #48]	@ (8000960 <__libc_init_array+0x38>)
 800092e:	4c0d      	ldr	r4, [pc, #52]	@ (8000964 <__libc_init_array+0x3c>)
 8000930:	1b64      	subs	r4, r4, r5
 8000932:	10a4      	asrs	r4, r4, #2
 8000934:	42a6      	cmp	r6, r4
 8000936:	d109      	bne.n	800094c <__libc_init_array+0x24>
 8000938:	f000 fa50 	bl	8000ddc <_init>
 800093c:	2600      	movs	r6, #0
 800093e:	4d0a      	ldr	r5, [pc, #40]	@ (8000968 <__libc_init_array+0x40>)
 8000940:	4c0a      	ldr	r4, [pc, #40]	@ (800096c <__libc_init_array+0x44>)
 8000942:	1b64      	subs	r4, r4, r5
 8000944:	10a4      	asrs	r4, r4, #2
 8000946:	42a6      	cmp	r6, r4
 8000948:	d105      	bne.n	8000956 <__libc_init_array+0x2e>
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000950:	4798      	blx	r3
 8000952:	3601      	adds	r6, #1
 8000954:	e7ee      	b.n	8000934 <__libc_init_array+0xc>
 8000956:	f855 3b04 	ldr.w	r3, [r5], #4
 800095a:	4798      	blx	r3
 800095c:	3601      	adds	r6, #1
 800095e:	e7f2      	b.n	8000946 <__libc_init_array+0x1e>
 8000960:	08000e0c 	.word	0x08000e0c
 8000964:	08000e0c 	.word	0x08000e0c
 8000968:	08000e0c 	.word	0x08000e0c
 800096c:	08000e10 	.word	0x08000e10

08000970 <__retarget_lock_init_recursive>:
 8000970:	4770      	bx	lr

08000972 <__retarget_lock_acquire_recursive>:
 8000972:	4770      	bx	lr

08000974 <__retarget_lock_release_recursive>:
 8000974:	4770      	bx	lr
	...

08000978 <_free_r>:
 8000978:	b538      	push	{r3, r4, r5, lr}
 800097a:	4605      	mov	r5, r0
 800097c:	2900      	cmp	r1, #0
 800097e:	d040      	beq.n	8000a02 <_free_r+0x8a>
 8000980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000984:	1f0c      	subs	r4, r1, #4
 8000986:	2b00      	cmp	r3, #0
 8000988:	bfb8      	it	lt
 800098a:	18e4      	addlt	r4, r4, r3
 800098c:	f000 f8de 	bl	8000b4c <__malloc_lock>
 8000990:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <_free_r+0x8c>)
 8000992:	6813      	ldr	r3, [r2, #0]
 8000994:	b933      	cbnz	r3, 80009a4 <_free_r+0x2c>
 8000996:	6063      	str	r3, [r4, #4]
 8000998:	6014      	str	r4, [r2, #0]
 800099a:	4628      	mov	r0, r5
 800099c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009a0:	f000 b8da 	b.w	8000b58 <__malloc_unlock>
 80009a4:	42a3      	cmp	r3, r4
 80009a6:	d908      	bls.n	80009ba <_free_r+0x42>
 80009a8:	6820      	ldr	r0, [r4, #0]
 80009aa:	1821      	adds	r1, r4, r0
 80009ac:	428b      	cmp	r3, r1
 80009ae:	bf01      	itttt	eq
 80009b0:	6819      	ldreq	r1, [r3, #0]
 80009b2:	685b      	ldreq	r3, [r3, #4]
 80009b4:	1809      	addeq	r1, r1, r0
 80009b6:	6021      	streq	r1, [r4, #0]
 80009b8:	e7ed      	b.n	8000996 <_free_r+0x1e>
 80009ba:	461a      	mov	r2, r3
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	b10b      	cbz	r3, 80009c4 <_free_r+0x4c>
 80009c0:	42a3      	cmp	r3, r4
 80009c2:	d9fa      	bls.n	80009ba <_free_r+0x42>
 80009c4:	6811      	ldr	r1, [r2, #0]
 80009c6:	1850      	adds	r0, r2, r1
 80009c8:	42a0      	cmp	r0, r4
 80009ca:	d10b      	bne.n	80009e4 <_free_r+0x6c>
 80009cc:	6820      	ldr	r0, [r4, #0]
 80009ce:	4401      	add	r1, r0
 80009d0:	1850      	adds	r0, r2, r1
 80009d2:	4283      	cmp	r3, r0
 80009d4:	6011      	str	r1, [r2, #0]
 80009d6:	d1e0      	bne.n	800099a <_free_r+0x22>
 80009d8:	6818      	ldr	r0, [r3, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	4408      	add	r0, r1
 80009de:	6010      	str	r0, [r2, #0]
 80009e0:	6053      	str	r3, [r2, #4]
 80009e2:	e7da      	b.n	800099a <_free_r+0x22>
 80009e4:	d902      	bls.n	80009ec <_free_r+0x74>
 80009e6:	230c      	movs	r3, #12
 80009e8:	602b      	str	r3, [r5, #0]
 80009ea:	e7d6      	b.n	800099a <_free_r+0x22>
 80009ec:	6820      	ldr	r0, [r4, #0]
 80009ee:	1821      	adds	r1, r4, r0
 80009f0:	428b      	cmp	r3, r1
 80009f2:	bf01      	itttt	eq
 80009f4:	6819      	ldreq	r1, [r3, #0]
 80009f6:	685b      	ldreq	r3, [r3, #4]
 80009f8:	1809      	addeq	r1, r1, r0
 80009fa:	6021      	streq	r1, [r4, #0]
 80009fc:	6063      	str	r3, [r4, #4]
 80009fe:	6054      	str	r4, [r2, #4]
 8000a00:	e7cb      	b.n	800099a <_free_r+0x22>
 8000a02:	bd38      	pop	{r3, r4, r5, pc}
 8000a04:	200001c4 	.word	0x200001c4

08000a08 <sbrk_aligned>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	4e0f      	ldr	r6, [pc, #60]	@ (8000a48 <sbrk_aligned+0x40>)
 8000a0c:	460c      	mov	r4, r1
 8000a0e:	6831      	ldr	r1, [r6, #0]
 8000a10:	4605      	mov	r5, r0
 8000a12:	b911      	cbnz	r1, 8000a1a <sbrk_aligned+0x12>
 8000a14:	f000 f9d2 	bl	8000dbc <_sbrk_r>
 8000a18:	6030      	str	r0, [r6, #0]
 8000a1a:	4621      	mov	r1, r4
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	f000 f9cd 	bl	8000dbc <_sbrk_r>
 8000a22:	1c43      	adds	r3, r0, #1
 8000a24:	d103      	bne.n	8000a2e <sbrk_aligned+0x26>
 8000a26:	f04f 34ff 	mov.w	r4, #4294967295
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
 8000a2e:	1cc4      	adds	r4, r0, #3
 8000a30:	f024 0403 	bic.w	r4, r4, #3
 8000a34:	42a0      	cmp	r0, r4
 8000a36:	d0f8      	beq.n	8000a2a <sbrk_aligned+0x22>
 8000a38:	1a21      	subs	r1, r4, r0
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	f000 f9be 	bl	8000dbc <_sbrk_r>
 8000a40:	3001      	adds	r0, #1
 8000a42:	d1f2      	bne.n	8000a2a <sbrk_aligned+0x22>
 8000a44:	e7ef      	b.n	8000a26 <sbrk_aligned+0x1e>
 8000a46:	bf00      	nop
 8000a48:	200001c0 	.word	0x200001c0

08000a4c <_malloc_r>:
 8000a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a50:	1ccd      	adds	r5, r1, #3
 8000a52:	f025 0503 	bic.w	r5, r5, #3
 8000a56:	3508      	adds	r5, #8
 8000a58:	2d0c      	cmp	r5, #12
 8000a5a:	bf38      	it	cc
 8000a5c:	250c      	movcc	r5, #12
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	4606      	mov	r6, r0
 8000a62:	db01      	blt.n	8000a68 <_malloc_r+0x1c>
 8000a64:	42a9      	cmp	r1, r5
 8000a66:	d904      	bls.n	8000a72 <_malloc_r+0x26>
 8000a68:	230c      	movs	r3, #12
 8000a6a:	6033      	str	r3, [r6, #0]
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b48 <_malloc_r+0xfc>
 8000a76:	f000 f869 	bl	8000b4c <__malloc_lock>
 8000a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a7e:	461c      	mov	r4, r3
 8000a80:	bb44      	cbnz	r4, 8000ad4 <_malloc_r+0x88>
 8000a82:	4629      	mov	r1, r5
 8000a84:	4630      	mov	r0, r6
 8000a86:	f7ff ffbf 	bl	8000a08 <sbrk_aligned>
 8000a8a:	1c43      	adds	r3, r0, #1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	d158      	bne.n	8000b42 <_malloc_r+0xf6>
 8000a90:	f8d8 4000 	ldr.w	r4, [r8]
 8000a94:	4627      	mov	r7, r4
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d143      	bne.n	8000b22 <_malloc_r+0xd6>
 8000a9a:	2c00      	cmp	r4, #0
 8000a9c:	d04b      	beq.n	8000b36 <_malloc_r+0xea>
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	4639      	mov	r1, r7
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	eb04 0903 	add.w	r9, r4, r3
 8000aa8:	f000 f988 	bl	8000dbc <_sbrk_r>
 8000aac:	4581      	cmp	r9, r0
 8000aae:	d142      	bne.n	8000b36 <_malloc_r+0xea>
 8000ab0:	6821      	ldr	r1, [r4, #0]
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	1a6d      	subs	r5, r5, r1
 8000ab6:	4629      	mov	r1, r5
 8000ab8:	f7ff ffa6 	bl	8000a08 <sbrk_aligned>
 8000abc:	3001      	adds	r0, #1
 8000abe:	d03a      	beq.n	8000b36 <_malloc_r+0xea>
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	442b      	add	r3, r5
 8000ac4:	6023      	str	r3, [r4, #0]
 8000ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	bb62      	cbnz	r2, 8000b28 <_malloc_r+0xdc>
 8000ace:	f8c8 7000 	str.w	r7, [r8]
 8000ad2:	e00f      	b.n	8000af4 <_malloc_r+0xa8>
 8000ad4:	6822      	ldr	r2, [r4, #0]
 8000ad6:	1b52      	subs	r2, r2, r5
 8000ad8:	d420      	bmi.n	8000b1c <_malloc_r+0xd0>
 8000ada:	2a0b      	cmp	r2, #11
 8000adc:	d917      	bls.n	8000b0e <_malloc_r+0xc2>
 8000ade:	1961      	adds	r1, r4, r5
 8000ae0:	42a3      	cmp	r3, r4
 8000ae2:	6025      	str	r5, [r4, #0]
 8000ae4:	bf18      	it	ne
 8000ae6:	6059      	strne	r1, [r3, #4]
 8000ae8:	6863      	ldr	r3, [r4, #4]
 8000aea:	bf08      	it	eq
 8000aec:	f8c8 1000 	streq.w	r1, [r8]
 8000af0:	5162      	str	r2, [r4, r5]
 8000af2:	604b      	str	r3, [r1, #4]
 8000af4:	4630      	mov	r0, r6
 8000af6:	f000 f82f 	bl	8000b58 <__malloc_unlock>
 8000afa:	f104 000b 	add.w	r0, r4, #11
 8000afe:	1d23      	adds	r3, r4, #4
 8000b00:	f020 0007 	bic.w	r0, r0, #7
 8000b04:	1ac2      	subs	r2, r0, r3
 8000b06:	bf1c      	itt	ne
 8000b08:	1a1b      	subne	r3, r3, r0
 8000b0a:	50a3      	strne	r3, [r4, r2]
 8000b0c:	e7af      	b.n	8000a6e <_malloc_r+0x22>
 8000b0e:	6862      	ldr	r2, [r4, #4]
 8000b10:	42a3      	cmp	r3, r4
 8000b12:	bf0c      	ite	eq
 8000b14:	f8c8 2000 	streq.w	r2, [r8]
 8000b18:	605a      	strne	r2, [r3, #4]
 8000b1a:	e7eb      	b.n	8000af4 <_malloc_r+0xa8>
 8000b1c:	4623      	mov	r3, r4
 8000b1e:	6864      	ldr	r4, [r4, #4]
 8000b20:	e7ae      	b.n	8000a80 <_malloc_r+0x34>
 8000b22:	463c      	mov	r4, r7
 8000b24:	687f      	ldr	r7, [r7, #4]
 8000b26:	e7b6      	b.n	8000a96 <_malloc_r+0x4a>
 8000b28:	461a      	mov	r2, r3
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d1fb      	bne.n	8000b28 <_malloc_r+0xdc>
 8000b30:	2300      	movs	r3, #0
 8000b32:	6053      	str	r3, [r2, #4]
 8000b34:	e7de      	b.n	8000af4 <_malloc_r+0xa8>
 8000b36:	230c      	movs	r3, #12
 8000b38:	4630      	mov	r0, r6
 8000b3a:	6033      	str	r3, [r6, #0]
 8000b3c:	f000 f80c 	bl	8000b58 <__malloc_unlock>
 8000b40:	e794      	b.n	8000a6c <_malloc_r+0x20>
 8000b42:	6005      	str	r5, [r0, #0]
 8000b44:	e7d6      	b.n	8000af4 <_malloc_r+0xa8>
 8000b46:	bf00      	nop
 8000b48:	200001c4 	.word	0x200001c4

08000b4c <__malloc_lock>:
 8000b4c:	4801      	ldr	r0, [pc, #4]	@ (8000b54 <__malloc_lock+0x8>)
 8000b4e:	f7ff bf10 	b.w	8000972 <__retarget_lock_acquire_recursive>
 8000b52:	bf00      	nop
 8000b54:	200001bc 	.word	0x200001bc

08000b58 <__malloc_unlock>:
 8000b58:	4801      	ldr	r0, [pc, #4]	@ (8000b60 <__malloc_unlock+0x8>)
 8000b5a:	f7ff bf0b 	b.w	8000974 <__retarget_lock_release_recursive>
 8000b5e:	bf00      	nop
 8000b60:	200001bc 	.word	0x200001bc

08000b64 <__sflush_r>:
 8000b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6a:	0716      	lsls	r6, r2, #28
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	460c      	mov	r4, r1
 8000b70:	d454      	bmi.n	8000c1c <__sflush_r+0xb8>
 8000b72:	684b      	ldr	r3, [r1, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	dc02      	bgt.n	8000b7e <__sflush_r+0x1a>
 8000b78:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	dd48      	ble.n	8000c10 <__sflush_r+0xac>
 8000b7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	d045      	beq.n	8000c10 <__sflush_r+0xac>
 8000b84:	2300      	movs	r3, #0
 8000b86:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000b8a:	682f      	ldr	r7, [r5, #0]
 8000b8c:	6a21      	ldr	r1, [r4, #32]
 8000b8e:	602b      	str	r3, [r5, #0]
 8000b90:	d030      	beq.n	8000bf4 <__sflush_r+0x90>
 8000b92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000b94:	89a3      	ldrh	r3, [r4, #12]
 8000b96:	0759      	lsls	r1, r3, #29
 8000b98:	d505      	bpl.n	8000ba6 <__sflush_r+0x42>
 8000b9a:	6863      	ldr	r3, [r4, #4]
 8000b9c:	1ad2      	subs	r2, r2, r3
 8000b9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000ba0:	b10b      	cbz	r3, 8000ba6 <__sflush_r+0x42>
 8000ba2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ba4:	1ad2      	subs	r2, r2, r3
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	4628      	mov	r0, r5
 8000baa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000bac:	6a21      	ldr	r1, [r4, #32]
 8000bae:	47b0      	blx	r6
 8000bb0:	1c43      	adds	r3, r0, #1
 8000bb2:	89a3      	ldrh	r3, [r4, #12]
 8000bb4:	d106      	bne.n	8000bc4 <__sflush_r+0x60>
 8000bb6:	6829      	ldr	r1, [r5, #0]
 8000bb8:	291d      	cmp	r1, #29
 8000bba:	d82b      	bhi.n	8000c14 <__sflush_r+0xb0>
 8000bbc:	4a28      	ldr	r2, [pc, #160]	@ (8000c60 <__sflush_r+0xfc>)
 8000bbe:	410a      	asrs	r2, r1
 8000bc0:	07d6      	lsls	r6, r2, #31
 8000bc2:	d427      	bmi.n	8000c14 <__sflush_r+0xb0>
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6062      	str	r2, [r4, #4]
 8000bc8:	6922      	ldr	r2, [r4, #16]
 8000bca:	04d9      	lsls	r1, r3, #19
 8000bcc:	6022      	str	r2, [r4, #0]
 8000bce:	d504      	bpl.n	8000bda <__sflush_r+0x76>
 8000bd0:	1c42      	adds	r2, r0, #1
 8000bd2:	d101      	bne.n	8000bd8 <__sflush_r+0x74>
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	b903      	cbnz	r3, 8000bda <__sflush_r+0x76>
 8000bd8:	6560      	str	r0, [r4, #84]	@ 0x54
 8000bda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000bdc:	602f      	str	r7, [r5, #0]
 8000bde:	b1b9      	cbz	r1, 8000c10 <__sflush_r+0xac>
 8000be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d002      	beq.n	8000bee <__sflush_r+0x8a>
 8000be8:	4628      	mov	r0, r5
 8000bea:	f7ff fec5 	bl	8000978 <_free_r>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bf2:	e00d      	b.n	8000c10 <__sflush_r+0xac>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	47b0      	blx	r6
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	1c50      	adds	r0, r2, #1
 8000bfe:	d1c9      	bne.n	8000b94 <__sflush_r+0x30>
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0c6      	beq.n	8000b94 <__sflush_r+0x30>
 8000c06:	2b1d      	cmp	r3, #29
 8000c08:	d001      	beq.n	8000c0e <__sflush_r+0xaa>
 8000c0a:	2b16      	cmp	r3, #22
 8000c0c:	d11d      	bne.n	8000c4a <__sflush_r+0xe6>
 8000c0e:	602f      	str	r7, [r5, #0]
 8000c10:	2000      	movs	r0, #0
 8000c12:	e021      	b.n	8000c58 <__sflush_r+0xf4>
 8000c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	e01a      	b.n	8000c52 <__sflush_r+0xee>
 8000c1c:	690f      	ldr	r7, [r1, #16]
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d0f6      	beq.n	8000c10 <__sflush_r+0xac>
 8000c22:	0793      	lsls	r3, r2, #30
 8000c24:	bf18      	it	ne
 8000c26:	2300      	movne	r3, #0
 8000c28:	680e      	ldr	r6, [r1, #0]
 8000c2a:	bf08      	it	eq
 8000c2c:	694b      	ldreq	r3, [r1, #20]
 8000c2e:	1bf6      	subs	r6, r6, r7
 8000c30:	600f      	str	r7, [r1, #0]
 8000c32:	608b      	str	r3, [r1, #8]
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	ddeb      	ble.n	8000c10 <__sflush_r+0xac>
 8000c38:	4633      	mov	r3, r6
 8000c3a:	463a      	mov	r2, r7
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	6a21      	ldr	r1, [r4, #32]
 8000c40:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000c44:	47e0      	blx	ip
 8000c46:	2800      	cmp	r0, #0
 8000c48:	dc07      	bgt.n	8000c5a <__sflush_r+0xf6>
 8000c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295
 8000c56:	81a3      	strh	r3, [r4, #12]
 8000c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c5a:	4407      	add	r7, r0
 8000c5c:	1a36      	subs	r6, r6, r0
 8000c5e:	e7e9      	b.n	8000c34 <__sflush_r+0xd0>
 8000c60:	dfbffffe 	.word	0xdfbffffe

08000c64 <_fflush_r>:
 8000c64:	b538      	push	{r3, r4, r5, lr}
 8000c66:	690b      	ldr	r3, [r1, #16]
 8000c68:	4605      	mov	r5, r0
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	b913      	cbnz	r3, 8000c74 <_fflush_r+0x10>
 8000c6e:	2500      	movs	r5, #0
 8000c70:	4628      	mov	r0, r5
 8000c72:	bd38      	pop	{r3, r4, r5, pc}
 8000c74:	b118      	cbz	r0, 8000c7e <_fflush_r+0x1a>
 8000c76:	6a03      	ldr	r3, [r0, #32]
 8000c78:	b90b      	cbnz	r3, 8000c7e <_fflush_r+0x1a>
 8000c7a:	f7ff fc95 	bl	80005a8 <__sinit>
 8000c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f3      	beq.n	8000c6e <_fflush_r+0xa>
 8000c86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000c88:	07d0      	lsls	r0, r2, #31
 8000c8a:	d404      	bmi.n	8000c96 <_fflush_r+0x32>
 8000c8c:	0599      	lsls	r1, r3, #22
 8000c8e:	d402      	bmi.n	8000c96 <_fflush_r+0x32>
 8000c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c92:	f7ff fe6e 	bl	8000972 <__retarget_lock_acquire_recursive>
 8000c96:	4628      	mov	r0, r5
 8000c98:	4621      	mov	r1, r4
 8000c9a:	f7ff ff63 	bl	8000b64 <__sflush_r>
 8000c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ca0:	4605      	mov	r5, r0
 8000ca2:	07da      	lsls	r2, r3, #31
 8000ca4:	d4e4      	bmi.n	8000c70 <_fflush_r+0xc>
 8000ca6:	89a3      	ldrh	r3, [r4, #12]
 8000ca8:	059b      	lsls	r3, r3, #22
 8000caa:	d4e1      	bmi.n	8000c70 <_fflush_r+0xc>
 8000cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cae:	f7ff fe61 	bl	8000974 <__retarget_lock_release_recursive>
 8000cb2:	e7dd      	b.n	8000c70 <_fflush_r+0xc>

08000cb4 <__swhatbuf_r>:
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cbc:	4615      	mov	r5, r2
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	461e      	mov	r6, r3
 8000cc2:	b096      	sub	sp, #88	@ 0x58
 8000cc4:	da0c      	bge.n	8000ce0 <__swhatbuf_r+0x2c>
 8000cc6:	89a3      	ldrh	r3, [r4, #12]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000cce:	bf14      	ite	ne
 8000cd0:	2340      	movne	r3, #64	@ 0x40
 8000cd2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	6031      	str	r1, [r6, #0]
 8000cda:	602b      	str	r3, [r5, #0]
 8000cdc:	b016      	add	sp, #88	@ 0x58
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	466a      	mov	r2, sp
 8000ce2:	f000 f849 	bl	8000d78 <_fstat_r>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	dbed      	blt.n	8000cc6 <__swhatbuf_r+0x12>
 8000cea:	9901      	ldr	r1, [sp, #4]
 8000cec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000cf0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000cf4:	4259      	negs	r1, r3
 8000cf6:	4159      	adcs	r1, r3
 8000cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfc:	e7eb      	b.n	8000cd6 <__swhatbuf_r+0x22>

08000cfe <__smakebuf_r>:
 8000cfe:	898b      	ldrh	r3, [r1, #12]
 8000d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d02:	079d      	lsls	r5, r3, #30
 8000d04:	4606      	mov	r6, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	d507      	bpl.n	8000d1a <__smakebuf_r+0x1c>
 8000d0a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d0e:	6023      	str	r3, [r4, #0]
 8000d10:	6123      	str	r3, [r4, #16]
 8000d12:	2301      	movs	r3, #1
 8000d14:	6163      	str	r3, [r4, #20]
 8000d16:	b003      	add	sp, #12
 8000d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1a:	466a      	mov	r2, sp
 8000d1c:	ab01      	add	r3, sp, #4
 8000d1e:	f7ff ffc9 	bl	8000cb4 <__swhatbuf_r>
 8000d22:	9f00      	ldr	r7, [sp, #0]
 8000d24:	4605      	mov	r5, r0
 8000d26:	4639      	mov	r1, r7
 8000d28:	4630      	mov	r0, r6
 8000d2a:	f7ff fe8f 	bl	8000a4c <_malloc_r>
 8000d2e:	b948      	cbnz	r0, 8000d44 <__smakebuf_r+0x46>
 8000d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d34:	059a      	lsls	r2, r3, #22
 8000d36:	d4ee      	bmi.n	8000d16 <__smakebuf_r+0x18>
 8000d38:	f023 0303 	bic.w	r3, r3, #3
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	81a3      	strh	r3, [r4, #12]
 8000d42:	e7e2      	b.n	8000d0a <__smakebuf_r+0xc>
 8000d44:	89a3      	ldrh	r3, [r4, #12]
 8000d46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4e:	81a3      	strh	r3, [r4, #12]
 8000d50:	9b01      	ldr	r3, [sp, #4]
 8000d52:	6020      	str	r0, [r4, #0]
 8000d54:	b15b      	cbz	r3, 8000d6e <__smakebuf_r+0x70>
 8000d56:	4630      	mov	r0, r6
 8000d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d5c:	f000 f81e 	bl	8000d9c <_isatty_r>
 8000d60:	b128      	cbz	r0, 8000d6e <__smakebuf_r+0x70>
 8000d62:	89a3      	ldrh	r3, [r4, #12]
 8000d64:	f023 0303 	bic.w	r3, r3, #3
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	81a3      	strh	r3, [r4, #12]
 8000d6e:	89a3      	ldrh	r3, [r4, #12]
 8000d70:	431d      	orrs	r5, r3
 8000d72:	81a5      	strh	r5, [r4, #12]
 8000d74:	e7cf      	b.n	8000d16 <__smakebuf_r+0x18>
	...

08000d78 <_fstat_r>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	4d06      	ldr	r5, [pc, #24]	@ (8000d98 <_fstat_r+0x20>)
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	602b      	str	r3, [r5, #0]
 8000d86:	f7ff fafd 	bl	8000384 <_fstat>
 8000d8a:	1c43      	adds	r3, r0, #1
 8000d8c:	d102      	bne.n	8000d94 <_fstat_r+0x1c>
 8000d8e:	682b      	ldr	r3, [r5, #0]
 8000d90:	b103      	cbz	r3, 8000d94 <_fstat_r+0x1c>
 8000d92:	6023      	str	r3, [r4, #0]
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop
 8000d98:	200001b8 	.word	0x200001b8

08000d9c <_isatty_r>:
 8000d9c:	b538      	push	{r3, r4, r5, lr}
 8000d9e:	2300      	movs	r3, #0
 8000da0:	4d05      	ldr	r5, [pc, #20]	@ (8000db8 <_isatty_r+0x1c>)
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	602b      	str	r3, [r5, #0]
 8000da8:	f7ff fafb 	bl	80003a2 <_isatty>
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	d102      	bne.n	8000db6 <_isatty_r+0x1a>
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	b103      	cbz	r3, 8000db6 <_isatty_r+0x1a>
 8000db4:	6023      	str	r3, [r4, #0]
 8000db6:	bd38      	pop	{r3, r4, r5, pc}
 8000db8:	200001b8 	.word	0x200001b8

08000dbc <_sbrk_r>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	4d05      	ldr	r5, [pc, #20]	@ (8000dd8 <_sbrk_r+0x1c>)
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	602b      	str	r3, [r5, #0]
 8000dc8:	f7ff fb02 	bl	80003d0 <_sbrk>
 8000dcc:	1c43      	adds	r3, r0, #1
 8000dce:	d102      	bne.n	8000dd6 <_sbrk_r+0x1a>
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	b103      	cbz	r3, 8000dd6 <_sbrk_r+0x1a>
 8000dd4:	6023      	str	r3, [r4, #0]
 8000dd6:	bd38      	pop	{r3, r4, r5, pc}
 8000dd8:	200001b8 	.word	0x200001b8

08000ddc <_init>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	bf00      	nop
 8000de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de2:	bc08      	pop	{r3}
 8000de4:	469e      	mov	lr, r3
 8000de6:	4770      	bx	lr

08000de8 <_fini>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	bf00      	nop
 8000dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dee:	bc08      	pop	{r3}
 8000df0:	469e      	mov	lr, r3
 8000df2:	4770      	bx	lr


5_UART_Rx_Into_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  0800042c  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  0000142c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000424  08000424  0000142c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000424  0800042c  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000428  08000428  00001428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  0800042c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800042c  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006ec  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002cb  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00001e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000053  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff79  00000000  00000000  00001ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c0d  00000000  00000000  00011e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000541de  00000000  00000000  00012a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000108  00000000  00000000  00066c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00066d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800040c 	.word	0x0800040c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800040c 	.word	0x0800040c

08000170 <uart_init>:
#define SYSTEM_CLOCK 8000000
#define USARTDIV (SYSTEM_CLOCK / BAUD_RATE)


void uart_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
    // 1. Enable GPIOA and USART1 clocks
    RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN);
 8000176:	4b2a      	ldr	r3, [pc, #168]	@ (8000220 <uart_init+0xb0>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a29      	ldr	r2, [pc, #164]	@ (8000220 <uart_init+0xb0>)
 800017c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000180:	f043 0304 	orr.w	r3, r3, #4
 8000184:	6193      	str	r3, [r2, #24]

    // 2.  // Configure PA9 as USART1 TX (Alternate Function Push-Pull)
    GPIOA->CRH &= ~GPIO_CRH_MODE9;           // Clear MODE9
 8000186:	4b27      	ldr	r3, [pc, #156]	@ (8000224 <uart_init+0xb4>)
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	4a26      	ldr	r2, [pc, #152]	@ (8000224 <uart_init+0xb4>)
 800018c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000190:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_MODE9_1;          // Output mode, max speed 2 MHz
 8000192:	4b24      	ldr	r3, [pc, #144]	@ (8000224 <uart_init+0xb4>)
 8000194:	685b      	ldr	r3, [r3, #4]
 8000196:	4a23      	ldr	r2, [pc, #140]	@ (8000224 <uart_init+0xb4>)
 8000198:	f043 0320 	orr.w	r3, r3, #32
 800019c:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF9;            // Clear CNF9
 800019e:	4b21      	ldr	r3, [pc, #132]	@ (8000224 <uart_init+0xb4>)
 80001a0:	685b      	ldr	r3, [r3, #4]
 80001a2:	4a20      	ldr	r2, [pc, #128]	@ (8000224 <uart_init+0xb4>)
 80001a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80001a8:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF9_1;           // Alternate function push-pull
 80001aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000224 <uart_init+0xb4>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000224 <uart_init+0xb4>)
 80001b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80001b4:	6053      	str	r3, [r2, #4]

    // Configure PA10 as USART1 RX (Floating input)
    GPIOA->CRH &= ~GPIO_CRH_MODE10;          // Clear MODE10
 80001b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000224 <uart_init+0xb4>)
 80001b8:	685b      	ldr	r3, [r3, #4]
 80001ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000224 <uart_init+0xb4>)
 80001bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80001c0:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF10;           // Clear CNF10
 80001c2:	4b18      	ldr	r3, [pc, #96]	@ (8000224 <uart_init+0xb4>)
 80001c4:	685b      	ldr	r3, [r3, #4]
 80001c6:	4a17      	ldr	r2, [pc, #92]	@ (8000224 <uart_init+0xb4>)
 80001c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001cc:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0;          // Input with floating
 80001ce:	4b15      	ldr	r3, [pc, #84]	@ (8000224 <uart_init+0xb4>)
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	4a14      	ldr	r2, [pc, #80]	@ (8000224 <uart_init+0xb4>)
 80001d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001d8:	6053      	str	r3, [r2, #4]

    // 3. Configure USART1 baud rate
    //calculate mantissa
    int mantissa = SYSTEM_CLOCK/(16 * BAUD_RATE);
 80001da:	2334      	movs	r3, #52	@ 0x34
 80001dc:	607b      	str	r3, [r7, #4]
    int fraction = (SYSTEM_CLOCK % 16);
 80001de:	2300      	movs	r3, #0
 80001e0:	603b      	str	r3, [r7, #0]
    USART1->BRR = (mantissa<<4U) | (fraction & 0xF);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	011a      	lsls	r2, r3, #4
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	f003 030f 	and.w	r3, r3, #15
 80001ec:	431a      	orrs	r2, r3
 80001ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <uart_init+0xb8>)
 80001f0:	609a      	str	r2, [r3, #8]
   // USART1->BRR = 0x341;

    // 4. Enable USART1 transmitter, USART receiver and enable USART
    USART1->CR1 |= (USART_CR1_TE| USART_CR1_RE);		// Enable Tx Rx
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <uart_init+0xb8>)
 80001f4:	68db      	ldr	r3, [r3, #12]
 80001f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000228 <uart_init+0xb8>)
 80001f8:	f043 030c 	orr.w	r3, r3, #12
 80001fc:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RXNEIE;					// Enable USART IRQ
 80001fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <uart_init+0xb8>)
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	4a09      	ldr	r2, [pc, #36]	@ (8000228 <uart_init+0xb8>)
 8000204:	f043 0320 	orr.w	r3, r3, #32
 8000208:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;						// Enable USART
 800020a:	4b07      	ldr	r3, [pc, #28]	@ (8000228 <uart_init+0xb8>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	4a06      	ldr	r2, [pc, #24]	@ (8000228 <uart_init+0xb8>)
 8000210:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000214:	60d3      	str	r3, [r2, #12]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	40021000 	.word	0x40021000
 8000224:	40010800 	.word	0x40010800
 8000228:	40013800 	.word	0x40013800

0800022c <uart_transmit>:

void uart_transmit(char c)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE))						// Wait until transmit data register is empty
 8000236:	bf00      	nop
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <uart_transmit+0x28>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f9      	beq.n	8000238 <uart_transmit+0xc>
    {
        // Wait for TXE to be set (indicates DR is empty)
    }
    USART1->DR = c;											   // Write the character to the data register
 8000244:	4a03      	ldr	r2, [pc, #12]	@ (8000254 <uart_transmit+0x28>)
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	6053      	str	r3, [r2, #4]
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40013800 	.word	0x40013800

08000258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	db0b      	blt.n	8000282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f003 021f 	and.w	r2, r3, #31
 8000270:	4906      	ldr	r1, [pc, #24]	@ (800028c <__NVIC_EnableIRQ+0x34>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	2001      	movs	r0, #1
 800027a:	fa00 f202 	lsl.w	r2, r0, r2
 800027e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100

08000290 <USART1_IRQHandler>:
volatile uint32_t data_index = 0;


// USART1 IRQ Handler
void USART1_IRQHandler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE)								// Check if RXNE (Read data register not empty) flag is set
 8000296:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <USART1_IRQHandler+0x50>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f003 0320 	and.w	r3, r3, #32
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <USART1_IRQHandler+0x46>
    	{
        	uint8_t received_char = USART1->DR;					// Read received char from DR register
 80002a2:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <USART1_IRQHandler+0x50>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	71fb      	strb	r3, [r7, #7]
        	uart_transmit(received_char);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffbe 	bl	800022c <uart_transmit>
        	if (data_index < BUFFER_SIZE)						// Store the byte in Data_rec array if there is space
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <USART1_IRQHandler+0x54>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	d807      	bhi.n	80002c8 <USART1_IRQHandler+0x38>
        			Data_rec[data_index++] = received_char;
 80002b8:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <USART1_IRQHandler+0x54>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	4909      	ldr	r1, [pc, #36]	@ (80002e4 <USART1_IRQHandler+0x54>)
 80002c0:	600a      	str	r2, [r1, #0]
 80002c2:	4909      	ldr	r1, [pc, #36]	@ (80002e8 <USART1_IRQHandler+0x58>)
 80002c4:	79fa      	ldrb	r2, [r7, #7]
 80002c6:	54ca      	strb	r2, [r1, r3]
        	if (data_index > BUFFER_SIZE)
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <USART1_IRQHandler+0x54>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b10      	cmp	r3, #16
 80002ce:	d902      	bls.n	80002d6 <USART1_IRQHandler+0x46>
        			data_index = 0;								//Point to start of array again
 80002d0:	4b04      	ldr	r3, [pc, #16]	@ (80002e4 <USART1_IRQHandler+0x54>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
    	}
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40013800 	.word	0x40013800
 80002e4:	2000002c 	.word	0x2000002c
 80002e8:	2000001c 	.word	0x2000001c

080002ec <main>:




int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
    uart_init();       											// Initialize USART1
 80002f2:	f7ff ff3d 	bl	8000170 <uart_init>
    NVIC_EnableIRQ(USART1_IRQn);								// Initialize IRQ for USART
 80002f6:	2025      	movs	r0, #37	@ 0x25
 80002f8:	f7ff ffae 	bl	8000258 <__NVIC_EnableIRQ>

  while (1)
    {
  	if(data_index == BUFFER_SIZE)
 80002fc:	4b19      	ldr	r3, [pc, #100]	@ (8000364 <main+0x78>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b10      	cmp	r3, #16
 8000302:	d1fb      	bne.n	80002fc <main+0x10>
    	{
  			while (!(USART1->SR & USART_SR_TXE));  		// Wait until TX buffer is empty
 8000304:	bf00      	nop
 8000306:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <main+0x7c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <main+0x1a>
  		    uart_transmit('\n');  						// Go to new line on screen
 8000312:	200a      	movs	r0, #10
 8000314:	f7ff ff8a 	bl	800022c <uart_transmit>

    		for (int i = 0; i < BUFFER_SIZE; i++)
 8000318:	2300      	movs	r3, #0
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	e010      	b.n	8000340 <main+0x54>
    		{
    			while (!(USART1->SR & USART_SR_TXE));  	// Wait until TX buffer is empty
 800031e:	bf00      	nop
 8000320:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <main+0x7c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0f9      	beq.n	8000320 <main+0x34>
    			uart_transmit(Data_rec[i]);  			// Transmit Array element
 800032c:	4a0f      	ldr	r2, [pc, #60]	@ (800036c <main+0x80>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4413      	add	r3, r2
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff79 	bl	800022c <uart_transmit>
    		for (int i = 0; i < BUFFER_SIZE; i++)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3301      	adds	r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b0f      	cmp	r3, #15
 8000344:	ddeb      	ble.n	800031e <main+0x32>
    		}
    		while (!(USART1->SR & USART_SR_TXE));  		// Wait until TX buffer is empty
 8000346:	bf00      	nop
 8000348:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <main+0x7c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0f9      	beq.n	8000348 <main+0x5c>
    		uart_transmit('\n'); 						//Transmit new line
 8000354:	200a      	movs	r0, #10
 8000356:	f7ff ff69 	bl	800022c <uart_transmit>
    		//for (int i = 0; i < 100000; i++);  			// Simple delay
    		data_index = 0;
 800035a:	4b02      	ldr	r3, [pc, #8]	@ (8000364 <main+0x78>)
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
  	if(data_index == BUFFER_SIZE)
 8000360:	e7cc      	b.n	80002fc <main+0x10>
 8000362:	bf00      	nop
 8000364:	2000002c 	.word	0x2000002c
 8000368:	40013800 	.word	0x40013800
 800036c:	2000001c 	.word	0x2000001c

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000374:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	@ (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	@ (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 f811 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ffa3 	bl	80002ec <main>

080003a6 <LoopForever>:

LoopForever:
  b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	20000030 	.word	0x20000030

080003c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC1_2_IRQHandler>
	...

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	2600      	movs	r6, #0
 80003c8:	4d0c      	ldr	r5, [pc, #48]	@ (80003fc <__libc_init_array+0x38>)
 80003ca:	4c0d      	ldr	r4, [pc, #52]	@ (8000400 <__libc_init_array+0x3c>)
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	42a6      	cmp	r6, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	f000 f81a 	bl	800040c <_init>
 80003d8:	2600      	movs	r6, #0
 80003da:	4d0a      	ldr	r5, [pc, #40]	@ (8000404 <__libc_init_array+0x40>)
 80003dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000408 <__libc_init_array+0x44>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	42a6      	cmp	r6, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ec:	4798      	blx	r3
 80003ee:	3601      	adds	r6, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f6:	4798      	blx	r3
 80003f8:	3601      	adds	r6, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

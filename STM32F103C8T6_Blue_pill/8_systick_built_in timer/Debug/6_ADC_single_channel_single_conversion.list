
6_ADC_single_channel_single_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001234  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001364  08001364  00002364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013ac  080013ac  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  080013ac  080013ac  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013ac  080013ac  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013ac  080013ac  000023ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013b0  080013b0  000023b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080013b4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001410  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001410  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e39  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000560  00000000  00000000  00003ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00004420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f7  00000000  00000000  00004590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d09  00000000  00000000  00004687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020bd  00000000  00000000  00016390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000599fc  00000000  00000000  0001844d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00071e49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bf4  00000000  00000000  00071e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00072a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	0800134c 	.word	0x0800134c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	0800134c 	.word	0x0800134c

08000170 <pa1_adc_init>:
#define CR2_ADON (1U<<0) //bit 0 that turns on and off ADC
#define start (1U<<22) //Bit 22 of ADC_CR2 is software start for conversion
#define SR_EOC (1U<<1) //End of conversion bit

void pa1_adc_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= GPIOAEN; //Enable clock access to GPIOA port
 8000174:	4b20      	ldr	r3, [pc, #128]	@ (80001f8 <pa1_adc_init+0x88>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a1f      	ldr	r2, [pc, #124]	@ (80001f8 <pa1_adc_init+0x88>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= ADC1EN;//Enable clock access to ADC
 8000180:	4b1d      	ldr	r3, [pc, #116]	@ (80001f8 <pa1_adc_init+0x88>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a1c      	ldr	r2, [pc, #112]	@ (80001f8 <pa1_adc_init+0x88>)
 8000186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800018a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &=~(1U<<7);//Configure ADC GPIO PA1 pin 11 as analog pin MODE input 0:0  CNF analog 0:0
 800018c:	4b1b      	ldr	r3, [pc, #108]	@ (80001fc <pa1_adc_init+0x8c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a1a      	ldr	r2, [pc, #104]	@ (80001fc <pa1_adc_init+0x8c>)
 8000192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000196:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<6);
 8000198:	4b18      	ldr	r3, [pc, #96]	@ (80001fc <pa1_adc_init+0x8c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a17      	ldr	r2, [pc, #92]	@ (80001fc <pa1_adc_init+0x8c>)
 800019e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80001a2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<5);
 80001a4:	4b15      	ldr	r3, [pc, #84]	@ (80001fc <pa1_adc_init+0x8c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a14      	ldr	r2, [pc, #80]	@ (80001fc <pa1_adc_init+0x8c>)
 80001aa:	f023 0320 	bic.w	r3, r3, #32
 80001ae:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~(1U<<4);
 80001b0:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <pa1_adc_init+0x8c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a11      	ldr	r2, [pc, #68]	@ (80001fc <pa1_adc_init+0x8c>)
 80001b6:	f023 0310 	bic.w	r3, r3, #16
 80001ba:	6013      	str	r3, [r2, #0]

	/*configure ADC peripheral*/
	//Enable the ADC module
	ADC1->CR2 |= CR2_ADON;  //ADC_CR2 bit 0 ADON enables and disables ADC
 80001bc:	4b10      	ldr	r3, [pc, #64]	@ (8000200 <pa1_adc_init+0x90>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000200 <pa1_adc_init+0x90>)
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2 |= ADC_SMPR2_SMP1;       // Set sampling time for channel 1 to 239.5 cycles (for accuracy)
 80001c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000200 <pa1_adc_init+0x90>)
 80001ca:	691b      	ldr	r3, [r3, #16]
 80001cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000200 <pa1_adc_init+0x90>)
 80001ce:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80001d2:	6113      	str	r3, [r2, #16]
	// Calibration
	ADC1->CR2 |= ADC_CR2_CAL;            // Start calibration
 80001d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000200 <pa1_adc_init+0x90>)
 80001d6:	689b      	ldr	r3, [r3, #8]
 80001d8:	4a09      	ldr	r2, [pc, #36]	@ (8000200 <pa1_adc_init+0x90>)
 80001da:	f043 0304 	orr.w	r3, r3, #4
 80001de:	6093      	str	r3, [r2, #8]
	while (ADC1->CR2 & ADC_CR2_CAL);     // Wait for calibration to complete
 80001e0:	bf00      	nop
 80001e2:	4b07      	ldr	r3, [pc, #28]	@ (8000200 <pa1_adc_init+0x90>)
 80001e4:	689b      	ldr	r3, [r3, #8]
 80001e6:	f003 0304 	and.w	r3, r3, #4
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d1f9      	bne.n	80001e2 <pa1_adc_init+0x72>
	//Configure ADC parameters



}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40021000 	.word	0x40021000
 80001fc:	40010800 	.word	0x40010800
 8000200:	40012400 	.word	0x40012400

08000204 <Start_conversion>:



void Start_conversion(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	//Start ADC conversion
	ADC1->CR2 |= start;
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <Start_conversion+0x18>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a03      	ldr	r2, [pc, #12]	@ (800021c <Start_conversion+0x18>)
 800020e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000212:	6093      	str	r3, [r2, #8]
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40012400 	.word	0x40012400

08000220 <adc_read>:


uint32_t adc_read(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
		second = ch2 SQ2 would be 2
		third = ch3  SQ3 would be set to 3
		As we are using only one channel, channel 1.   SQ1 is set to 1
		*/
		//Conversion sequence start
	ADC1->SQR3 = ADC_CH1;//Channel sequence order in which samples are taken
 8000224:	4b0a      	ldr	r3, [pc, #40]	@ (8000250 <adc_read+0x30>)
 8000226:	2201      	movs	r2, #1
 8000228:	635a      	str	r2, [r3, #52]	@ 0x34
	// Start conversion
	ADC1->CR2 |= ADC_CR2_ADON;           // Start the ADC conversion
 800022a:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <adc_read+0x30>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	4a08      	ldr	r2, [pc, #32]	@ (8000250 <adc_read+0x30>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6093      	str	r3, [r2, #8]
	//wait for conversion to finish
	//go to status register and watch conversion complete flag ADC_SR bit 1 EOC
	while (!(ADC1->SR & SR_EOC)){}
 8000236:	bf00      	nop
 8000238:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <adc_read+0x30>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f003 0302 	and.w	r3, r3, #2
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f9      	beq.n	8000238 <adc_read+0x18>
	//read converted result
	return ADC1->DR;
 8000244:	4b02      	ldr	r3, [pc, #8]	@ (8000250 <adc_read+0x30>)
 8000246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000248:	4618      	mov	r0, r3
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	40012400 	.word	0x40012400

08000254 <USART1_Init>:
#include "stm32f103xb.h"


// Initialize USART1 for 9600 baud, 8N1 configuration
void USART1_Init(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and USART1
    RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN);
 8000258:	4b19      	ldr	r3, [pc, #100]	@ (80002c0 <USART1_Init+0x6c>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a18      	ldr	r2, [pc, #96]	@ (80002c0 <USART1_Init+0x6c>)
 800025e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	6193      	str	r3, [r2, #24]

    // Configure PA9 (TX) as Alternate function push-pull
    GPIOA->CRH &= ~(1U<<4);
 8000268:	4b16      	ldr	r3, [pc, #88]	@ (80002c4 <USART1_Init+0x70>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	4a15      	ldr	r2, [pc, #84]	@ (80002c4 <USART1_Init+0x70>)
 800026e:	f023 0310 	bic.w	r3, r3, #16
 8000272:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (1U<<5);      // Output mode, max speed 2 MHz
 8000274:	4b13      	ldr	r3, [pc, #76]	@ (80002c4 <USART1_Init+0x70>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a12      	ldr	r2, [pc, #72]	@ (80002c4 <USART1_Init+0x70>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~(1U<<6);
 8000280:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <USART1_Init+0x70>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <USART1_Init+0x70>)
 8000286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800028a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (1U<<7);       // Alternate function push-pull
 800028c:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <USART1_Init+0x70>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4a0c      	ldr	r2, [pc, #48]	@ (80002c4 <USART1_Init+0x70>)
 8000292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000296:	6053      	str	r3, [r2, #4]
    //Div fraction = .086  then * by 16 for over sampling => 1.328
    //converting mantissa to hex 52 => 0x34
    //USARTDIV value = 0x341

    // Configure USART1 for 9600 baud rate
    USART1->BRR = 0x341;  // Assuming a clock of 8 MHz
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <USART1_Init+0x74>)
 800029a:	f240 3241 	movw	r2, #833	@ 0x341
 800029e:	609a      	str	r2, [r3, #8]

    // Enable USART1 & TX
    USART1->CR1 |= USART_CR1_UE;    // USART enable
 80002a0:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <USART1_Init+0x74>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a08      	ldr	r2, [pc, #32]	@ (80002c8 <USART1_Init+0x74>)
 80002a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002aa:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_TE;    // Transmit enable
 80002ac:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <USART1_Init+0x74>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a05      	ldr	r2, [pc, #20]	@ (80002c8 <USART1_Init+0x74>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	60d3      	str	r3, [r2, #12]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010800 	.word	0x40010800
 80002c8:	40013800 	.word	0x40013800

080002cc <UART_write>:

void UART_write(int ch)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 80002d4:	bf00      	nop
 80002d6:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <UART_write+0x28>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <UART_write+0xa>
	USART1->DR = ch & 0xff;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a03      	ldr	r2, [pc, #12]	@ (80002f4 <UART_write+0x28>)
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	6053      	str	r3, [r2, #4]

}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	40013800 	.word	0x40013800

080002f8 <__io_putchar>:
#include "ADC.h"
#include "USART.h"


int __io_putchar(int ch)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	UART_write(ch);
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f7ff ffe3 	bl	80002cc <UART_write>
	return ch;
 8000306:	687b      	ldr	r3, [r7, #4]
}
 8000308:	4618      	mov	r0, r3
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <main>:


uint32_t sensor_value;

int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	USART1_Init();
 8000314:	f7ff ff9e 	bl	8000254 <USART1_Init>
	pa1_adc_init();
 8000318:	f7ff ff2a 	bl	8000170 <pa1_adc_init>


	while(1)
	{
		Start_conversion();
 800031c:	f7ff ff72 	bl	8000204 <Start_conversion>
		sensor_value = adc_read();
 8000320:	f7ff ff7e 	bl	8000220 <adc_read>
 8000324:	4603      	mov	r3, r0
 8000326:	4a05      	ldr	r2, [pc, #20]	@ (800033c <main+0x2c>)
 8000328:	6013      	str	r3, [r2, #0]
		printf("Sensor value : %d \n", (int)sensor_value);//as sensor value is uint32_t it will throw an error so type cast sensor value to int.
 800032a:	4b04      	ldr	r3, [pc, #16]	@ (800033c <main+0x2c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4619      	mov	r1, r3
 8000330:	4803      	ldr	r0, [pc, #12]	@ (8000340 <main+0x30>)
 8000332:	f000 f993 	bl	800065c <iprintf>
		Start_conversion();
 8000336:	bf00      	nop
 8000338:	e7f0      	b.n	800031c <main+0xc>
 800033a:	bf00      	nop
 800033c:	20000078 	.word	0x20000078
 8000340:	08001364 	.word	0x08001364

08000344 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]
 8000354:	e00a      	b.n	800036c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000356:	f3af 8000 	nop.w
 800035a:	4601      	mov	r1, r0
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	1c5a      	adds	r2, r3, #1
 8000360:	60ba      	str	r2, [r7, #8]
 8000362:	b2ca      	uxtb	r2, r1
 8000364:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	3301      	adds	r3, #1
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	429a      	cmp	r2, r3
 8000372:	dbf0      	blt.n	8000356 <_read+0x12>
  }

  return len;
 8000374:	687b      	ldr	r3, [r7, #4]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3718      	adds	r7, #24
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	b086      	sub	sp, #24
 8000382:	af00      	add	r7, sp, #0
 8000384:	60f8      	str	r0, [r7, #12]
 8000386:	60b9      	str	r1, [r7, #8]
 8000388:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
 800038e:	e009      	b.n	80003a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	1c5a      	adds	r2, r3, #1
 8000394:	60ba      	str	r2, [r7, #8]
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ffad 	bl	80002f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dbf1      	blt.n	8000390 <_write+0x12>
  }
  return len;
 80003ac:	687b      	ldr	r3, [r7, #4]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <_close>:

int _close(int file)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003dc:	605a      	str	r2, [r3, #4]
  return 0;
 80003de:	2300      	movs	r3, #0
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr

080003ea <_isatty>:

int _isatty(int file)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003f2:	2301      	movs	r3, #1
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003fe:	b480      	push	{r7}
 8000400:	b085      	sub	sp, #20
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800040a:	2300      	movs	r3, #0
}
 800040c:	4618      	mov	r0, r3
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
	...

08000418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000420:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <_sbrk+0x5c>)
 8000422:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <_sbrk+0x60>)
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800042c:	4b13      	ldr	r3, [pc, #76]	@ (800047c <_sbrk+0x64>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000434:	4b11      	ldr	r3, [pc, #68]	@ (800047c <_sbrk+0x64>)
 8000436:	4a12      	ldr	r2, [pc, #72]	@ (8000480 <_sbrk+0x68>)
 8000438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800043a:	4b10      	ldr	r3, [pc, #64]	@ (800047c <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	693a      	ldr	r2, [r7, #16]
 8000444:	429a      	cmp	r2, r3
 8000446:	d207      	bcs.n	8000458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000448:	f000 f9ac 	bl	80007a4 <__errno>
 800044c:	4603      	mov	r3, r0
 800044e:	220c      	movs	r2, #12
 8000450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000452:	f04f 33ff 	mov.w	r3, #4294967295
 8000456:	e009      	b.n	800046c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000458:	4b08      	ldr	r3, [pc, #32]	@ (800047c <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800045e:	4b07      	ldr	r3, [pc, #28]	@ (800047c <_sbrk+0x64>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a05      	ldr	r2, [pc, #20]	@ (800047c <_sbrk+0x64>)
 8000468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20005000 	.word	0x20005000
 8000478:	00000400 	.word	0x00000400
 800047c:	2000007c 	.word	0x2000007c
 8000480:	200001d0 	.word	0x200001d0

08000484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000484:	480d      	ldr	r0, [pc, #52]	@ (80004bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000486:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000488:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800048c:	480c      	ldr	r0, [pc, #48]	@ (80004c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800048e:	490d      	ldr	r1, [pc, #52]	@ (80004c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000490:	4a0d      	ldr	r2, [pc, #52]	@ (80004c8 <LoopForever+0xe>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0a      	ldr	r2, [pc, #40]	@ (80004cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a4:	4c0a      	ldr	r4, [pc, #40]	@ (80004d0 <LoopForever+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b2:	f000 f97d 	bl	80007b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b6:	f7ff ff2b 	bl	8000310 <main>

080004ba <LoopForever>:

LoopForever:
  b LoopForever
 80004ba:	e7fe      	b.n	80004ba <LoopForever>
  ldr   r0, =_estack
 80004bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004c8:	080013b4 	.word	0x080013b4
  ldr r2, =_sbss
 80004cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80004d0:	200001cc 	.word	0x200001cc

080004d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d4:	e7fe      	b.n	80004d4 <ADC1_2_IRQHandler>
	...

080004d8 <std>:
 80004d8:	2300      	movs	r3, #0
 80004da:	b510      	push	{r4, lr}
 80004dc:	4604      	mov	r4, r0
 80004de:	e9c0 3300 	strd	r3, r3, [r0]
 80004e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004e6:	6083      	str	r3, [r0, #8]
 80004e8:	8181      	strh	r1, [r0, #12]
 80004ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80004ec:	81c2      	strh	r2, [r0, #14]
 80004ee:	6183      	str	r3, [r0, #24]
 80004f0:	4619      	mov	r1, r3
 80004f2:	2208      	movs	r2, #8
 80004f4:	305c      	adds	r0, #92	@ 0x5c
 80004f6:	f000 f906 	bl	8000706 <memset>
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <std+0x58>)
 80004fc:	6224      	str	r4, [r4, #32]
 80004fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <std+0x5c>)
 8000502:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <std+0x60>)
 8000506:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <std+0x64>)
 800050a:	6323      	str	r3, [r4, #48]	@ 0x30
 800050c:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <std+0x68>)
 800050e:	429c      	cmp	r4, r3
 8000510:	d006      	beq.n	8000520 <std+0x48>
 8000512:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000516:	4294      	cmp	r4, r2
 8000518:	d002      	beq.n	8000520 <std+0x48>
 800051a:	33d0      	adds	r3, #208	@ 0xd0
 800051c:	429c      	cmp	r4, r3
 800051e:	d105      	bne.n	800052c <std+0x54>
 8000520:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000528:	f000 b966 	b.w	80007f8 <__retarget_lock_init_recursive>
 800052c:	bd10      	pop	{r4, pc}
 800052e:	bf00      	nop
 8000530:	08000681 	.word	0x08000681
 8000534:	080006a3 	.word	0x080006a3
 8000538:	080006db 	.word	0x080006db
 800053c:	080006ff 	.word	0x080006ff
 8000540:	20000080 	.word	0x20000080

08000544 <stdio_exit_handler>:
 8000544:	4a02      	ldr	r2, [pc, #8]	@ (8000550 <stdio_exit_handler+0xc>)
 8000546:	4903      	ldr	r1, [pc, #12]	@ (8000554 <stdio_exit_handler+0x10>)
 8000548:	4803      	ldr	r0, [pc, #12]	@ (8000558 <stdio_exit_handler+0x14>)
 800054a:	f000 b869 	b.w	8000620 <_fwalk_sglue>
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	08001091 	.word	0x08001091
 8000558:	20000010 	.word	0x20000010

0800055c <cleanup_stdio>:
 800055c:	6841      	ldr	r1, [r0, #4]
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <cleanup_stdio+0x34>)
 8000560:	b510      	push	{r4, lr}
 8000562:	4299      	cmp	r1, r3
 8000564:	4604      	mov	r4, r0
 8000566:	d001      	beq.n	800056c <cleanup_stdio+0x10>
 8000568:	f000 fd92 	bl	8001090 <_fflush_r>
 800056c:	68a1      	ldr	r1, [r4, #8]
 800056e:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <cleanup_stdio+0x38>)
 8000570:	4299      	cmp	r1, r3
 8000572:	d002      	beq.n	800057a <cleanup_stdio+0x1e>
 8000574:	4620      	mov	r0, r4
 8000576:	f000 fd8b 	bl	8001090 <_fflush_r>
 800057a:	68e1      	ldr	r1, [r4, #12]
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <cleanup_stdio+0x3c>)
 800057e:	4299      	cmp	r1, r3
 8000580:	d004      	beq.n	800058c <cleanup_stdio+0x30>
 8000582:	4620      	mov	r0, r4
 8000584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000588:	f000 bd82 	b.w	8001090 <_fflush_r>
 800058c:	bd10      	pop	{r4, pc}
 800058e:	bf00      	nop
 8000590:	20000080 	.word	0x20000080
 8000594:	200000e8 	.word	0x200000e8
 8000598:	20000150 	.word	0x20000150

0800059c <global_stdio_init.part.0>:
 800059c:	b510      	push	{r4, lr}
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <global_stdio_init.part.0+0x30>)
 80005a0:	4c0b      	ldr	r4, [pc, #44]	@ (80005d0 <global_stdio_init.part.0+0x34>)
 80005a2:	4a0c      	ldr	r2, [pc, #48]	@ (80005d4 <global_stdio_init.part.0+0x38>)
 80005a4:	4620      	mov	r0, r4
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	2104      	movs	r1, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	f7ff ff94 	bl	80004d8 <std>
 80005b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80005b4:	2201      	movs	r2, #1
 80005b6:	2109      	movs	r1, #9
 80005b8:	f7ff ff8e 	bl	80004d8 <std>
 80005bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80005c0:	2202      	movs	r2, #2
 80005c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005c6:	2112      	movs	r1, #18
 80005c8:	f7ff bf86 	b.w	80004d8 <std>
 80005cc:	200001b8 	.word	0x200001b8
 80005d0:	20000080 	.word	0x20000080
 80005d4:	08000545 	.word	0x08000545

080005d8 <__sfp_lock_acquire>:
 80005d8:	4801      	ldr	r0, [pc, #4]	@ (80005e0 <__sfp_lock_acquire+0x8>)
 80005da:	f000 b90e 	b.w	80007fa <__retarget_lock_acquire_recursive>
 80005de:	bf00      	nop
 80005e0:	200001c1 	.word	0x200001c1

080005e4 <__sfp_lock_release>:
 80005e4:	4801      	ldr	r0, [pc, #4]	@ (80005ec <__sfp_lock_release+0x8>)
 80005e6:	f000 b909 	b.w	80007fc <__retarget_lock_release_recursive>
 80005ea:	bf00      	nop
 80005ec:	200001c1 	.word	0x200001c1

080005f0 <__sinit>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	4604      	mov	r4, r0
 80005f4:	f7ff fff0 	bl	80005d8 <__sfp_lock_acquire>
 80005f8:	6a23      	ldr	r3, [r4, #32]
 80005fa:	b11b      	cbz	r3, 8000604 <__sinit+0x14>
 80005fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000600:	f7ff bff0 	b.w	80005e4 <__sfp_lock_release>
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <__sinit+0x28>)
 8000606:	6223      	str	r3, [r4, #32]
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <__sinit+0x2c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f5      	bne.n	80005fc <__sinit+0xc>
 8000610:	f7ff ffc4 	bl	800059c <global_stdio_init.part.0>
 8000614:	e7f2      	b.n	80005fc <__sinit+0xc>
 8000616:	bf00      	nop
 8000618:	0800055d 	.word	0x0800055d
 800061c:	200001b8 	.word	0x200001b8

08000620 <_fwalk_sglue>:
 8000620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000624:	4607      	mov	r7, r0
 8000626:	4688      	mov	r8, r1
 8000628:	4614      	mov	r4, r2
 800062a:	2600      	movs	r6, #0
 800062c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000630:	f1b9 0901 	subs.w	r9, r9, #1
 8000634:	d505      	bpl.n	8000642 <_fwalk_sglue+0x22>
 8000636:	6824      	ldr	r4, [r4, #0]
 8000638:	2c00      	cmp	r4, #0
 800063a:	d1f7      	bne.n	800062c <_fwalk_sglue+0xc>
 800063c:	4630      	mov	r0, r6
 800063e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000642:	89ab      	ldrh	r3, [r5, #12]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d907      	bls.n	8000658 <_fwalk_sglue+0x38>
 8000648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800064c:	3301      	adds	r3, #1
 800064e:	d003      	beq.n	8000658 <_fwalk_sglue+0x38>
 8000650:	4629      	mov	r1, r5
 8000652:	4638      	mov	r0, r7
 8000654:	47c0      	blx	r8
 8000656:	4306      	orrs	r6, r0
 8000658:	3568      	adds	r5, #104	@ 0x68
 800065a:	e7e9      	b.n	8000630 <_fwalk_sglue+0x10>

0800065c <iprintf>:
 800065c:	b40f      	push	{r0, r1, r2, r3}
 800065e:	b507      	push	{r0, r1, r2, lr}
 8000660:	4906      	ldr	r1, [pc, #24]	@ (800067c <iprintf+0x20>)
 8000662:	ab04      	add	r3, sp, #16
 8000664:	6808      	ldr	r0, [r1, #0]
 8000666:	f853 2b04 	ldr.w	r2, [r3], #4
 800066a:	6881      	ldr	r1, [r0, #8]
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	f000 f9e5 	bl	8000a3c <_vfiprintf_r>
 8000672:	b003      	add	sp, #12
 8000674:	f85d eb04 	ldr.w	lr, [sp], #4
 8000678:	b004      	add	sp, #16
 800067a:	4770      	bx	lr
 800067c:	2000000c 	.word	0x2000000c

08000680 <__sread>:
 8000680:	b510      	push	{r4, lr}
 8000682:	460c      	mov	r4, r1
 8000684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000688:	f000 f868 	bl	800075c <_read_r>
 800068c:	2800      	cmp	r0, #0
 800068e:	bfab      	itete	ge
 8000690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000692:	89a3      	ldrhlt	r3, [r4, #12]
 8000694:	181b      	addge	r3, r3, r0
 8000696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800069a:	bfac      	ite	ge
 800069c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800069e:	81a3      	strhlt	r3, [r4, #12]
 80006a0:	bd10      	pop	{r4, pc}

080006a2 <__swrite>:
 80006a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006a6:	461f      	mov	r7, r3
 80006a8:	898b      	ldrh	r3, [r1, #12]
 80006aa:	4605      	mov	r5, r0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	460c      	mov	r4, r1
 80006b0:	4616      	mov	r6, r2
 80006b2:	d505      	bpl.n	80006c0 <__swrite+0x1e>
 80006b4:	2302      	movs	r3, #2
 80006b6:	2200      	movs	r2, #0
 80006b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006bc:	f000 f83c 	bl	8000738 <_lseek_r>
 80006c0:	89a3      	ldrh	r3, [r4, #12]
 80006c2:	4632      	mov	r2, r6
 80006c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006c8:	81a3      	strh	r3, [r4, #12]
 80006ca:	4628      	mov	r0, r5
 80006cc:	463b      	mov	r3, r7
 80006ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80006d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80006d6:	f000 b853 	b.w	8000780 <_write_r>

080006da <__sseek>:
 80006da:	b510      	push	{r4, lr}
 80006dc:	460c      	mov	r4, r1
 80006de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006e2:	f000 f829 	bl	8000738 <_lseek_r>
 80006e6:	1c43      	adds	r3, r0, #1
 80006e8:	89a3      	ldrh	r3, [r4, #12]
 80006ea:	bf15      	itete	ne
 80006ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80006ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80006f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80006f6:	81a3      	strheq	r3, [r4, #12]
 80006f8:	bf18      	it	ne
 80006fa:	81a3      	strhne	r3, [r4, #12]
 80006fc:	bd10      	pop	{r4, pc}

080006fe <__sclose>:
 80006fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000702:	f000 b809 	b.w	8000718 <_close_r>

08000706 <memset>:
 8000706:	4603      	mov	r3, r0
 8000708:	4402      	add	r2, r0
 800070a:	4293      	cmp	r3, r2
 800070c:	d100      	bne.n	8000710 <memset+0xa>
 800070e:	4770      	bx	lr
 8000710:	f803 1b01 	strb.w	r1, [r3], #1
 8000714:	e7f9      	b.n	800070a <memset+0x4>
	...

08000718 <_close_r>:
 8000718:	b538      	push	{r3, r4, r5, lr}
 800071a:	2300      	movs	r3, #0
 800071c:	4d05      	ldr	r5, [pc, #20]	@ (8000734 <_close_r+0x1c>)
 800071e:	4604      	mov	r4, r0
 8000720:	4608      	mov	r0, r1
 8000722:	602b      	str	r3, [r5, #0]
 8000724:	f7ff fe47 	bl	80003b6 <_close>
 8000728:	1c43      	adds	r3, r0, #1
 800072a:	d102      	bne.n	8000732 <_close_r+0x1a>
 800072c:	682b      	ldr	r3, [r5, #0]
 800072e:	b103      	cbz	r3, 8000732 <_close_r+0x1a>
 8000730:	6023      	str	r3, [r4, #0]
 8000732:	bd38      	pop	{r3, r4, r5, pc}
 8000734:	200001bc 	.word	0x200001bc

08000738 <_lseek_r>:
 8000738:	b538      	push	{r3, r4, r5, lr}
 800073a:	4604      	mov	r4, r0
 800073c:	4608      	mov	r0, r1
 800073e:	4611      	mov	r1, r2
 8000740:	2200      	movs	r2, #0
 8000742:	4d05      	ldr	r5, [pc, #20]	@ (8000758 <_lseek_r+0x20>)
 8000744:	602a      	str	r2, [r5, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	f7ff fe59 	bl	80003fe <_lseek>
 800074c:	1c43      	adds	r3, r0, #1
 800074e:	d102      	bne.n	8000756 <_lseek_r+0x1e>
 8000750:	682b      	ldr	r3, [r5, #0]
 8000752:	b103      	cbz	r3, 8000756 <_lseek_r+0x1e>
 8000754:	6023      	str	r3, [r4, #0]
 8000756:	bd38      	pop	{r3, r4, r5, pc}
 8000758:	200001bc 	.word	0x200001bc

0800075c <_read_r>:
 800075c:	b538      	push	{r3, r4, r5, lr}
 800075e:	4604      	mov	r4, r0
 8000760:	4608      	mov	r0, r1
 8000762:	4611      	mov	r1, r2
 8000764:	2200      	movs	r2, #0
 8000766:	4d05      	ldr	r5, [pc, #20]	@ (800077c <_read_r+0x20>)
 8000768:	602a      	str	r2, [r5, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	f7ff fdea 	bl	8000344 <_read>
 8000770:	1c43      	adds	r3, r0, #1
 8000772:	d102      	bne.n	800077a <_read_r+0x1e>
 8000774:	682b      	ldr	r3, [r5, #0]
 8000776:	b103      	cbz	r3, 800077a <_read_r+0x1e>
 8000778:	6023      	str	r3, [r4, #0]
 800077a:	bd38      	pop	{r3, r4, r5, pc}
 800077c:	200001bc 	.word	0x200001bc

08000780 <_write_r>:
 8000780:	b538      	push	{r3, r4, r5, lr}
 8000782:	4604      	mov	r4, r0
 8000784:	4608      	mov	r0, r1
 8000786:	4611      	mov	r1, r2
 8000788:	2200      	movs	r2, #0
 800078a:	4d05      	ldr	r5, [pc, #20]	@ (80007a0 <_write_r+0x20>)
 800078c:	602a      	str	r2, [r5, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	f7ff fdf5 	bl	800037e <_write>
 8000794:	1c43      	adds	r3, r0, #1
 8000796:	d102      	bne.n	800079e <_write_r+0x1e>
 8000798:	682b      	ldr	r3, [r5, #0]
 800079a:	b103      	cbz	r3, 800079e <_write_r+0x1e>
 800079c:	6023      	str	r3, [r4, #0]
 800079e:	bd38      	pop	{r3, r4, r5, pc}
 80007a0:	200001bc 	.word	0x200001bc

080007a4 <__errno>:
 80007a4:	4b01      	ldr	r3, [pc, #4]	@ (80007ac <__errno+0x8>)
 80007a6:	6818      	ldr	r0, [r3, #0]
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000000c 	.word	0x2000000c

080007b0 <__libc_init_array>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	2600      	movs	r6, #0
 80007b4:	4d0c      	ldr	r5, [pc, #48]	@ (80007e8 <__libc_init_array+0x38>)
 80007b6:	4c0d      	ldr	r4, [pc, #52]	@ (80007ec <__libc_init_array+0x3c>)
 80007b8:	1b64      	subs	r4, r4, r5
 80007ba:	10a4      	asrs	r4, r4, #2
 80007bc:	42a6      	cmp	r6, r4
 80007be:	d109      	bne.n	80007d4 <__libc_init_array+0x24>
 80007c0:	f000 fdc4 	bl	800134c <_init>
 80007c4:	2600      	movs	r6, #0
 80007c6:	4d0a      	ldr	r5, [pc, #40]	@ (80007f0 <__libc_init_array+0x40>)
 80007c8:	4c0a      	ldr	r4, [pc, #40]	@ (80007f4 <__libc_init_array+0x44>)
 80007ca:	1b64      	subs	r4, r4, r5
 80007cc:	10a4      	asrs	r4, r4, #2
 80007ce:	42a6      	cmp	r6, r4
 80007d0:	d105      	bne.n	80007de <__libc_init_array+0x2e>
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d8:	4798      	blx	r3
 80007da:	3601      	adds	r6, #1
 80007dc:	e7ee      	b.n	80007bc <__libc_init_array+0xc>
 80007de:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e2:	4798      	blx	r3
 80007e4:	3601      	adds	r6, #1
 80007e6:	e7f2      	b.n	80007ce <__libc_init_array+0x1e>
 80007e8:	080013ac 	.word	0x080013ac
 80007ec:	080013ac 	.word	0x080013ac
 80007f0:	080013ac 	.word	0x080013ac
 80007f4:	080013b0 	.word	0x080013b0

080007f8 <__retarget_lock_init_recursive>:
 80007f8:	4770      	bx	lr

080007fa <__retarget_lock_acquire_recursive>:
 80007fa:	4770      	bx	lr

080007fc <__retarget_lock_release_recursive>:
 80007fc:	4770      	bx	lr
	...

08000800 <_free_r>:
 8000800:	b538      	push	{r3, r4, r5, lr}
 8000802:	4605      	mov	r5, r0
 8000804:	2900      	cmp	r1, #0
 8000806:	d040      	beq.n	800088a <_free_r+0x8a>
 8000808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800080c:	1f0c      	subs	r4, r1, #4
 800080e:	2b00      	cmp	r3, #0
 8000810:	bfb8      	it	lt
 8000812:	18e4      	addlt	r4, r4, r3
 8000814:	f000 f8de 	bl	80009d4 <__malloc_lock>
 8000818:	4a1c      	ldr	r2, [pc, #112]	@ (800088c <_free_r+0x8c>)
 800081a:	6813      	ldr	r3, [r2, #0]
 800081c:	b933      	cbnz	r3, 800082c <_free_r+0x2c>
 800081e:	6063      	str	r3, [r4, #4]
 8000820:	6014      	str	r4, [r2, #0]
 8000822:	4628      	mov	r0, r5
 8000824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000828:	f000 b8da 	b.w	80009e0 <__malloc_unlock>
 800082c:	42a3      	cmp	r3, r4
 800082e:	d908      	bls.n	8000842 <_free_r+0x42>
 8000830:	6820      	ldr	r0, [r4, #0]
 8000832:	1821      	adds	r1, r4, r0
 8000834:	428b      	cmp	r3, r1
 8000836:	bf01      	itttt	eq
 8000838:	6819      	ldreq	r1, [r3, #0]
 800083a:	685b      	ldreq	r3, [r3, #4]
 800083c:	1809      	addeq	r1, r1, r0
 800083e:	6021      	streq	r1, [r4, #0]
 8000840:	e7ed      	b.n	800081e <_free_r+0x1e>
 8000842:	461a      	mov	r2, r3
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	b10b      	cbz	r3, 800084c <_free_r+0x4c>
 8000848:	42a3      	cmp	r3, r4
 800084a:	d9fa      	bls.n	8000842 <_free_r+0x42>
 800084c:	6811      	ldr	r1, [r2, #0]
 800084e:	1850      	adds	r0, r2, r1
 8000850:	42a0      	cmp	r0, r4
 8000852:	d10b      	bne.n	800086c <_free_r+0x6c>
 8000854:	6820      	ldr	r0, [r4, #0]
 8000856:	4401      	add	r1, r0
 8000858:	1850      	adds	r0, r2, r1
 800085a:	4283      	cmp	r3, r0
 800085c:	6011      	str	r1, [r2, #0]
 800085e:	d1e0      	bne.n	8000822 <_free_r+0x22>
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	4408      	add	r0, r1
 8000866:	6010      	str	r0, [r2, #0]
 8000868:	6053      	str	r3, [r2, #4]
 800086a:	e7da      	b.n	8000822 <_free_r+0x22>
 800086c:	d902      	bls.n	8000874 <_free_r+0x74>
 800086e:	230c      	movs	r3, #12
 8000870:	602b      	str	r3, [r5, #0]
 8000872:	e7d6      	b.n	8000822 <_free_r+0x22>
 8000874:	6820      	ldr	r0, [r4, #0]
 8000876:	1821      	adds	r1, r4, r0
 8000878:	428b      	cmp	r3, r1
 800087a:	bf01      	itttt	eq
 800087c:	6819      	ldreq	r1, [r3, #0]
 800087e:	685b      	ldreq	r3, [r3, #4]
 8000880:	1809      	addeq	r1, r1, r0
 8000882:	6021      	streq	r1, [r4, #0]
 8000884:	6063      	str	r3, [r4, #4]
 8000886:	6054      	str	r4, [r2, #4]
 8000888:	e7cb      	b.n	8000822 <_free_r+0x22>
 800088a:	bd38      	pop	{r3, r4, r5, pc}
 800088c:	200001c8 	.word	0x200001c8

08000890 <sbrk_aligned>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	4e0f      	ldr	r6, [pc, #60]	@ (80008d0 <sbrk_aligned+0x40>)
 8000894:	460c      	mov	r4, r1
 8000896:	6831      	ldr	r1, [r6, #0]
 8000898:	4605      	mov	r5, r0
 800089a:	b911      	cbnz	r1, 80008a2 <sbrk_aligned+0x12>
 800089c:	f000 fcb4 	bl	8001208 <_sbrk_r>
 80008a0:	6030      	str	r0, [r6, #0]
 80008a2:	4621      	mov	r1, r4
 80008a4:	4628      	mov	r0, r5
 80008a6:	f000 fcaf 	bl	8001208 <_sbrk_r>
 80008aa:	1c43      	adds	r3, r0, #1
 80008ac:	d103      	bne.n	80008b6 <sbrk_aligned+0x26>
 80008ae:	f04f 34ff 	mov.w	r4, #4294967295
 80008b2:	4620      	mov	r0, r4
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	1cc4      	adds	r4, r0, #3
 80008b8:	f024 0403 	bic.w	r4, r4, #3
 80008bc:	42a0      	cmp	r0, r4
 80008be:	d0f8      	beq.n	80008b2 <sbrk_aligned+0x22>
 80008c0:	1a21      	subs	r1, r4, r0
 80008c2:	4628      	mov	r0, r5
 80008c4:	f000 fca0 	bl	8001208 <_sbrk_r>
 80008c8:	3001      	adds	r0, #1
 80008ca:	d1f2      	bne.n	80008b2 <sbrk_aligned+0x22>
 80008cc:	e7ef      	b.n	80008ae <sbrk_aligned+0x1e>
 80008ce:	bf00      	nop
 80008d0:	200001c4 	.word	0x200001c4

080008d4 <_malloc_r>:
 80008d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008d8:	1ccd      	adds	r5, r1, #3
 80008da:	f025 0503 	bic.w	r5, r5, #3
 80008de:	3508      	adds	r5, #8
 80008e0:	2d0c      	cmp	r5, #12
 80008e2:	bf38      	it	cc
 80008e4:	250c      	movcc	r5, #12
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	4606      	mov	r6, r0
 80008ea:	db01      	blt.n	80008f0 <_malloc_r+0x1c>
 80008ec:	42a9      	cmp	r1, r5
 80008ee:	d904      	bls.n	80008fa <_malloc_r+0x26>
 80008f0:	230c      	movs	r3, #12
 80008f2:	6033      	str	r3, [r6, #0]
 80008f4:	2000      	movs	r0, #0
 80008f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009d0 <_malloc_r+0xfc>
 80008fe:	f000 f869 	bl	80009d4 <__malloc_lock>
 8000902:	f8d8 3000 	ldr.w	r3, [r8]
 8000906:	461c      	mov	r4, r3
 8000908:	bb44      	cbnz	r4, 800095c <_malloc_r+0x88>
 800090a:	4629      	mov	r1, r5
 800090c:	4630      	mov	r0, r6
 800090e:	f7ff ffbf 	bl	8000890 <sbrk_aligned>
 8000912:	1c43      	adds	r3, r0, #1
 8000914:	4604      	mov	r4, r0
 8000916:	d158      	bne.n	80009ca <_malloc_r+0xf6>
 8000918:	f8d8 4000 	ldr.w	r4, [r8]
 800091c:	4627      	mov	r7, r4
 800091e:	2f00      	cmp	r7, #0
 8000920:	d143      	bne.n	80009aa <_malloc_r+0xd6>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d04b      	beq.n	80009be <_malloc_r+0xea>
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	4639      	mov	r1, r7
 800092a:	4630      	mov	r0, r6
 800092c:	eb04 0903 	add.w	r9, r4, r3
 8000930:	f000 fc6a 	bl	8001208 <_sbrk_r>
 8000934:	4581      	cmp	r9, r0
 8000936:	d142      	bne.n	80009be <_malloc_r+0xea>
 8000938:	6821      	ldr	r1, [r4, #0]
 800093a:	4630      	mov	r0, r6
 800093c:	1a6d      	subs	r5, r5, r1
 800093e:	4629      	mov	r1, r5
 8000940:	f7ff ffa6 	bl	8000890 <sbrk_aligned>
 8000944:	3001      	adds	r0, #1
 8000946:	d03a      	beq.n	80009be <_malloc_r+0xea>
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	442b      	add	r3, r5
 800094c:	6023      	str	r3, [r4, #0]
 800094e:	f8d8 3000 	ldr.w	r3, [r8]
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	bb62      	cbnz	r2, 80009b0 <_malloc_r+0xdc>
 8000956:	f8c8 7000 	str.w	r7, [r8]
 800095a:	e00f      	b.n	800097c <_malloc_r+0xa8>
 800095c:	6822      	ldr	r2, [r4, #0]
 800095e:	1b52      	subs	r2, r2, r5
 8000960:	d420      	bmi.n	80009a4 <_malloc_r+0xd0>
 8000962:	2a0b      	cmp	r2, #11
 8000964:	d917      	bls.n	8000996 <_malloc_r+0xc2>
 8000966:	1961      	adds	r1, r4, r5
 8000968:	42a3      	cmp	r3, r4
 800096a:	6025      	str	r5, [r4, #0]
 800096c:	bf18      	it	ne
 800096e:	6059      	strne	r1, [r3, #4]
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	bf08      	it	eq
 8000974:	f8c8 1000 	streq.w	r1, [r8]
 8000978:	5162      	str	r2, [r4, r5]
 800097a:	604b      	str	r3, [r1, #4]
 800097c:	4630      	mov	r0, r6
 800097e:	f000 f82f 	bl	80009e0 <__malloc_unlock>
 8000982:	f104 000b 	add.w	r0, r4, #11
 8000986:	1d23      	adds	r3, r4, #4
 8000988:	f020 0007 	bic.w	r0, r0, #7
 800098c:	1ac2      	subs	r2, r0, r3
 800098e:	bf1c      	itt	ne
 8000990:	1a1b      	subne	r3, r3, r0
 8000992:	50a3      	strne	r3, [r4, r2]
 8000994:	e7af      	b.n	80008f6 <_malloc_r+0x22>
 8000996:	6862      	ldr	r2, [r4, #4]
 8000998:	42a3      	cmp	r3, r4
 800099a:	bf0c      	ite	eq
 800099c:	f8c8 2000 	streq.w	r2, [r8]
 80009a0:	605a      	strne	r2, [r3, #4]
 80009a2:	e7eb      	b.n	800097c <_malloc_r+0xa8>
 80009a4:	4623      	mov	r3, r4
 80009a6:	6864      	ldr	r4, [r4, #4]
 80009a8:	e7ae      	b.n	8000908 <_malloc_r+0x34>
 80009aa:	463c      	mov	r4, r7
 80009ac:	687f      	ldr	r7, [r7, #4]
 80009ae:	e7b6      	b.n	800091e <_malloc_r+0x4a>
 80009b0:	461a      	mov	r2, r3
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	42a3      	cmp	r3, r4
 80009b6:	d1fb      	bne.n	80009b0 <_malloc_r+0xdc>
 80009b8:	2300      	movs	r3, #0
 80009ba:	6053      	str	r3, [r2, #4]
 80009bc:	e7de      	b.n	800097c <_malloc_r+0xa8>
 80009be:	230c      	movs	r3, #12
 80009c0:	4630      	mov	r0, r6
 80009c2:	6033      	str	r3, [r6, #0]
 80009c4:	f000 f80c 	bl	80009e0 <__malloc_unlock>
 80009c8:	e794      	b.n	80008f4 <_malloc_r+0x20>
 80009ca:	6005      	str	r5, [r0, #0]
 80009cc:	e7d6      	b.n	800097c <_malloc_r+0xa8>
 80009ce:	bf00      	nop
 80009d0:	200001c8 	.word	0x200001c8

080009d4 <__malloc_lock>:
 80009d4:	4801      	ldr	r0, [pc, #4]	@ (80009dc <__malloc_lock+0x8>)
 80009d6:	f7ff bf10 	b.w	80007fa <__retarget_lock_acquire_recursive>
 80009da:	bf00      	nop
 80009dc:	200001c0 	.word	0x200001c0

080009e0 <__malloc_unlock>:
 80009e0:	4801      	ldr	r0, [pc, #4]	@ (80009e8 <__malloc_unlock+0x8>)
 80009e2:	f7ff bf0b 	b.w	80007fc <__retarget_lock_release_recursive>
 80009e6:	bf00      	nop
 80009e8:	200001c0 	.word	0x200001c0

080009ec <__sfputc_r>:
 80009ec:	6893      	ldr	r3, [r2, #8]
 80009ee:	b410      	push	{r4}
 80009f0:	3b01      	subs	r3, #1
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	6093      	str	r3, [r2, #8]
 80009f6:	da07      	bge.n	8000a08 <__sfputc_r+0x1c>
 80009f8:	6994      	ldr	r4, [r2, #24]
 80009fa:	42a3      	cmp	r3, r4
 80009fc:	db01      	blt.n	8000a02 <__sfputc_r+0x16>
 80009fe:	290a      	cmp	r1, #10
 8000a00:	d102      	bne.n	8000a08 <__sfputc_r+0x1c>
 8000a02:	bc10      	pop	{r4}
 8000a04:	f000 bb6c 	b.w	80010e0 <__swbuf_r>
 8000a08:	6813      	ldr	r3, [r2, #0]
 8000a0a:	1c58      	adds	r0, r3, #1
 8000a0c:	6010      	str	r0, [r2, #0]
 8000a0e:	7019      	strb	r1, [r3, #0]
 8000a10:	4608      	mov	r0, r1
 8000a12:	bc10      	pop	{r4}
 8000a14:	4770      	bx	lr

08000a16 <__sfputs_r>:
 8000a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a18:	4606      	mov	r6, r0
 8000a1a:	460f      	mov	r7, r1
 8000a1c:	4614      	mov	r4, r2
 8000a1e:	18d5      	adds	r5, r2, r3
 8000a20:	42ac      	cmp	r4, r5
 8000a22:	d101      	bne.n	8000a28 <__sfputs_r+0x12>
 8000a24:	2000      	movs	r0, #0
 8000a26:	e007      	b.n	8000a38 <__sfputs_r+0x22>
 8000a28:	463a      	mov	r2, r7
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a30:	f7ff ffdc 	bl	80009ec <__sfputc_r>
 8000a34:	1c43      	adds	r3, r0, #1
 8000a36:	d1f3      	bne.n	8000a20 <__sfputs_r+0xa>
 8000a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a3c <_vfiprintf_r>:
 8000a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a40:	460d      	mov	r5, r1
 8000a42:	4614      	mov	r4, r2
 8000a44:	4698      	mov	r8, r3
 8000a46:	4606      	mov	r6, r0
 8000a48:	b09d      	sub	sp, #116	@ 0x74
 8000a4a:	b118      	cbz	r0, 8000a54 <_vfiprintf_r+0x18>
 8000a4c:	6a03      	ldr	r3, [r0, #32]
 8000a4e:	b90b      	cbnz	r3, 8000a54 <_vfiprintf_r+0x18>
 8000a50:	f7ff fdce 	bl	80005f0 <__sinit>
 8000a54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a56:	07d9      	lsls	r1, r3, #31
 8000a58:	d405      	bmi.n	8000a66 <_vfiprintf_r+0x2a>
 8000a5a:	89ab      	ldrh	r3, [r5, #12]
 8000a5c:	059a      	lsls	r2, r3, #22
 8000a5e:	d402      	bmi.n	8000a66 <_vfiprintf_r+0x2a>
 8000a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a62:	f7ff feca 	bl	80007fa <__retarget_lock_acquire_recursive>
 8000a66:	89ab      	ldrh	r3, [r5, #12]
 8000a68:	071b      	lsls	r3, r3, #28
 8000a6a:	d501      	bpl.n	8000a70 <_vfiprintf_r+0x34>
 8000a6c:	692b      	ldr	r3, [r5, #16]
 8000a6e:	b99b      	cbnz	r3, 8000a98 <_vfiprintf_r+0x5c>
 8000a70:	4629      	mov	r1, r5
 8000a72:	4630      	mov	r0, r6
 8000a74:	f000 fb72 	bl	800115c <__swsetup_r>
 8000a78:	b170      	cbz	r0, 8000a98 <_vfiprintf_r+0x5c>
 8000a7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a7c:	07dc      	lsls	r4, r3, #31
 8000a7e:	d504      	bpl.n	8000a8a <_vfiprintf_r+0x4e>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	b01d      	add	sp, #116	@ 0x74
 8000a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a8a:	89ab      	ldrh	r3, [r5, #12]
 8000a8c:	0598      	lsls	r0, r3, #22
 8000a8e:	d4f7      	bmi.n	8000a80 <_vfiprintf_r+0x44>
 8000a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a92:	f7ff feb3 	bl	80007fc <__retarget_lock_release_recursive>
 8000a96:	e7f3      	b.n	8000a80 <_vfiprintf_r+0x44>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a9c:	2320      	movs	r3, #32
 8000a9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000aa2:	2330      	movs	r3, #48	@ 0x30
 8000aa4:	f04f 0901 	mov.w	r9, #1
 8000aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000aac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8000c58 <_vfiprintf_r+0x21c>
 8000ab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ab4:	4623      	mov	r3, r4
 8000ab6:	469a      	mov	sl, r3
 8000ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000abc:	b10a      	cbz	r2, 8000ac2 <_vfiprintf_r+0x86>
 8000abe:	2a25      	cmp	r2, #37	@ 0x25
 8000ac0:	d1f9      	bne.n	8000ab6 <_vfiprintf_r+0x7a>
 8000ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8000ac6:	d00b      	beq.n	8000ae0 <_vfiprintf_r+0xa4>
 8000ac8:	465b      	mov	r3, fp
 8000aca:	4622      	mov	r2, r4
 8000acc:	4629      	mov	r1, r5
 8000ace:	4630      	mov	r0, r6
 8000ad0:	f7ff ffa1 	bl	8000a16 <__sfputs_r>
 8000ad4:	3001      	adds	r0, #1
 8000ad6:	f000 80a7 	beq.w	8000c28 <_vfiprintf_r+0x1ec>
 8000ada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000adc:	445a      	add	r2, fp
 8000ade:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f000 809f 	beq.w	8000c28 <_vfiprintf_r+0x1ec>
 8000aea:	2300      	movs	r3, #0
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000af4:	f10a 0a01 	add.w	sl, sl, #1
 8000af8:	9304      	str	r3, [sp, #16]
 8000afa:	9307      	str	r3, [sp, #28]
 8000afc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b00:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b02:	4654      	mov	r4, sl
 8000b04:	2205      	movs	r2, #5
 8000b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b0a:	4853      	ldr	r0, [pc, #332]	@ (8000c58 <_vfiprintf_r+0x21c>)
 8000b0c:	f000 fb8c 	bl	8001228 <memchr>
 8000b10:	9a04      	ldr	r2, [sp, #16]
 8000b12:	b9d8      	cbnz	r0, 8000b4c <_vfiprintf_r+0x110>
 8000b14:	06d1      	lsls	r1, r2, #27
 8000b16:	bf44      	itt	mi
 8000b18:	2320      	movmi	r3, #32
 8000b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b1e:	0713      	lsls	r3, r2, #28
 8000b20:	bf44      	itt	mi
 8000b22:	232b      	movmi	r3, #43	@ 0x2b
 8000b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b28:	f89a 3000 	ldrb.w	r3, [sl]
 8000b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b2e:	d015      	beq.n	8000b5c <_vfiprintf_r+0x120>
 8000b30:	4654      	mov	r4, sl
 8000b32:	2000      	movs	r0, #0
 8000b34:	f04f 0c0a 	mov.w	ip, #10
 8000b38:	9a07      	ldr	r2, [sp, #28]
 8000b3a:	4621      	mov	r1, r4
 8000b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b40:	3b30      	subs	r3, #48	@ 0x30
 8000b42:	2b09      	cmp	r3, #9
 8000b44:	d94b      	bls.n	8000bde <_vfiprintf_r+0x1a2>
 8000b46:	b1b0      	cbz	r0, 8000b76 <_vfiprintf_r+0x13a>
 8000b48:	9207      	str	r2, [sp, #28]
 8000b4a:	e014      	b.n	8000b76 <_vfiprintf_r+0x13a>
 8000b4c:	eba0 0308 	sub.w	r3, r0, r8
 8000b50:	fa09 f303 	lsl.w	r3, r9, r3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	46a2      	mov	sl, r4
 8000b58:	9304      	str	r3, [sp, #16]
 8000b5a:	e7d2      	b.n	8000b02 <_vfiprintf_r+0xc6>
 8000b5c:	9b03      	ldr	r3, [sp, #12]
 8000b5e:	1d19      	adds	r1, r3, #4
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	9103      	str	r1, [sp, #12]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bfbb      	ittet	lt
 8000b68:	425b      	neglt	r3, r3
 8000b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8000b6e:	9307      	strge	r3, [sp, #28]
 8000b70:	9307      	strlt	r3, [sp, #28]
 8000b72:	bfb8      	it	lt
 8000b74:	9204      	strlt	r2, [sp, #16]
 8000b76:	7823      	ldrb	r3, [r4, #0]
 8000b78:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b7a:	d10a      	bne.n	8000b92 <_vfiprintf_r+0x156>
 8000b7c:	7863      	ldrb	r3, [r4, #1]
 8000b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b80:	d132      	bne.n	8000be8 <_vfiprintf_r+0x1ac>
 8000b82:	9b03      	ldr	r3, [sp, #12]
 8000b84:	3402      	adds	r4, #2
 8000b86:	1d1a      	adds	r2, r3, #4
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	9203      	str	r2, [sp, #12]
 8000b8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b90:	9305      	str	r3, [sp, #20]
 8000b92:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000c5c <_vfiprintf_r+0x220>
 8000b96:	2203      	movs	r2, #3
 8000b98:	4650      	mov	r0, sl
 8000b9a:	7821      	ldrb	r1, [r4, #0]
 8000b9c:	f000 fb44 	bl	8001228 <memchr>
 8000ba0:	b138      	cbz	r0, 8000bb2 <_vfiprintf_r+0x176>
 8000ba2:	2240      	movs	r2, #64	@ 0x40
 8000ba4:	9b04      	ldr	r3, [sp, #16]
 8000ba6:	eba0 000a 	sub.w	r0, r0, sl
 8000baa:	4082      	lsls	r2, r0
 8000bac:	4313      	orrs	r3, r2
 8000bae:	3401      	adds	r4, #1
 8000bb0:	9304      	str	r3, [sp, #16]
 8000bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bb6:	2206      	movs	r2, #6
 8000bb8:	4829      	ldr	r0, [pc, #164]	@ (8000c60 <_vfiprintf_r+0x224>)
 8000bba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000bbe:	f000 fb33 	bl	8001228 <memchr>
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	d03f      	beq.n	8000c46 <_vfiprintf_r+0x20a>
 8000bc6:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <_vfiprintf_r+0x228>)
 8000bc8:	bb1b      	cbnz	r3, 8000c12 <_vfiprintf_r+0x1d6>
 8000bca:	9b03      	ldr	r3, [sp, #12]
 8000bcc:	3307      	adds	r3, #7
 8000bce:	f023 0307 	bic.w	r3, r3, #7
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	9303      	str	r3, [sp, #12]
 8000bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000bd8:	443b      	add	r3, r7
 8000bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bdc:	e76a      	b.n	8000ab4 <_vfiprintf_r+0x78>
 8000bde:	460c      	mov	r4, r1
 8000be0:	2001      	movs	r0, #1
 8000be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000be6:	e7a8      	b.n	8000b3a <_vfiprintf_r+0xfe>
 8000be8:	2300      	movs	r3, #0
 8000bea:	f04f 0c0a 	mov.w	ip, #10
 8000bee:	4619      	mov	r1, r3
 8000bf0:	3401      	adds	r4, #1
 8000bf2:	9305      	str	r3, [sp, #20]
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bfa:	3a30      	subs	r2, #48	@ 0x30
 8000bfc:	2a09      	cmp	r2, #9
 8000bfe:	d903      	bls.n	8000c08 <_vfiprintf_r+0x1cc>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0c6      	beq.n	8000b92 <_vfiprintf_r+0x156>
 8000c04:	9105      	str	r1, [sp, #20]
 8000c06:	e7c4      	b.n	8000b92 <_vfiprintf_r+0x156>
 8000c08:	4604      	mov	r4, r0
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c10:	e7f0      	b.n	8000bf4 <_vfiprintf_r+0x1b8>
 8000c12:	ab03      	add	r3, sp, #12
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	462a      	mov	r2, r5
 8000c18:	4630      	mov	r0, r6
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <_vfiprintf_r+0x22c>)
 8000c1c:	a904      	add	r1, sp, #16
 8000c1e:	f3af 8000 	nop.w
 8000c22:	4607      	mov	r7, r0
 8000c24:	1c78      	adds	r0, r7, #1
 8000c26:	d1d6      	bne.n	8000bd6 <_vfiprintf_r+0x19a>
 8000c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c2a:	07d9      	lsls	r1, r3, #31
 8000c2c:	d405      	bmi.n	8000c3a <_vfiprintf_r+0x1fe>
 8000c2e:	89ab      	ldrh	r3, [r5, #12]
 8000c30:	059a      	lsls	r2, r3, #22
 8000c32:	d402      	bmi.n	8000c3a <_vfiprintf_r+0x1fe>
 8000c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c36:	f7ff fde1 	bl	80007fc <__retarget_lock_release_recursive>
 8000c3a:	89ab      	ldrh	r3, [r5, #12]
 8000c3c:	065b      	lsls	r3, r3, #25
 8000c3e:	f53f af1f 	bmi.w	8000a80 <_vfiprintf_r+0x44>
 8000c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c44:	e71e      	b.n	8000a84 <_vfiprintf_r+0x48>
 8000c46:	ab03      	add	r3, sp, #12
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	462a      	mov	r2, r5
 8000c4c:	4630      	mov	r0, r6
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <_vfiprintf_r+0x22c>)
 8000c50:	a904      	add	r1, sp, #16
 8000c52:	f000 f87d 	bl	8000d50 <_printf_i>
 8000c56:	e7e4      	b.n	8000c22 <_vfiprintf_r+0x1e6>
 8000c58:	08001378 	.word	0x08001378
 8000c5c:	0800137e 	.word	0x0800137e
 8000c60:	08001382 	.word	0x08001382
 8000c64:	00000000 	.word	0x00000000
 8000c68:	08000a17 	.word	0x08000a17

08000c6c <_printf_common>:
 8000c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c70:	4616      	mov	r6, r2
 8000c72:	4698      	mov	r8, r3
 8000c74:	688a      	ldr	r2, [r1, #8]
 8000c76:	690b      	ldr	r3, [r1, #16]
 8000c78:	4607      	mov	r7, r0
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	bfb8      	it	lt
 8000c7e:	4613      	movlt	r3, r2
 8000c80:	6033      	str	r3, [r6, #0]
 8000c82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c86:	460c      	mov	r4, r1
 8000c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c8c:	b10a      	cbz	r2, 8000c92 <_printf_common+0x26>
 8000c8e:	3301      	adds	r3, #1
 8000c90:	6033      	str	r3, [r6, #0]
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	0699      	lsls	r1, r3, #26
 8000c96:	bf42      	ittt	mi
 8000c98:	6833      	ldrmi	r3, [r6, #0]
 8000c9a:	3302      	addmi	r3, #2
 8000c9c:	6033      	strmi	r3, [r6, #0]
 8000c9e:	6825      	ldr	r5, [r4, #0]
 8000ca0:	f015 0506 	ands.w	r5, r5, #6
 8000ca4:	d106      	bne.n	8000cb4 <_printf_common+0x48>
 8000ca6:	f104 0a19 	add.w	sl, r4, #25
 8000caa:	68e3      	ldr	r3, [r4, #12]
 8000cac:	6832      	ldr	r2, [r6, #0]
 8000cae:	1a9b      	subs	r3, r3, r2
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	dc2b      	bgt.n	8000d0c <_printf_common+0xa0>
 8000cb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000cb8:	6822      	ldr	r2, [r4, #0]
 8000cba:	3b00      	subs	r3, #0
 8000cbc:	bf18      	it	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	0692      	lsls	r2, r2, #26
 8000cc2:	d430      	bmi.n	8000d26 <_printf_common+0xba>
 8000cc4:	4641      	mov	r1, r8
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ccc:	47c8      	blx	r9
 8000cce:	3001      	adds	r0, #1
 8000cd0:	d023      	beq.n	8000d1a <_printf_common+0xae>
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	6922      	ldr	r2, [r4, #16]
 8000cd6:	f003 0306 	and.w	r3, r3, #6
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf14      	ite	ne
 8000cde:	2500      	movne	r5, #0
 8000ce0:	6833      	ldreq	r3, [r6, #0]
 8000ce2:	f04f 0600 	mov.w	r6, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	68e5      	ldreq	r5, [r4, #12]
 8000cea:	f104 041a 	add.w	r4, r4, #26
 8000cee:	bf08      	it	eq
 8000cf0:	1aed      	subeq	r5, r5, r3
 8000cf2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000cf6:	bf08      	it	eq
 8000cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	bfc4      	itt	gt
 8000d00:	1a9b      	subgt	r3, r3, r2
 8000d02:	18ed      	addgt	r5, r5, r3
 8000d04:	42b5      	cmp	r5, r6
 8000d06:	d11a      	bne.n	8000d3e <_printf_common+0xd2>
 8000d08:	2000      	movs	r0, #0
 8000d0a:	e008      	b.n	8000d1e <_printf_common+0xb2>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	4652      	mov	r2, sl
 8000d10:	4641      	mov	r1, r8
 8000d12:	4638      	mov	r0, r7
 8000d14:	47c8      	blx	r9
 8000d16:	3001      	adds	r0, #1
 8000d18:	d103      	bne.n	8000d22 <_printf_common+0xb6>
 8000d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	3501      	adds	r5, #1
 8000d24:	e7c1      	b.n	8000caa <_printf_common+0x3e>
 8000d26:	2030      	movs	r0, #48	@ 0x30
 8000d28:	18e1      	adds	r1, r4, r3
 8000d2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d34:	4422      	add	r2, r4
 8000d36:	3302      	adds	r3, #2
 8000d38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d3c:	e7c2      	b.n	8000cc4 <_printf_common+0x58>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	4622      	mov	r2, r4
 8000d42:	4641      	mov	r1, r8
 8000d44:	4638      	mov	r0, r7
 8000d46:	47c8      	blx	r9
 8000d48:	3001      	adds	r0, #1
 8000d4a:	d0e6      	beq.n	8000d1a <_printf_common+0xae>
 8000d4c:	3601      	adds	r6, #1
 8000d4e:	e7d9      	b.n	8000d04 <_printf_common+0x98>

08000d50 <_printf_i>:
 8000d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d54:	7e0f      	ldrb	r7, [r1, #24]
 8000d56:	4691      	mov	r9, r2
 8000d58:	2f78      	cmp	r7, #120	@ 0x78
 8000d5a:	4680      	mov	r8, r0
 8000d5c:	460c      	mov	r4, r1
 8000d5e:	469a      	mov	sl, r3
 8000d60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d66:	d807      	bhi.n	8000d78 <_printf_i+0x28>
 8000d68:	2f62      	cmp	r7, #98	@ 0x62
 8000d6a:	d80a      	bhi.n	8000d82 <_printf_i+0x32>
 8000d6c:	2f00      	cmp	r7, #0
 8000d6e:	f000 80d3 	beq.w	8000f18 <_printf_i+0x1c8>
 8000d72:	2f58      	cmp	r7, #88	@ 0x58
 8000d74:	f000 80ba 	beq.w	8000eec <_printf_i+0x19c>
 8000d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d80:	e03a      	b.n	8000df8 <_printf_i+0xa8>
 8000d82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d86:	2b15      	cmp	r3, #21
 8000d88:	d8f6      	bhi.n	8000d78 <_printf_i+0x28>
 8000d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8000d90 <_printf_i+0x40>)
 8000d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d90:	08000de9 	.word	0x08000de9
 8000d94:	08000dfd 	.word	0x08000dfd
 8000d98:	08000d79 	.word	0x08000d79
 8000d9c:	08000d79 	.word	0x08000d79
 8000da0:	08000d79 	.word	0x08000d79
 8000da4:	08000d79 	.word	0x08000d79
 8000da8:	08000dfd 	.word	0x08000dfd
 8000dac:	08000d79 	.word	0x08000d79
 8000db0:	08000d79 	.word	0x08000d79
 8000db4:	08000d79 	.word	0x08000d79
 8000db8:	08000d79 	.word	0x08000d79
 8000dbc:	08000eff 	.word	0x08000eff
 8000dc0:	08000e27 	.word	0x08000e27
 8000dc4:	08000eb9 	.word	0x08000eb9
 8000dc8:	08000d79 	.word	0x08000d79
 8000dcc:	08000d79 	.word	0x08000d79
 8000dd0:	08000f21 	.word	0x08000f21
 8000dd4:	08000d79 	.word	0x08000d79
 8000dd8:	08000e27 	.word	0x08000e27
 8000ddc:	08000d79 	.word	0x08000d79
 8000de0:	08000d79 	.word	0x08000d79
 8000de4:	08000ec1 	.word	0x08000ec1
 8000de8:	6833      	ldr	r3, [r6, #0]
 8000dea:	1d1a      	adds	r2, r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6032      	str	r2, [r6, #0]
 8000df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000df4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e09e      	b.n	8000f3a <_printf_i+0x1ea>
 8000dfc:	6833      	ldr	r3, [r6, #0]
 8000dfe:	6820      	ldr	r0, [r4, #0]
 8000e00:	1d19      	adds	r1, r3, #4
 8000e02:	6031      	str	r1, [r6, #0]
 8000e04:	0606      	lsls	r6, r0, #24
 8000e06:	d501      	bpl.n	8000e0c <_printf_i+0xbc>
 8000e08:	681d      	ldr	r5, [r3, #0]
 8000e0a:	e003      	b.n	8000e14 <_printf_i+0xc4>
 8000e0c:	0645      	lsls	r5, r0, #25
 8000e0e:	d5fb      	bpl.n	8000e08 <_printf_i+0xb8>
 8000e10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e14:	2d00      	cmp	r5, #0
 8000e16:	da03      	bge.n	8000e20 <_printf_i+0xd0>
 8000e18:	232d      	movs	r3, #45	@ 0x2d
 8000e1a:	426d      	negs	r5, r5
 8000e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e20:	230a      	movs	r3, #10
 8000e22:	4859      	ldr	r0, [pc, #356]	@ (8000f88 <_printf_i+0x238>)
 8000e24:	e011      	b.n	8000e4a <_printf_i+0xfa>
 8000e26:	6821      	ldr	r1, [r4, #0]
 8000e28:	6833      	ldr	r3, [r6, #0]
 8000e2a:	0608      	lsls	r0, r1, #24
 8000e2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e30:	d402      	bmi.n	8000e38 <_printf_i+0xe8>
 8000e32:	0649      	lsls	r1, r1, #25
 8000e34:	bf48      	it	mi
 8000e36:	b2ad      	uxthmi	r5, r5
 8000e38:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e3a:	6033      	str	r3, [r6, #0]
 8000e3c:	bf14      	ite	ne
 8000e3e:	230a      	movne	r3, #10
 8000e40:	2308      	moveq	r3, #8
 8000e42:	4851      	ldr	r0, [pc, #324]	@ (8000f88 <_printf_i+0x238>)
 8000e44:	2100      	movs	r1, #0
 8000e46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e4a:	6866      	ldr	r6, [r4, #4]
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	bfa8      	it	ge
 8000e50:	6821      	ldrge	r1, [r4, #0]
 8000e52:	60a6      	str	r6, [r4, #8]
 8000e54:	bfa4      	itt	ge
 8000e56:	f021 0104 	bicge.w	r1, r1, #4
 8000e5a:	6021      	strge	r1, [r4, #0]
 8000e5c:	b90d      	cbnz	r5, 8000e62 <_printf_i+0x112>
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d04b      	beq.n	8000efa <_printf_i+0x1aa>
 8000e62:	4616      	mov	r6, r2
 8000e64:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e68:	fb03 5711 	mls	r7, r3, r1, r5
 8000e6c:	5dc7      	ldrb	r7, [r0, r7]
 8000e6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e72:	462f      	mov	r7, r5
 8000e74:	42bb      	cmp	r3, r7
 8000e76:	460d      	mov	r5, r1
 8000e78:	d9f4      	bls.n	8000e64 <_printf_i+0x114>
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d10b      	bne.n	8000e96 <_printf_i+0x146>
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	07df      	lsls	r7, r3, #31
 8000e82:	d508      	bpl.n	8000e96 <_printf_i+0x146>
 8000e84:	6923      	ldr	r3, [r4, #16]
 8000e86:	6861      	ldr	r1, [r4, #4]
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	bfde      	ittt	le
 8000e8c:	2330      	movle	r3, #48	@ 0x30
 8000e8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e96:	1b92      	subs	r2, r2, r6
 8000e98:	6122      	str	r2, [r4, #16]
 8000e9a:	464b      	mov	r3, r9
 8000e9c:	4621      	mov	r1, r4
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	f8cd a000 	str.w	sl, [sp]
 8000ea4:	aa03      	add	r2, sp, #12
 8000ea6:	f7ff fee1 	bl	8000c6c <_printf_common>
 8000eaa:	3001      	adds	r0, #1
 8000eac:	d14a      	bne.n	8000f44 <_printf_i+0x1f4>
 8000eae:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb2:	b004      	add	sp, #16
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	f043 0320 	orr.w	r3, r3, #32
 8000ebe:	6023      	str	r3, [r4, #0]
 8000ec0:	2778      	movs	r7, #120	@ 0x78
 8000ec2:	4832      	ldr	r0, [pc, #200]	@ (8000f8c <_printf_i+0x23c>)
 8000ec4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	6831      	ldr	r1, [r6, #0]
 8000ecc:	061f      	lsls	r7, r3, #24
 8000ece:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ed2:	d402      	bmi.n	8000eda <_printf_i+0x18a>
 8000ed4:	065f      	lsls	r7, r3, #25
 8000ed6:	bf48      	it	mi
 8000ed8:	b2ad      	uxthmi	r5, r5
 8000eda:	6031      	str	r1, [r6, #0]
 8000edc:	07d9      	lsls	r1, r3, #31
 8000ede:	bf44      	itt	mi
 8000ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8000ee4:	6023      	strmi	r3, [r4, #0]
 8000ee6:	b11d      	cbz	r5, 8000ef0 <_printf_i+0x1a0>
 8000ee8:	2310      	movs	r3, #16
 8000eea:	e7ab      	b.n	8000e44 <_printf_i+0xf4>
 8000eec:	4826      	ldr	r0, [pc, #152]	@ (8000f88 <_printf_i+0x238>)
 8000eee:	e7e9      	b.n	8000ec4 <_printf_i+0x174>
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	f023 0320 	bic.w	r3, r3, #32
 8000ef6:	6023      	str	r3, [r4, #0]
 8000ef8:	e7f6      	b.n	8000ee8 <_printf_i+0x198>
 8000efa:	4616      	mov	r6, r2
 8000efc:	e7bd      	b.n	8000e7a <_printf_i+0x12a>
 8000efe:	6833      	ldr	r3, [r6, #0]
 8000f00:	6825      	ldr	r5, [r4, #0]
 8000f02:	1d18      	adds	r0, r3, #4
 8000f04:	6961      	ldr	r1, [r4, #20]
 8000f06:	6030      	str	r0, [r6, #0]
 8000f08:	062e      	lsls	r6, r5, #24
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	d501      	bpl.n	8000f12 <_printf_i+0x1c2>
 8000f0e:	6019      	str	r1, [r3, #0]
 8000f10:	e002      	b.n	8000f18 <_printf_i+0x1c8>
 8000f12:	0668      	lsls	r0, r5, #25
 8000f14:	d5fb      	bpl.n	8000f0e <_printf_i+0x1be>
 8000f16:	8019      	strh	r1, [r3, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4616      	mov	r6, r2
 8000f1c:	6123      	str	r3, [r4, #16]
 8000f1e:	e7bc      	b.n	8000e9a <_printf_i+0x14a>
 8000f20:	6833      	ldr	r3, [r6, #0]
 8000f22:	2100      	movs	r1, #0
 8000f24:	1d1a      	adds	r2, r3, #4
 8000f26:	6032      	str	r2, [r6, #0]
 8000f28:	681e      	ldr	r6, [r3, #0]
 8000f2a:	6862      	ldr	r2, [r4, #4]
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	f000 f97b 	bl	8001228 <memchr>
 8000f32:	b108      	cbz	r0, 8000f38 <_printf_i+0x1e8>
 8000f34:	1b80      	subs	r0, r0, r6
 8000f36:	6060      	str	r0, [r4, #4]
 8000f38:	6863      	ldr	r3, [r4, #4]
 8000f3a:	6123      	str	r3, [r4, #16]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f42:	e7aa      	b.n	8000e9a <_printf_i+0x14a>
 8000f44:	4632      	mov	r2, r6
 8000f46:	4649      	mov	r1, r9
 8000f48:	4640      	mov	r0, r8
 8000f4a:	6923      	ldr	r3, [r4, #16]
 8000f4c:	47d0      	blx	sl
 8000f4e:	3001      	adds	r0, #1
 8000f50:	d0ad      	beq.n	8000eae <_printf_i+0x15e>
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	079b      	lsls	r3, r3, #30
 8000f56:	d413      	bmi.n	8000f80 <_printf_i+0x230>
 8000f58:	68e0      	ldr	r0, [r4, #12]
 8000f5a:	9b03      	ldr	r3, [sp, #12]
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	bfb8      	it	lt
 8000f60:	4618      	movlt	r0, r3
 8000f62:	e7a6      	b.n	8000eb2 <_printf_i+0x162>
 8000f64:	2301      	movs	r3, #1
 8000f66:	4632      	mov	r2, r6
 8000f68:	4649      	mov	r1, r9
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	47d0      	blx	sl
 8000f6e:	3001      	adds	r0, #1
 8000f70:	d09d      	beq.n	8000eae <_printf_i+0x15e>
 8000f72:	3501      	adds	r5, #1
 8000f74:	68e3      	ldr	r3, [r4, #12]
 8000f76:	9903      	ldr	r1, [sp, #12]
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	42ab      	cmp	r3, r5
 8000f7c:	dcf2      	bgt.n	8000f64 <_printf_i+0x214>
 8000f7e:	e7eb      	b.n	8000f58 <_printf_i+0x208>
 8000f80:	2500      	movs	r5, #0
 8000f82:	f104 0619 	add.w	r6, r4, #25
 8000f86:	e7f5      	b.n	8000f74 <_printf_i+0x224>
 8000f88:	08001389 	.word	0x08001389
 8000f8c:	0800139a 	.word	0x0800139a

08000f90 <__sflush_r>:
 8000f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f96:	0716      	lsls	r6, r2, #28
 8000f98:	4605      	mov	r5, r0
 8000f9a:	460c      	mov	r4, r1
 8000f9c:	d454      	bmi.n	8001048 <__sflush_r+0xb8>
 8000f9e:	684b      	ldr	r3, [r1, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dc02      	bgt.n	8000faa <__sflush_r+0x1a>
 8000fa4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	dd48      	ble.n	800103c <__sflush_r+0xac>
 8000faa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000fac:	2e00      	cmp	r6, #0
 8000fae:	d045      	beq.n	800103c <__sflush_r+0xac>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000fb6:	682f      	ldr	r7, [r5, #0]
 8000fb8:	6a21      	ldr	r1, [r4, #32]
 8000fba:	602b      	str	r3, [r5, #0]
 8000fbc:	d030      	beq.n	8001020 <__sflush_r+0x90>
 8000fbe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	0759      	lsls	r1, r3, #29
 8000fc4:	d505      	bpl.n	8000fd2 <__sflush_r+0x42>
 8000fc6:	6863      	ldr	r3, [r4, #4]
 8000fc8:	1ad2      	subs	r2, r2, r3
 8000fca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000fcc:	b10b      	cbz	r3, 8000fd2 <__sflush_r+0x42>
 8000fce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fd0:	1ad2      	subs	r2, r2, r3
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000fd8:	6a21      	ldr	r1, [r4, #32]
 8000fda:	47b0      	blx	r6
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	89a3      	ldrh	r3, [r4, #12]
 8000fe0:	d106      	bne.n	8000ff0 <__sflush_r+0x60>
 8000fe2:	6829      	ldr	r1, [r5, #0]
 8000fe4:	291d      	cmp	r1, #29
 8000fe6:	d82b      	bhi.n	8001040 <__sflush_r+0xb0>
 8000fe8:	4a28      	ldr	r2, [pc, #160]	@ (800108c <__sflush_r+0xfc>)
 8000fea:	410a      	asrs	r2, r1
 8000fec:	07d6      	lsls	r6, r2, #31
 8000fee:	d427      	bmi.n	8001040 <__sflush_r+0xb0>
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6062      	str	r2, [r4, #4]
 8000ff4:	6922      	ldr	r2, [r4, #16]
 8000ff6:	04d9      	lsls	r1, r3, #19
 8000ff8:	6022      	str	r2, [r4, #0]
 8000ffa:	d504      	bpl.n	8001006 <__sflush_r+0x76>
 8000ffc:	1c42      	adds	r2, r0, #1
 8000ffe:	d101      	bne.n	8001004 <__sflush_r+0x74>
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	b903      	cbnz	r3, 8001006 <__sflush_r+0x76>
 8001004:	6560      	str	r0, [r4, #84]	@ 0x54
 8001006:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001008:	602f      	str	r7, [r5, #0]
 800100a:	b1b9      	cbz	r1, 800103c <__sflush_r+0xac>
 800100c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001010:	4299      	cmp	r1, r3
 8001012:	d002      	beq.n	800101a <__sflush_r+0x8a>
 8001014:	4628      	mov	r0, r5
 8001016:	f7ff fbf3 	bl	8000800 <_free_r>
 800101a:	2300      	movs	r3, #0
 800101c:	6363      	str	r3, [r4, #52]	@ 0x34
 800101e:	e00d      	b.n	800103c <__sflush_r+0xac>
 8001020:	2301      	movs	r3, #1
 8001022:	4628      	mov	r0, r5
 8001024:	47b0      	blx	r6
 8001026:	4602      	mov	r2, r0
 8001028:	1c50      	adds	r0, r2, #1
 800102a:	d1c9      	bne.n	8000fc0 <__sflush_r+0x30>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0c6      	beq.n	8000fc0 <__sflush_r+0x30>
 8001032:	2b1d      	cmp	r3, #29
 8001034:	d001      	beq.n	800103a <__sflush_r+0xaa>
 8001036:	2b16      	cmp	r3, #22
 8001038:	d11d      	bne.n	8001076 <__sflush_r+0xe6>
 800103a:	602f      	str	r7, [r5, #0]
 800103c:	2000      	movs	r0, #0
 800103e:	e021      	b.n	8001084 <__sflush_r+0xf4>
 8001040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001044:	b21b      	sxth	r3, r3
 8001046:	e01a      	b.n	800107e <__sflush_r+0xee>
 8001048:	690f      	ldr	r7, [r1, #16]
 800104a:	2f00      	cmp	r7, #0
 800104c:	d0f6      	beq.n	800103c <__sflush_r+0xac>
 800104e:	0793      	lsls	r3, r2, #30
 8001050:	bf18      	it	ne
 8001052:	2300      	movne	r3, #0
 8001054:	680e      	ldr	r6, [r1, #0]
 8001056:	bf08      	it	eq
 8001058:	694b      	ldreq	r3, [r1, #20]
 800105a:	1bf6      	subs	r6, r6, r7
 800105c:	600f      	str	r7, [r1, #0]
 800105e:	608b      	str	r3, [r1, #8]
 8001060:	2e00      	cmp	r6, #0
 8001062:	ddeb      	ble.n	800103c <__sflush_r+0xac>
 8001064:	4633      	mov	r3, r6
 8001066:	463a      	mov	r2, r7
 8001068:	4628      	mov	r0, r5
 800106a:	6a21      	ldr	r1, [r4, #32]
 800106c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001070:	47e0      	blx	ip
 8001072:	2800      	cmp	r0, #0
 8001074:	dc07      	bgt.n	8001086 <__sflush_r+0xf6>
 8001076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800107a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800107e:	f04f 30ff 	mov.w	r0, #4294967295
 8001082:	81a3      	strh	r3, [r4, #12]
 8001084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001086:	4407      	add	r7, r0
 8001088:	1a36      	subs	r6, r6, r0
 800108a:	e7e9      	b.n	8001060 <__sflush_r+0xd0>
 800108c:	dfbffffe 	.word	0xdfbffffe

08001090 <_fflush_r>:
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	690b      	ldr	r3, [r1, #16]
 8001094:	4605      	mov	r5, r0
 8001096:	460c      	mov	r4, r1
 8001098:	b913      	cbnz	r3, 80010a0 <_fflush_r+0x10>
 800109a:	2500      	movs	r5, #0
 800109c:	4628      	mov	r0, r5
 800109e:	bd38      	pop	{r3, r4, r5, pc}
 80010a0:	b118      	cbz	r0, 80010aa <_fflush_r+0x1a>
 80010a2:	6a03      	ldr	r3, [r0, #32]
 80010a4:	b90b      	cbnz	r3, 80010aa <_fflush_r+0x1a>
 80010a6:	f7ff faa3 	bl	80005f0 <__sinit>
 80010aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f3      	beq.n	800109a <_fflush_r+0xa>
 80010b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80010b4:	07d0      	lsls	r0, r2, #31
 80010b6:	d404      	bmi.n	80010c2 <_fflush_r+0x32>
 80010b8:	0599      	lsls	r1, r3, #22
 80010ba:	d402      	bmi.n	80010c2 <_fflush_r+0x32>
 80010bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010be:	f7ff fb9c 	bl	80007fa <__retarget_lock_acquire_recursive>
 80010c2:	4628      	mov	r0, r5
 80010c4:	4621      	mov	r1, r4
 80010c6:	f7ff ff63 	bl	8000f90 <__sflush_r>
 80010ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80010cc:	4605      	mov	r5, r0
 80010ce:	07da      	lsls	r2, r3, #31
 80010d0:	d4e4      	bmi.n	800109c <_fflush_r+0xc>
 80010d2:	89a3      	ldrh	r3, [r4, #12]
 80010d4:	059b      	lsls	r3, r3, #22
 80010d6:	d4e1      	bmi.n	800109c <_fflush_r+0xc>
 80010d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010da:	f7ff fb8f 	bl	80007fc <__retarget_lock_release_recursive>
 80010de:	e7dd      	b.n	800109c <_fflush_r+0xc>

080010e0 <__swbuf_r>:
 80010e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e2:	460e      	mov	r6, r1
 80010e4:	4614      	mov	r4, r2
 80010e6:	4605      	mov	r5, r0
 80010e8:	b118      	cbz	r0, 80010f2 <__swbuf_r+0x12>
 80010ea:	6a03      	ldr	r3, [r0, #32]
 80010ec:	b90b      	cbnz	r3, 80010f2 <__swbuf_r+0x12>
 80010ee:	f7ff fa7f 	bl	80005f0 <__sinit>
 80010f2:	69a3      	ldr	r3, [r4, #24]
 80010f4:	60a3      	str	r3, [r4, #8]
 80010f6:	89a3      	ldrh	r3, [r4, #12]
 80010f8:	071a      	lsls	r2, r3, #28
 80010fa:	d501      	bpl.n	8001100 <__swbuf_r+0x20>
 80010fc:	6923      	ldr	r3, [r4, #16]
 80010fe:	b943      	cbnz	r3, 8001112 <__swbuf_r+0x32>
 8001100:	4621      	mov	r1, r4
 8001102:	4628      	mov	r0, r5
 8001104:	f000 f82a 	bl	800115c <__swsetup_r>
 8001108:	b118      	cbz	r0, 8001112 <__swbuf_r+0x32>
 800110a:	f04f 37ff 	mov.w	r7, #4294967295
 800110e:	4638      	mov	r0, r7
 8001110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	6922      	ldr	r2, [r4, #16]
 8001116:	b2f6      	uxtb	r6, r6
 8001118:	1a98      	subs	r0, r3, r2
 800111a:	6963      	ldr	r3, [r4, #20]
 800111c:	4637      	mov	r7, r6
 800111e:	4283      	cmp	r3, r0
 8001120:	dc05      	bgt.n	800112e <__swbuf_r+0x4e>
 8001122:	4621      	mov	r1, r4
 8001124:	4628      	mov	r0, r5
 8001126:	f7ff ffb3 	bl	8001090 <_fflush_r>
 800112a:	2800      	cmp	r0, #0
 800112c:	d1ed      	bne.n	800110a <__swbuf_r+0x2a>
 800112e:	68a3      	ldr	r3, [r4, #8]
 8001130:	3b01      	subs	r3, #1
 8001132:	60a3      	str	r3, [r4, #8]
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	6022      	str	r2, [r4, #0]
 800113a:	701e      	strb	r6, [r3, #0]
 800113c:	6962      	ldr	r2, [r4, #20]
 800113e:	1c43      	adds	r3, r0, #1
 8001140:	429a      	cmp	r2, r3
 8001142:	d004      	beq.n	800114e <__swbuf_r+0x6e>
 8001144:	89a3      	ldrh	r3, [r4, #12]
 8001146:	07db      	lsls	r3, r3, #31
 8001148:	d5e1      	bpl.n	800110e <__swbuf_r+0x2e>
 800114a:	2e0a      	cmp	r6, #10
 800114c:	d1df      	bne.n	800110e <__swbuf_r+0x2e>
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
 8001152:	f7ff ff9d 	bl	8001090 <_fflush_r>
 8001156:	2800      	cmp	r0, #0
 8001158:	d0d9      	beq.n	800110e <__swbuf_r+0x2e>
 800115a:	e7d6      	b.n	800110a <__swbuf_r+0x2a>

0800115c <__swsetup_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <__swsetup_r+0xa8>)
 8001160:	4605      	mov	r5, r0
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	460c      	mov	r4, r1
 8001166:	b118      	cbz	r0, 8001170 <__swsetup_r+0x14>
 8001168:	6a03      	ldr	r3, [r0, #32]
 800116a:	b90b      	cbnz	r3, 8001170 <__swsetup_r+0x14>
 800116c:	f7ff fa40 	bl	80005f0 <__sinit>
 8001170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001174:	0719      	lsls	r1, r3, #28
 8001176:	d422      	bmi.n	80011be <__swsetup_r+0x62>
 8001178:	06da      	lsls	r2, r3, #27
 800117a:	d407      	bmi.n	800118c <__swsetup_r+0x30>
 800117c:	2209      	movs	r2, #9
 800117e:	602a      	str	r2, [r5, #0]
 8001180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	81a3      	strh	r3, [r4, #12]
 800118a:	e033      	b.n	80011f4 <__swsetup_r+0x98>
 800118c:	0758      	lsls	r0, r3, #29
 800118e:	d512      	bpl.n	80011b6 <__swsetup_r+0x5a>
 8001190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001192:	b141      	cbz	r1, 80011a6 <__swsetup_r+0x4a>
 8001194:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001198:	4299      	cmp	r1, r3
 800119a:	d002      	beq.n	80011a2 <__swsetup_r+0x46>
 800119c:	4628      	mov	r0, r5
 800119e:	f7ff fb2f 	bl	8000800 <_free_r>
 80011a2:	2300      	movs	r3, #0
 80011a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80011a6:	89a3      	ldrh	r3, [r4, #12]
 80011a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80011ac:	81a3      	strh	r3, [r4, #12]
 80011ae:	2300      	movs	r3, #0
 80011b0:	6063      	str	r3, [r4, #4]
 80011b2:	6923      	ldr	r3, [r4, #16]
 80011b4:	6023      	str	r3, [r4, #0]
 80011b6:	89a3      	ldrh	r3, [r4, #12]
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	81a3      	strh	r3, [r4, #12]
 80011be:	6923      	ldr	r3, [r4, #16]
 80011c0:	b94b      	cbnz	r3, 80011d6 <__swsetup_r+0x7a>
 80011c2:	89a3      	ldrh	r3, [r4, #12]
 80011c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80011c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011cc:	d003      	beq.n	80011d6 <__swsetup_r+0x7a>
 80011ce:	4621      	mov	r1, r4
 80011d0:	4628      	mov	r0, r5
 80011d2:	f000 f85c 	bl	800128e <__smakebuf_r>
 80011d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011da:	f013 0201 	ands.w	r2, r3, #1
 80011de:	d00a      	beq.n	80011f6 <__swsetup_r+0x9a>
 80011e0:	2200      	movs	r2, #0
 80011e2:	60a2      	str	r2, [r4, #8]
 80011e4:	6962      	ldr	r2, [r4, #20]
 80011e6:	4252      	negs	r2, r2
 80011e8:	61a2      	str	r2, [r4, #24]
 80011ea:	6922      	ldr	r2, [r4, #16]
 80011ec:	b942      	cbnz	r2, 8001200 <__swsetup_r+0xa4>
 80011ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80011f2:	d1c5      	bne.n	8001180 <__swsetup_r+0x24>
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	0799      	lsls	r1, r3, #30
 80011f8:	bf58      	it	pl
 80011fa:	6962      	ldrpl	r2, [r4, #20]
 80011fc:	60a2      	str	r2, [r4, #8]
 80011fe:	e7f4      	b.n	80011ea <__swsetup_r+0x8e>
 8001200:	2000      	movs	r0, #0
 8001202:	e7f7      	b.n	80011f4 <__swsetup_r+0x98>
 8001204:	2000000c 	.word	0x2000000c

08001208 <_sbrk_r>:
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	2300      	movs	r3, #0
 800120c:	4d05      	ldr	r5, [pc, #20]	@ (8001224 <_sbrk_r+0x1c>)
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	602b      	str	r3, [r5, #0]
 8001214:	f7ff f900 	bl	8000418 <_sbrk>
 8001218:	1c43      	adds	r3, r0, #1
 800121a:	d102      	bne.n	8001222 <_sbrk_r+0x1a>
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	b103      	cbz	r3, 8001222 <_sbrk_r+0x1a>
 8001220:	6023      	str	r3, [r4, #0]
 8001222:	bd38      	pop	{r3, r4, r5, pc}
 8001224:	200001bc 	.word	0x200001bc

08001228 <memchr>:
 8001228:	4603      	mov	r3, r0
 800122a:	b510      	push	{r4, lr}
 800122c:	b2c9      	uxtb	r1, r1
 800122e:	4402      	add	r2, r0
 8001230:	4293      	cmp	r3, r2
 8001232:	4618      	mov	r0, r3
 8001234:	d101      	bne.n	800123a <memchr+0x12>
 8001236:	2000      	movs	r0, #0
 8001238:	e003      	b.n	8001242 <memchr+0x1a>
 800123a:	7804      	ldrb	r4, [r0, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	428c      	cmp	r4, r1
 8001240:	d1f6      	bne.n	8001230 <memchr+0x8>
 8001242:	bd10      	pop	{r4, pc}

08001244 <__swhatbuf_r>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	460c      	mov	r4, r1
 8001248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800124c:	4615      	mov	r5, r2
 800124e:	2900      	cmp	r1, #0
 8001250:	461e      	mov	r6, r3
 8001252:	b096      	sub	sp, #88	@ 0x58
 8001254:	da0c      	bge.n	8001270 <__swhatbuf_r+0x2c>
 8001256:	89a3      	ldrh	r3, [r4, #12]
 8001258:	2100      	movs	r1, #0
 800125a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800125e:	bf14      	ite	ne
 8001260:	2340      	movne	r3, #64	@ 0x40
 8001262:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001266:	2000      	movs	r0, #0
 8001268:	6031      	str	r1, [r6, #0]
 800126a:	602b      	str	r3, [r5, #0]
 800126c:	b016      	add	sp, #88	@ 0x58
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	466a      	mov	r2, sp
 8001272:	f000 f849 	bl	8001308 <_fstat_r>
 8001276:	2800      	cmp	r0, #0
 8001278:	dbed      	blt.n	8001256 <__swhatbuf_r+0x12>
 800127a:	9901      	ldr	r1, [sp, #4]
 800127c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001280:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001284:	4259      	negs	r1, r3
 8001286:	4159      	adcs	r1, r3
 8001288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128c:	e7eb      	b.n	8001266 <__swhatbuf_r+0x22>

0800128e <__smakebuf_r>:
 800128e:	898b      	ldrh	r3, [r1, #12]
 8001290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001292:	079d      	lsls	r5, r3, #30
 8001294:	4606      	mov	r6, r0
 8001296:	460c      	mov	r4, r1
 8001298:	d507      	bpl.n	80012aa <__smakebuf_r+0x1c>
 800129a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800129e:	6023      	str	r3, [r4, #0]
 80012a0:	6123      	str	r3, [r4, #16]
 80012a2:	2301      	movs	r3, #1
 80012a4:	6163      	str	r3, [r4, #20]
 80012a6:	b003      	add	sp, #12
 80012a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012aa:	466a      	mov	r2, sp
 80012ac:	ab01      	add	r3, sp, #4
 80012ae:	f7ff ffc9 	bl	8001244 <__swhatbuf_r>
 80012b2:	9f00      	ldr	r7, [sp, #0]
 80012b4:	4605      	mov	r5, r0
 80012b6:	4639      	mov	r1, r7
 80012b8:	4630      	mov	r0, r6
 80012ba:	f7ff fb0b 	bl	80008d4 <_malloc_r>
 80012be:	b948      	cbnz	r0, 80012d4 <__smakebuf_r+0x46>
 80012c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c4:	059a      	lsls	r2, r3, #22
 80012c6:	d4ee      	bmi.n	80012a6 <__smakebuf_r+0x18>
 80012c8:	f023 0303 	bic.w	r3, r3, #3
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	81a3      	strh	r3, [r4, #12]
 80012d2:	e7e2      	b.n	800129a <__smakebuf_r+0xc>
 80012d4:	89a3      	ldrh	r3, [r4, #12]
 80012d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80012da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012de:	81a3      	strh	r3, [r4, #12]
 80012e0:	9b01      	ldr	r3, [sp, #4]
 80012e2:	6020      	str	r0, [r4, #0]
 80012e4:	b15b      	cbz	r3, 80012fe <__smakebuf_r+0x70>
 80012e6:	4630      	mov	r0, r6
 80012e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012ec:	f000 f81e 	bl	800132c <_isatty_r>
 80012f0:	b128      	cbz	r0, 80012fe <__smakebuf_r+0x70>
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	f023 0303 	bic.w	r3, r3, #3
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	81a3      	strh	r3, [r4, #12]
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	431d      	orrs	r5, r3
 8001302:	81a5      	strh	r5, [r4, #12]
 8001304:	e7cf      	b.n	80012a6 <__smakebuf_r+0x18>
	...

08001308 <_fstat_r>:
 8001308:	b538      	push	{r3, r4, r5, lr}
 800130a:	2300      	movs	r3, #0
 800130c:	4d06      	ldr	r5, [pc, #24]	@ (8001328 <_fstat_r+0x20>)
 800130e:	4604      	mov	r4, r0
 8001310:	4608      	mov	r0, r1
 8001312:	4611      	mov	r1, r2
 8001314:	602b      	str	r3, [r5, #0]
 8001316:	f7ff f859 	bl	80003cc <_fstat>
 800131a:	1c43      	adds	r3, r0, #1
 800131c:	d102      	bne.n	8001324 <_fstat_r+0x1c>
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	b103      	cbz	r3, 8001324 <_fstat_r+0x1c>
 8001322:	6023      	str	r3, [r4, #0]
 8001324:	bd38      	pop	{r3, r4, r5, pc}
 8001326:	bf00      	nop
 8001328:	200001bc 	.word	0x200001bc

0800132c <_isatty_r>:
 800132c:	b538      	push	{r3, r4, r5, lr}
 800132e:	2300      	movs	r3, #0
 8001330:	4d05      	ldr	r5, [pc, #20]	@ (8001348 <_isatty_r+0x1c>)
 8001332:	4604      	mov	r4, r0
 8001334:	4608      	mov	r0, r1
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	f7ff f857 	bl	80003ea <_isatty>
 800133c:	1c43      	adds	r3, r0, #1
 800133e:	d102      	bne.n	8001346 <_isatty_r+0x1a>
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	b103      	cbz	r3, 8001346 <_isatty_r+0x1a>
 8001344:	6023      	str	r3, [r4, #0]
 8001346:	bd38      	pop	{r3, r4, r5, pc}
 8001348:	200001bc 	.word	0x200001bc

0800134c <_init>:
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134e:	bf00      	nop
 8001350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001352:	bc08      	pop	{r3}
 8001354:	469e      	mov	lr, r3
 8001356:	4770      	bx	lr

08001358 <_fini>:
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135a:	bf00      	nop
 800135c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135e:	bc08      	pop	{r3}
 8001360:	469e      	mov	lr, r3
 8001362:	4770      	bx	lr


13_Tx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800043c  08000444  00001444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800043c  0800043c  00001444  2**0
                  CONTENTS
  4 .ARM          00000000  0800043c  0800043c  00001444  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800043c  08000444  00001444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800043c  0800043c  0000143c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000440  08000440  00001440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000444  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000444  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000826  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002bd  00000000  00000000  00001c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00001f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000072  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010bd9  00000000  00000000  0000206a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d02  00000000  00000000  00012c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057b9f  00000000  00000000  00013945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006b4e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001a4  00000000  00000000  0006b528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0006b6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000424 	.word	0x08000424

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000424 	.word	0x08000424

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <uart_Tx_interrupt_init>:




void uart_Tx_interrupt_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
    // 1. Enable GPIOA and USART1 clocks
    RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN);
 80001ae:	4b22      	ldr	r3, [pc, #136]	@ (8000238 <uart_Tx_interrupt_init+0x90>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	4a21      	ldr	r2, [pc, #132]	@ (8000238 <uart_Tx_interrupt_init+0x90>)
 80001b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001b8:	f043 0304 	orr.w	r3, r3, #4
 80001bc:	6193      	str	r3, [r2, #24]

    // 2.  // Configure PA9 as USART1 TX (Alternate Function Push-Pull)
    GPIOA->CRH &= ~GPIO_CRH_MODE9;           // Clear MODE9
 80001be:	4b1f      	ldr	r3, [pc, #124]	@ (800023c <uart_Tx_interrupt_init+0x94>)
 80001c0:	685b      	ldr	r3, [r3, #4]
 80001c2:	4a1e      	ldr	r2, [pc, #120]	@ (800023c <uart_Tx_interrupt_init+0x94>)
 80001c4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80001c8:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_MODE9_1;          // Output mode, max speed 2 MHz
 80001ca:	4b1c      	ldr	r3, [pc, #112]	@ (800023c <uart_Tx_interrupt_init+0x94>)
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	4a1b      	ldr	r2, [pc, #108]	@ (800023c <uart_Tx_interrupt_init+0x94>)
 80001d0:	f043 0320 	orr.w	r3, r3, #32
 80001d4:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF9;            // Clear CNF9
 80001d6:	4b19      	ldr	r3, [pc, #100]	@ (800023c <uart_Tx_interrupt_init+0x94>)
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	4a18      	ldr	r2, [pc, #96]	@ (800023c <uart_Tx_interrupt_init+0x94>)
 80001dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80001e0:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF9_1;           // Alternate function push-pull
 80001e2:	4b16      	ldr	r3, [pc, #88]	@ (800023c <uart_Tx_interrupt_init+0x94>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	4a15      	ldr	r2, [pc, #84]	@ (800023c <uart_Tx_interrupt_init+0x94>)
 80001e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80001ec:	6053      	str	r3, [r2, #4]
    // 3. Configure USART1 baud rate
    //calculate mantissa
    int mantissa = SYSTEM_CLOCK/(16 * BAUD_RATE);
 80001ee:	2334      	movs	r3, #52	@ 0x34
 80001f0:	607b      	str	r3, [r7, #4]
    int fraction = (SYSTEM_CLOCK % 16);
 80001f2:	2300      	movs	r3, #0
 80001f4:	603b      	str	r3, [r7, #0]
    USART1->BRR = (mantissa<<4U) | (fraction & 0xF);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	011a      	lsls	r2, r3, #4
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	f003 030f 	and.w	r3, r3, #15
 8000200:	431a      	orrs	r2, r3
 8000202:	4b0f      	ldr	r3, [pc, #60]	@ (8000240 <uart_Tx_interrupt_init+0x98>)
 8000204:	609a      	str	r2, [r3, #8]
   // USART1->BRR = 0x341;

    // 4. Enable USART1 transmitter, USART receiver and enable USART
    USART1->CR1 |= USART_CR1_TE;						// Enable Tx
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <uart_Tx_interrupt_init+0x98>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	4a0d      	ldr	r2, [pc, #52]	@ (8000240 <uart_Tx_interrupt_init+0x98>)
 800020c:	f043 0308 	orr.w	r3, r3, #8
 8000210:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_TXEIE;					// Enable USART IRQ interrupt
 8000212:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <uart_Tx_interrupt_init+0x98>)
 8000214:	68db      	ldr	r3, [r3, #12]
 8000216:	4a0a      	ldr	r2, [pc, #40]	@ (8000240 <uart_Tx_interrupt_init+0x98>)
 8000218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800021c:	60d3      	str	r3, [r2, #12]
   //Enable interrupt in NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 800021e:	2025      	movs	r0, #37	@ 0x25
 8000220:	f7ff ffa6 	bl	8000170 <__NVIC_EnableIRQ>
    USART1->CR1 |= USART_CR1_UE;						// Enable USART
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <uart_Tx_interrupt_init+0x98>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a05      	ldr	r2, [pc, #20]	@ (8000240 <uart_Tx_interrupt_init+0x98>)
 800022a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800022e:	60d3      	str	r3, [r2, #12]
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800
 8000240:	40013800 	.word	0x40013800

08000244 <uart_Rx_interrupt_init>:




void uart_Rx_interrupt_init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
    // 1. Enable GPIOA and USART1 clocks
    RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN);
 800024a:	4b1f      	ldr	r3, [pc, #124]	@ (80002c8 <uart_Rx_interrupt_init+0x84>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a1e      	ldr	r2, [pc, #120]	@ (80002c8 <uart_Rx_interrupt_init+0x84>)
 8000250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	6193      	str	r3, [r2, #24]

        // Configure PA10 as USART1 RX (Floating input)
    GPIOA->CRH &= ~GPIO_CRH_MODE10;          // Clear MODE10
 800025a:	4b1c      	ldr	r3, [pc, #112]	@ (80002cc <uart_Rx_interrupt_init+0x88>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	4a1b      	ldr	r2, [pc, #108]	@ (80002cc <uart_Rx_interrupt_init+0x88>)
 8000260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000264:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF10;           // Clear CNF10
 8000266:	4b19      	ldr	r3, [pc, #100]	@ (80002cc <uart_Rx_interrupt_init+0x88>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	4a18      	ldr	r2, [pc, #96]	@ (80002cc <uart_Rx_interrupt_init+0x88>)
 800026c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000270:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0;          // Input with floating
 8000272:	4b16      	ldr	r3, [pc, #88]	@ (80002cc <uart_Rx_interrupt_init+0x88>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	4a15      	ldr	r2, [pc, #84]	@ (80002cc <uart_Rx_interrupt_init+0x88>)
 8000278:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800027c:	6053      	str	r3, [r2, #4]

    // 3. Configure USART1 baud rate
    //calculate mantissa
    int mantissa = SYSTEM_CLOCK/(16 * BAUD_RATE);
 800027e:	2334      	movs	r3, #52	@ 0x34
 8000280:	607b      	str	r3, [r7, #4]
    int fraction = (SYSTEM_CLOCK % 16);
 8000282:	2300      	movs	r3, #0
 8000284:	603b      	str	r3, [r7, #0]
    USART1->BRR = (mantissa<<4U) | (fraction & 0xF);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	011a      	lsls	r2, r3, #4
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	f003 030f 	and.w	r3, r3, #15
 8000290:	431a      	orrs	r2, r3
 8000292:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <uart_Rx_interrupt_init+0x8c>)
 8000294:	609a      	str	r2, [r3, #8]
   // USART1->BRR = 0x341;

    // 4. Enable USART1 transmitter, USART receiver and enable USART
    USART1->CR1 |= USART_CR1_RE;						// Enable Rx
 8000296:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <uart_Rx_interrupt_init+0x8c>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a0d      	ldr	r2, [pc, #52]	@ (80002d0 <uart_Rx_interrupt_init+0x8c>)
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RXNEIE;					// Enable USART IRQ interrupt
 80002a2:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <uart_Rx_interrupt_init+0x8c>)
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	4a0a      	ldr	r2, [pc, #40]	@ (80002d0 <uart_Rx_interrupt_init+0x8c>)
 80002a8:	f043 0320 	orr.w	r3, r3, #32
 80002ac:	60d3      	str	r3, [r2, #12]
   //Enable interrupt in NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 80002ae:	2025      	movs	r0, #37	@ 0x25
 80002b0:	f7ff ff5e 	bl	8000170 <__NVIC_EnableIRQ>
    USART1->CR1 |= USART_CR1_UE;						// Enable USART
 80002b4:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <uart_Rx_interrupt_init+0x8c>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a05      	ldr	r2, [pc, #20]	@ (80002d0 <uart_Rx_interrupt_init+0x8c>)
 80002ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002be:	60d3      	str	r3, [r2, #12]
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40010800 	.word	0x40010800
 80002d0:	40013800 	.word	0x40013800

080002d4 <main>:




int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1U<<3);
 80002d8:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <main+0x4c>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a10      	ldr	r2, [pc, #64]	@ (8000320 <main+0x4c>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6193      	str	r3, [r2, #24]
	//Set Mode of LED pin to output max speed 50Mhz
	GPIOB->CRL |=(1U<<0);
 80002e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <main+0x50>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000324 <main+0x50>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=(1U<<1);
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <main+0x50>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000324 <main+0x50>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6013      	str	r3, [r2, #0]
	//Set CNF of LED pin to Output push pull
	GPIOB->CRL &=~(1U<<2);
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <main+0x50>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a08      	ldr	r2, [pc, #32]	@ (8000324 <main+0x50>)
 8000302:	f023 0304 	bic.w	r3, r3, #4
 8000306:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &=~(1U<<3);
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <main+0x50>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <main+0x50>)
 800030e:	f023 0308 	bic.w	r3, r3, #8
 8000312:	6013      	str	r3, [r2, #0]


	uart_Rx_interrupt_init();//Enable UART Rx
 8000314:	f7ff ff96 	bl	8000244 <uart_Rx_interrupt_init>
	uart_Tx_interrupt_init();//Enable UART Tx
 8000318:	f7ff ff46 	bl	80001a8 <uart_Tx_interrupt_init>


  while (1)
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <main+0x48>
 8000320:	40021000 	.word	0x40021000
 8000324:	40010c00 	.word	0x40010c00

08000328 <uart_callback_Rx>:

}


static void uart_callback_Rx(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	key = USART1->DR;
 800032c:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <uart_callback_Rx+0x38>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <uart_callback_Rx+0x3c>)
 8000334:	701a      	strb	r2, [r3, #0]
			if(key=='1')
 8000336:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <uart_callback_Rx+0x3c>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b31      	cmp	r3, #49	@ 0x31
 800033c:	d106      	bne.n	800034c <uart_callback_Rx+0x24>
				  {
					  GPIOB->ODR |= LED_PIN;
 800033e:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <uart_callback_Rx+0x40>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	4a09      	ldr	r2, [pc, #36]	@ (8000368 <uart_callback_Rx+0x40>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	60d3      	str	r3, [r2, #12]
				  else
				  {
					  GPIOB->ODR &=~LED_PIN;
				  }

}
 800034a:	e005      	b.n	8000358 <uart_callback_Rx+0x30>
					  GPIOB->ODR &=~LED_PIN;
 800034c:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <uart_callback_Rx+0x40>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	4a05      	ldr	r2, [pc, #20]	@ (8000368 <uart_callback_Rx+0x40>)
 8000352:	f023 0301 	bic.w	r3, r3, #1
 8000356:	60d3      	str	r3, [r2, #12]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40013800 	.word	0x40013800
 8000364:	2000001c 	.word	0x2000001c
 8000368:	40010c00 	.word	0x40010c00

0800036c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	//Check if Rx is set
	if(USART1->SR & USART_SR_RXNE)
 8000370:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <USART1_IRQHandler+0x18>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <USART1_IRQHandler+0x14>
	{
		//Do something
		uart_callback_Rx();
 800037c:	f7ff ffd4 	bl	8000328 <uart_callback_Rx>
	}

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40013800 	.word	0x40013800

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	@ (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	@ (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	@ (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	@ (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	@ (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	@ (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f811 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff8b 	bl	80002d4 <main>

080003be <LoopForever>:

LoopForever:
  b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08000444 	.word	0x08000444
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	20000020 	.word	0x20000020

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	2600      	movs	r6, #0
 80003e0:	4d0c      	ldr	r5, [pc, #48]	@ (8000414 <__libc_init_array+0x38>)
 80003e2:	4c0d      	ldr	r4, [pc, #52]	@ (8000418 <__libc_init_array+0x3c>)
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	42a6      	cmp	r6, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	f000 f81a 	bl	8000424 <_init>
 80003f0:	2600      	movs	r6, #0
 80003f2:	4d0a      	ldr	r5, [pc, #40]	@ (800041c <__libc_init_array+0x40>)
 80003f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000420 <__libc_init_array+0x44>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	42a6      	cmp	r6, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	f855 3b04 	ldr.w	r3, [r5], #4
 8000404:	4798      	blx	r3
 8000406:	3601      	adds	r6, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	f855 3b04 	ldr.w	r3, [r5], #4
 800040e:	4798      	blx	r3
 8000410:	3601      	adds	r6, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	0800043c 	.word	0x0800043c
 8000418:	0800043c 	.word	0x0800043c
 800041c:	0800043c 	.word	0x0800043c
 8000420:	08000440 	.word	0x08000440

08000424 <_init>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr

08000430 <_fini>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr

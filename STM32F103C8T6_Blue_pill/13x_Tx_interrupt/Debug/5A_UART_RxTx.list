
5A_UART_RxTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000384  0800038c  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000384  08000384  0000138c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000384  08000384  0000138c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000384  0800038c  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000384  08000384  00001384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000388  08000388  00001388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800038c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800038c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000450  00000000  00000000  000013b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000201  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c20  00000000  00000000  00001acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000cfa  00000000  00000000  000126ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005796f  00000000  00000000  000133e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006ad56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d8  00000000  00000000  0006ad9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0006ae74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800036c 	.word	0x0800036c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800036c 	.word	0x0800036c

08000170 <uart_RxTx_init>:
#define SYSTEM_CLOCK 8000000
#define USARTDIV (SYSTEM_CLOCK / BAUD_RATE)


void uart_RxTx_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
    // 1. Enable GPIOA and USART1 clocks
    RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN);
 8000176:	4b2a      	ldr	r3, [pc, #168]	@ (8000220 <uart_RxTx_init+0xb0>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a29      	ldr	r2, [pc, #164]	@ (8000220 <uart_RxTx_init+0xb0>)
 800017c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000180:	f043 0304 	orr.w	r3, r3, #4
 8000184:	6193      	str	r3, [r2, #24]

    // 2.  // Configure PA9 as USART1 TX (Alternate Function Push-Pull)
    GPIOA->CRH &= ~GPIO_CRH_MODE9;           // Clear MODE9
 8000186:	4b27      	ldr	r3, [pc, #156]	@ (8000224 <uart_RxTx_init+0xb4>)
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	4a26      	ldr	r2, [pc, #152]	@ (8000224 <uart_RxTx_init+0xb4>)
 800018c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000190:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_MODE9_1;          // Output mode, max speed 2 MHz
 8000192:	4b24      	ldr	r3, [pc, #144]	@ (8000224 <uart_RxTx_init+0xb4>)
 8000194:	685b      	ldr	r3, [r3, #4]
 8000196:	4a23      	ldr	r2, [pc, #140]	@ (8000224 <uart_RxTx_init+0xb4>)
 8000198:	f043 0320 	orr.w	r3, r3, #32
 800019c:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF9;            // Clear CNF9
 800019e:	4b21      	ldr	r3, [pc, #132]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001a0:	685b      	ldr	r3, [r3, #4]
 80001a2:	4a20      	ldr	r2, [pc, #128]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80001a8:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF9_1;           // Alternate function push-pull
 80001aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80001b4:	6053      	str	r3, [r2, #4]

    // Configure PA10 as USART1 RX (Floating input)
    GPIOA->CRH &= ~GPIO_CRH_MODE10;          // Clear MODE10
 80001b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001b8:	685b      	ldr	r3, [r3, #4]
 80001ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80001c0:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF10;           // Clear CNF10
 80001c2:	4b18      	ldr	r3, [pc, #96]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001c4:	685b      	ldr	r3, [r3, #4]
 80001c6:	4a17      	ldr	r2, [pc, #92]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001cc:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0;          // Input with floating
 80001ce:	4b15      	ldr	r3, [pc, #84]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	4a14      	ldr	r2, [pc, #80]	@ (8000224 <uart_RxTx_init+0xb4>)
 80001d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001d8:	6053      	str	r3, [r2, #4]

    // 3. Configure USART1 baud rate
    //calculate mantissa
    int mantissa = SYSTEM_CLOCK/(16 * BAUD_RATE);
 80001da:	2334      	movs	r3, #52	@ 0x34
 80001dc:	607b      	str	r3, [r7, #4]
    int fraction = (SYSTEM_CLOCK % 16);
 80001de:	2300      	movs	r3, #0
 80001e0:	603b      	str	r3, [r7, #0]
    USART1->BRR = (mantissa<<4U) | (fraction & 0xF);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	011a      	lsls	r2, r3, #4
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	f003 030f 	and.w	r3, r3, #15
 80001ec:	431a      	orrs	r2, r3
 80001ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <uart_RxTx_init+0xb8>)
 80001f0:	609a      	str	r2, [r3, #8]
   // USART1->BRR = 0x341;

    // 4. Enable USART1 transmitter, USART receiver and enable USART
    USART1->CR1 |= (USART_CR1_TE| USART_CR1_RE);		// Enable Tx Rx
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <uart_RxTx_init+0xb8>)
 80001f4:	68db      	ldr	r3, [r3, #12]
 80001f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000228 <uart_RxTx_init+0xb8>)
 80001f8:	f043 030c 	orr.w	r3, r3, #12
 80001fc:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RXNEIE;					// Enable USART IRQ
 80001fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <uart_RxTx_init+0xb8>)
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	4a09      	ldr	r2, [pc, #36]	@ (8000228 <uart_RxTx_init+0xb8>)
 8000204:	f043 0320 	orr.w	r3, r3, #32
 8000208:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;						// Enable USART
 800020a:	4b07      	ldr	r3, [pc, #28]	@ (8000228 <uart_RxTx_init+0xb8>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	4a06      	ldr	r2, [pc, #24]	@ (8000228 <uart_RxTx_init+0xb8>)
 8000210:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000214:	60d3      	str	r3, [r2, #12]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	40021000 	.word	0x40021000
 8000224:	40010800 	.word	0x40010800
 8000228:	40013800 	.word	0x40013800

0800022c <uart_read>:

char uart_read(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	//Make sure RXNE input register is not empty
	while(!(USART1->SR & USART_SR_RXNE)){}
 8000230:	bf00      	nop
 8000232:	4b06      	ldr	r3, [pc, #24]	@ (800024c <uart_read+0x20>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f003 0320 	and.w	r3, r3, #32
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0f9      	beq.n	8000232 <uart_read+0x6>
	//Read data
	return USART1->DR;
 800023e:	4b03      	ldr	r3, [pc, #12]	@ (800024c <uart_read+0x20>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	b2db      	uxtb	r3, r3
}
 8000244:	4618      	mov	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40013800 	.word	0x40013800

08000250 <main>:




int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1U<<3);
 8000254:	4b1b      	ldr	r3, [pc, #108]	@ (80002c4 <main+0x74>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a1a      	ldr	r2, [pc, #104]	@ (80002c4 <main+0x74>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6193      	str	r3, [r2, #24]
	//Set Mode of LED pin to output max speed 50Mhz
	GPIOB->CRL |=(1U<<0);
 8000260:	4b19      	ldr	r3, [pc, #100]	@ (80002c8 <main+0x78>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a18      	ldr	r2, [pc, #96]	@ (80002c8 <main+0x78>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |=(1U<<1);
 800026c:	4b16      	ldr	r3, [pc, #88]	@ (80002c8 <main+0x78>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a15      	ldr	r2, [pc, #84]	@ (80002c8 <main+0x78>)
 8000272:	f043 0302 	orr.w	r3, r3, #2
 8000276:	6013      	str	r3, [r2, #0]
	//Set CNF of LED pin to Output push pull
	GPIOB->CRL &=~(1U<<2);
 8000278:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <main+0x78>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <main+0x78>)
 800027e:	f023 0304 	bic.w	r3, r3, #4
 8000282:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &=~(1U<<3);
 8000284:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <main+0x78>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0f      	ldr	r2, [pc, #60]	@ (80002c8 <main+0x78>)
 800028a:	f023 0308 	bic.w	r3, r3, #8
 800028e:	6013      	str	r3, [r2, #0]

    uart_RxTx_init();       											// Initialize USART1
 8000290:	f7ff ff6e 	bl	8000170 <uart_RxTx_init>

  while (1)
    {

	  key = uart_read();
 8000294:	f7ff ffca 	bl	800022c <uart_read>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <main+0x7c>)
 800029e:	701a      	strb	r2, [r3, #0]
	  if(key=='1')
 80002a0:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <main+0x7c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b31      	cmp	r3, #49	@ 0x31
 80002a6:	d106      	bne.n	80002b6 <main+0x66>
	  {
		  GPIOB->ODR |= LED_PIN;
 80002a8:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <main+0x78>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a06      	ldr	r2, [pc, #24]	@ (80002c8 <main+0x78>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	60d3      	str	r3, [r2, #12]
 80002b4:	e7ee      	b.n	8000294 <main+0x44>
	  }
	  else
	  {
		  GPIOB->ODR &=~LED_PIN;
 80002b6:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <main+0x78>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a03      	ldr	r2, [pc, #12]	@ (80002c8 <main+0x78>)
 80002bc:	f023 0301 	bic.w	r3, r3, #1
 80002c0:	60d3      	str	r3, [r2, #12]
	  key = uart_read();
 80002c2:	e7e7      	b.n	8000294 <main+0x44>
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010c00 	.word	0x40010c00
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	@ (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	@ (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	@ (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	@ (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 f811 	bl	8000324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffa5 	bl	8000250 <main>

08000306 <LoopForever>:

LoopForever:
  b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	0800038c 	.word	0x0800038c
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	20000020 	.word	0x20000020

08000320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC1_2_IRQHandler>
	...

08000324 <__libc_init_array>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	2600      	movs	r6, #0
 8000328:	4d0c      	ldr	r5, [pc, #48]	@ (800035c <__libc_init_array+0x38>)
 800032a:	4c0d      	ldr	r4, [pc, #52]	@ (8000360 <__libc_init_array+0x3c>)
 800032c:	1b64      	subs	r4, r4, r5
 800032e:	10a4      	asrs	r4, r4, #2
 8000330:	42a6      	cmp	r6, r4
 8000332:	d109      	bne.n	8000348 <__libc_init_array+0x24>
 8000334:	f000 f81a 	bl	800036c <_init>
 8000338:	2600      	movs	r6, #0
 800033a:	4d0a      	ldr	r5, [pc, #40]	@ (8000364 <__libc_init_array+0x40>)
 800033c:	4c0a      	ldr	r4, [pc, #40]	@ (8000368 <__libc_init_array+0x44>)
 800033e:	1b64      	subs	r4, r4, r5
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	42a6      	cmp	r6, r4
 8000344:	d105      	bne.n	8000352 <__libc_init_array+0x2e>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f855 3b04 	ldr.w	r3, [r5], #4
 800034c:	4798      	blx	r3
 800034e:	3601      	adds	r6, #1
 8000350:	e7ee      	b.n	8000330 <__libc_init_array+0xc>
 8000352:	f855 3b04 	ldr.w	r3, [r5], #4
 8000356:	4798      	blx	r3
 8000358:	3601      	adds	r6, #1
 800035a:	e7f2      	b.n	8000342 <__libc_init_array+0x1e>
 800035c:	08000384 	.word	0x08000384
 8000360:	08000384 	.word	0x08000384
 8000364:	08000384 	.word	0x08000384
 8000368:	08000388 	.word	0x08000388

0800036c <_init>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr

08000378 <_fini>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

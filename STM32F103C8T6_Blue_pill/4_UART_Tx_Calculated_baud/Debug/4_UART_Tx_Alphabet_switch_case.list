
4_UART_Tx_Alphabet_switch_case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000364  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000494  08000494  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000494  08000494  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000494  08000494  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000494  08000494  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00001494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000498  08000498  00001498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800049c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000004  080004a0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  080004a0  0000203c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000304  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000170  00000000  00000000  00002331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  000024a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003a  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe98  00000000  00000000  0000253a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007f3  00000000  00000000  000123d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053e57  00000000  00000000  00012bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066a1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ac  00000000  00000000  00066a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00066b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800047c 	.word	0x0800047c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800047c 	.word	0x0800047c

08000170 <uart_init>:
#define USARTDIV (SYSTEM_CLOCK / BAUD_RATE)
char my_chars[25]={0};
char initial_char = 'A';

void uart_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
    // 1. Enable GPIOA and USART1 clocks

    RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_USART1EN);
 8000176:	4b1c      	ldr	r3, [pc, #112]	@ (80001e8 <uart_init+0x78>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a1b      	ldr	r2, [pc, #108]	@ (80001e8 <uart_init+0x78>)
 800017c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000180:	f043 0304 	orr.w	r3, r3, #4
 8000184:	6193      	str	r3, [r2, #24]
    // 2. Configure PA9 (USART1_TX) as Alternate function push-pull
    // PA9 is configured in GPIOA_CRH[7:4] (MODE9[1:0]max speed 2Mhz, CNF9[1:0] Alternate function push pull)
    GPIOA->CRH |=(1U<<7);
 8000186:	4b19      	ldr	r3, [pc, #100]	@ (80001ec <uart_init+0x7c>)
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	4a18      	ldr	r2, [pc, #96]	@ (80001ec <uart_init+0x7c>)
 800018c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000190:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~(1U<<6);     // SET CNF 1:0 Alternate function push pull
 8000192:	4b16      	ldr	r3, [pc, #88]	@ (80001ec <uart_init+0x7c>)
 8000194:	685b      	ldr	r3, [r3, #4]
 8000196:	4a15      	ldr	r2, [pc, #84]	@ (80001ec <uart_init+0x7c>)
 8000198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800019c:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=(1U<<5);
 800019e:	4b13      	ldr	r3, [pc, #76]	@ (80001ec <uart_init+0x7c>)
 80001a0:	685b      	ldr	r3, [r3, #4]
 80001a2:	4a12      	ldr	r2, [pc, #72]	@ (80001ec <uart_init+0x7c>)
 80001a4:	f043 0320 	orr.w	r3, r3, #32
 80001a8:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &=~(1U<<4);		// SET MODE 1:0 Output max speed 2Mhz
 80001aa:	4b10      	ldr	r3, [pc, #64]	@ (80001ec <uart_init+0x7c>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	4a0f      	ldr	r2, [pc, #60]	@ (80001ec <uart_init+0x7c>)
 80001b0:	f023 0310 	bic.w	r3, r3, #16
 80001b4:	6053      	str	r3, [r2, #4]


    // 3. Configure USART1 baud rate
    //calculate mantissa
    int mantissa = SYSTEM_CLOCK/(16 * BAUD_RATE);
 80001b6:	2334      	movs	r3, #52	@ 0x34
 80001b8:	607b      	str	r3, [r7, #4]
    int fraction = ((SYSTEM_CLOCK %(16 * BAUD_RATE ))*16)/BAUD_RATE;
 80001ba:	2315      	movs	r3, #21
 80001bc:	603b      	str	r3, [r7, #0]
    USART1->BRR = (mantissa<<4U) | (fraction & 0xF);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	011a      	lsls	r2, r3, #4
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	f003 030f 	and.w	r3, r3, #15
 80001c8:	431a      	orrs	r2, r3
 80001ca:	4b09      	ldr	r3, [pc, #36]	@ (80001f0 <uart_init+0x80>)
 80001cc:	609a      	str	r2, [r3, #8]
    //USART1->BRR = 0x341;  // Assuming a clock of 8 MHz

    // 4. Enable USART1 transmitter and enable USART
    USART1->CR1 |= (USART_CR1_TE | USART_CR1_UE);
 80001ce:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <uart_init+0x80>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	4a07      	ldr	r2, [pc, #28]	@ (80001f0 <uart_init+0x80>)
 80001d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001d8:	f043 0308 	orr.w	r3, r3, #8
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40010800 	.word	0x40010800
 80001f0:	40013800 	.word	0x40013800

080001f4 <uart_transmit>:




void uart_transmit(char c)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]
    // Wait until transmit data register is empty
    while (!(USART1->SR & USART_SR_TXE))
 80001fe:	bf00      	nop
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <uart_transmit+0x28>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000208:	2b00      	cmp	r3, #0
 800020a:	d0f9      	beq.n	8000200 <uart_transmit+0xc>
    {
        // Wait for TXE to be set (indicates DR is empty)
    }

    // Write the character to the data register
    USART1->DR = c;
 800020c:	4a03      	ldr	r2, [pc, #12]	@ (800021c <uart_transmit+0x28>)
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	6053      	str	r3, [r2, #4]
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40013800 	.word	0x40013800

08000220 <main>:

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
    uart_init();       // Initialize USART1
 8000226:	f7ff ffa3 	bl	8000170 <uart_init>

    int array_index = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
    int print_index = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]

    while (1)
    {

    	if(array_index <= 25)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2b19      	cmp	r3, #25
 8000236:	dc30      	bgt.n	800029a <main+0x7a>
    	{
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 8000238:	bf00      	nop
 800023a:	4b65      	ldr	r3, [pc, #404]	@ (80003d0 <main+0x1b0>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f9      	beq.n	800023a <main+0x1a>
    		uart_transmit(initial_char);  // Transmit character 'A'
 8000246:	4b63      	ldr	r3, [pc, #396]	@ (80003d4 <main+0x1b4>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ffd2 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 8000250:	bf00      	nop
 8000252:	4b5f      	ldr	r3, [pc, #380]	@ (80003d0 <main+0x1b0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800025a:	2b00      	cmp	r3, #0
 800025c:	d0f9      	beq.n	8000252 <main+0x32>
    		uart_transmit('\n'); //Transmit new line
 800025e:	200a      	movs	r0, #10
 8000260:	f7ff ffc8 	bl	80001f4 <uart_transmit>
    		for (int i = 0; i < 100000; i++);  // Simple delay
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	e002      	b.n	8000270 <main+0x50>
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a59      	ldr	r2, [pc, #356]	@ (80003d8 <main+0x1b8>)
 8000274:	4293      	cmp	r3, r2
 8000276:	ddf8      	ble.n	800026a <main+0x4a>

    		my_chars[array_index]= initial_char;
 8000278:	4b56      	ldr	r3, [pc, #344]	@ (80003d4 <main+0x1b4>)
 800027a:	7819      	ldrb	r1, [r3, #0]
 800027c:	4a57      	ldr	r2, [pc, #348]	@ (80003dc <main+0x1bc>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	4413      	add	r3, r2
 8000282:	460a      	mov	r2, r1
 8000284:	701a      	strb	r2, [r3, #0]
    		initial_char++;
 8000286:	4b53      	ldr	r3, [pc, #332]	@ (80003d4 <main+0x1b4>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	3301      	adds	r3, #1
 800028c:	b2da      	uxtb	r2, r3
 800028e:	4b51      	ldr	r3, [pc, #324]	@ (80003d4 <main+0x1b4>)
 8000290:	701a      	strb	r2, [r3, #0]
    		array_index++;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e7cb      	b.n	8000232 <main+0x12>

    	}

    	else
    	{
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 800029a:	bf00      	nop
 800029c:	4b4c      	ldr	r3, [pc, #304]	@ (80003d0 <main+0x1b0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d0f9      	beq.n	800029c <main+0x7c>
    		uart_transmit('A');  // Transmit character 'A'
 80002a8:	2041      	movs	r0, #65	@ 0x41
 80002aa:	f7ff ffa3 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 80002ae:	bf00      	nop
 80002b0:	4b47      	ldr	r3, [pc, #284]	@ (80003d0 <main+0x1b0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f9      	beq.n	80002b0 <main+0x90>
    		uart_transmit('r');  // Transmit character 'r'
 80002bc:	2072      	movs	r0, #114	@ 0x72
 80002be:	f7ff ff99 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 80002c2:	bf00      	nop
 80002c4:	4b42      	ldr	r3, [pc, #264]	@ (80003d0 <main+0x1b0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <main+0xa4>
    		uart_transmit('r');  // Transmit character 'r'
 80002d0:	2072      	movs	r0, #114	@ 0x72
 80002d2:	f7ff ff8f 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 80002d6:	bf00      	nop
 80002d8:	4b3d      	ldr	r3, [pc, #244]	@ (80003d0 <main+0x1b0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f9      	beq.n	80002d8 <main+0xb8>
    		uart_transmit('a');  // Transmit character 'a'
 80002e4:	2061      	movs	r0, #97	@ 0x61
 80002e6:	f7ff ff85 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 80002ea:	bf00      	nop
 80002ec:	4b38      	ldr	r3, [pc, #224]	@ (80003d0 <main+0x1b0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f9      	beq.n	80002ec <main+0xcc>
    		uart_transmit('y');  // Transmit character 'y'
 80002f8:	2079      	movs	r0, #121	@ 0x79
 80002fa:	f7ff ff7b 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 80002fe:	bf00      	nop
 8000300:	4b33      	ldr	r3, [pc, #204]	@ (80003d0 <main+0x1b0>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f9      	beq.n	8000300 <main+0xe0>
    		uart_transmit(' ');  // Transmit character ' '
 800030c:	2020      	movs	r0, #32
 800030e:	f7ff ff71 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 8000312:	bf00      	nop
 8000314:	4b2e      	ldr	r3, [pc, #184]	@ (80003d0 <main+0x1b0>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f9      	beq.n	8000314 <main+0xf4>
    		uart_transmit('f');  // Transmit character 'f'
 8000320:	2066      	movs	r0, #102	@ 0x66
 8000322:	f7ff ff67 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 8000326:	bf00      	nop
 8000328:	4b29      	ldr	r3, [pc, #164]	@ (80003d0 <main+0x1b0>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f9      	beq.n	8000328 <main+0x108>
    		uart_transmit('u');  // Transmit character 'u'
 8000334:	2075      	movs	r0, #117	@ 0x75
 8000336:	f7ff ff5d 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 800033a:	bf00      	nop
 800033c:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <main+0x1b0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f9      	beq.n	800033c <main+0x11c>
    		uart_transmit('l');  // Transmit character 'l'
 8000348:	206c      	movs	r0, #108	@ 0x6c
 800034a:	f7ff ff53 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 800034e:	bf00      	nop
 8000350:	4b1f      	ldr	r3, [pc, #124]	@ (80003d0 <main+0x1b0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f9      	beq.n	8000350 <main+0x130>
    		uart_transmit('l');  // Transmit character 'l'
 800035c:	206c      	movs	r0, #108	@ 0x6c
 800035e:	f7ff ff49 	bl	80001f4 <uart_transmit>
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 8000362:	bf00      	nop
 8000364:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <main+0x1b0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0f9      	beq.n	8000364 <main+0x144>
    		uart_transmit('\n');  // Transmit character '\n'
 8000370:	200a      	movs	r0, #10
 8000372:	f7ff ff3f 	bl	80001f4 <uart_transmit>
    		array_index = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
    		for(int y=0; y<26; y++)
 800037a:	2300      	movs	r3, #0
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	e013      	b.n	80003a8 <main+0x188>
    		{
    			while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 8000380:	bf00      	nop
 8000382:	4b13      	ldr	r3, [pc, #76]	@ (80003d0 <main+0x1b0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f9      	beq.n	8000382 <main+0x162>
    			uart_transmit(my_chars[print_index]);  // Transmit array char
 800038e:	4a13      	ldr	r2, [pc, #76]	@ (80003dc <main+0x1bc>)
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	4413      	add	r3, r2
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff2c 	bl	80001f4 <uart_transmit>
    			print_index++;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	3301      	adds	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
    		for(int y=0; y<26; y++)
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	3301      	adds	r3, #1
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	2b19      	cmp	r3, #25
 80003ac:	dde8      	ble.n	8000380 <main+0x160>
    		}
    		while (!(USART1->SR & USART_SR_TXE));  // Wait until TX buffer is empty
 80003ae:	bf00      	nop
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <main+0x1b0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0f9      	beq.n	80003b0 <main+0x190>
    		uart_transmit('\n');  // Transmit array char
 80003bc:	200a      	movs	r0, #10
 80003be:	f7ff ff19 	bl	80001f4 <uart_transmit>
    		print_index = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]

    		initial_char='A';
 80003c6:	4b03      	ldr	r3, [pc, #12]	@ (80003d4 <main+0x1b4>)
 80003c8:	2241      	movs	r2, #65	@ 0x41
 80003ca:	701a      	strb	r2, [r3, #0]
    	if(array_index <= 25)
 80003cc:	e731      	b.n	8000232 <main+0x12>
 80003ce:	bf00      	nop
 80003d0:	40013800 	.word	0x40013800
 80003d4:	20000000 	.word	0x20000000
 80003d8:	0001869f 	.word	0x0001869f
 80003dc:	20000020 	.word	0x20000020

080003e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e0:	480d      	ldr	r0, [pc, #52]	@ (8000418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e8:	480c      	ldr	r0, [pc, #48]	@ (800041c <LoopForever+0x6>)
  ldr r1, =_edata
 80003ea:	490d      	ldr	r1, [pc, #52]	@ (8000420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <LoopForever+0xe>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000400:	4c0a      	ldr	r4, [pc, #40]	@ (800042c <LoopForever+0x16>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040e:	f000 f811 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000412:	f7ff ff05 	bl	8000220 <main>

08000416 <LoopForever>:

LoopForever:
  b LoopForever
 8000416:	e7fe      	b.n	8000416 <LoopForever>
  ldr   r0, =_estack
 8000418:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000420:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000424:	0800049c 	.word	0x0800049c
  ldr r2, =_sbss
 8000428:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800042c:	2000003c 	.word	0x2000003c

08000430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC1_2_IRQHandler>
	...

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	2600      	movs	r6, #0
 8000438:	4d0c      	ldr	r5, [pc, #48]	@ (800046c <__libc_init_array+0x38>)
 800043a:	4c0d      	ldr	r4, [pc, #52]	@ (8000470 <__libc_init_array+0x3c>)
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	42a6      	cmp	r6, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	f000 f81a 	bl	800047c <_init>
 8000448:	2600      	movs	r6, #0
 800044a:	4d0a      	ldr	r5, [pc, #40]	@ (8000474 <__libc_init_array+0x40>)
 800044c:	4c0a      	ldr	r4, [pc, #40]	@ (8000478 <__libc_init_array+0x44>)
 800044e:	1b64      	subs	r4, r4, r5
 8000450:	10a4      	asrs	r4, r4, #2
 8000452:	42a6      	cmp	r6, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	3601      	adds	r6, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f855 3b04 	ldr.w	r3, [r5], #4
 8000466:	4798      	blx	r3
 8000468:	3601      	adds	r6, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	08000494 	.word	0x08000494
 8000470:	08000494 	.word	0x08000494
 8000474:	08000494 	.word	0x08000494
 8000478:	08000498 	.word	0x08000498

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
